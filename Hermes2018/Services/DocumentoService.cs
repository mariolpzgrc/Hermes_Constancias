using Hermes2018.Data;
using Hermes2018.Helpers;
using Hermes2018.Models;
using Hermes2018.Models.Anexo;
using Hermes2018.Models.Categoria;
using Hermes2018.Models.Documento;
using Hermes2018.ViewComponentsModels;
using Hermes2018.ViewModels;
using Microsoft.AspNetCore.Hosting;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.Extensions.Logging;
using QRCoder;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using static QRCoder.PayloadGenerator;

namespace Hermes2018.Services
{
    public class DocumentoService : IDocumentoService
    {
        private readonly ApplicationDbContext _context;
        private readonly CultureInfo _cultureEs;
        private readonly IHostingEnvironment _environment;
        private readonly ILogger<DocumentoService> _logger;

        public DocumentoService(ApplicationDbContext context,
            IHostingEnvironment environment,
            ILogger<DocumentoService> logger)
        {
            _context = context;
            _cultureEs = new CultureInfo("es-MX");
            _environment = environment;
            _logger = logger;
        }

        //[**FOLIO**]
        public async Task<string> GenerarFolioAsync()
        {
            string folio = string.Empty;
            string chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
            bool existe = false;
            IQueryable<HER_Documento> existeQuery;

            DateTime date = DateTime.Now;
            Random rand = new Random();
            StringBuilder ret = new StringBuilder();
            string numbers = string.Empty;

            do
            {
                for (int i = 0; i < 4; i++)
                {
                    ret.Append(chars.Substring(rand.Next(chars.Length), 1));
                    numbers = numbers + rand.Next(0, 10);
                }
                folio = string.Format("{0}{1}-{2}", ret.ToString(), numbers, date.ToString("yy")); //ret.ToString() + numbers + "-" + date.ToString("yy");
                //--
                existeQuery = _context.HER_Documento
                    .Where(x => x.HER_Folio.Equals(folio))
                    .AsNoTracking()
                    .AsQueryable();

                existe = await existeQuery.AnyAsync();
                //--
            } while (existe);

            return folio;
        }

        //[**BORRADOR**]
        public int GuardarDocumento(NuevoDocumentoViewModel nuevoDocumento)
        {
            int documentoId = 0;
            var existeQuery = _context.HER_Documento
                .Where(x => x.HER_Folio.Equals(nuevoDocumento.Folio))
                .AsNoTracking()
                .AsQueryable();

            if (!existeQuery.Any())
            {
                //NUEVO DOCUMENTO
                var documento = new HER_Documento
                {
                    HER_Folio = nuevoDocumento.Folio,
                    HER_Asunto = nuevoDocumento.Asunto,
                    HER_NoInterno = nuevoDocumento.NoInterno,
                    HER_Cuerpo = nuevoDocumento.Cuerpo,
                    HER_FechaRegistro = nuevoDocumento.FechaCreacion,
                    HER_TipoId = nuevoDocumento.TipoId,
                    HER_DocumentoCreadorId = nuevoDocumento.CreadorId,
                    HER_DocumentoTitularId = nuevoDocumento.TitularId,
                    //--
                    HER_Firma = string.Empty
                };
                _context.HER_Documento.Add(documento);
                _context.SaveChanges();

                //documento
                documentoId = documento.HER_DocumentoId;
            }

            return documentoId;
        }
        public int GuardarDocumentoBase(NuevoDocumentoBaseViewModel nuevoDocumento)
        {
            int documentoId = 0;
            var existeQuery = _context.HER_DocumentoBase
                .Where(x => x.HER_Folio.Equals(nuevoDocumento.Folio))
                .AsNoTracking()
                .AsQueryable();

            if (!existeQuery.Any())
            {
                //NUEVO DOCUMENTO
                //Documento
                var documento = new HER_DocumentoBase
                {
                    HER_Folio = nuevoDocumento.Folio,
                    HER_RequiereRespuesta = nuevoDocumento.RequiereRespuesta,
                    HER_EnRevision = nuevoDocumento.EnRevision,
                    HER_Asunto = nuevoDocumento.Asunto,
                    HER_NoInterno = nuevoDocumento.NoInterno,
                    HER_Cuerpo = nuevoDocumento.Cuerpo,
                    HER_FechaRegistro = nuevoDocumento.FechaRegistro,
                    HER_FechaPropuesta = (nuevoDocumento.RequiereRespuesta) ? DateTime.Parse(nuevoDocumento.FechaPropuesta, _cultureEs) : DateTime.Now,
                    HER_ImportanciaId = nuevoDocumento.ImportanciaId,
                    HER_TipoId = nuevoDocumento.TipoId,
                    HER_EstadoId = nuevoDocumento.EstadoId,
                    HER_VisibilidadId = nuevoDocumento.VisibilidadId,
                    HER_DocumentoBaseTitularId = nuevoDocumento.TitularId,
                    HER_DocumentoBaseCreadorId = nuevoDocumento.CreadorId,
                    HER_AnexoId = nuevoDocumento.AnexoId,
                };
                _context.HER_DocumentoBase.Add(documento);

                //Destinatarios
                var listadoPara = new List<HER_Destinatario>();
                foreach (var destinatario in nuevoDocumento.Destinatarios)
                {
                    listadoPara.Add(new HER_Destinatario()
                    {
                        HER_Tipo = ConstTipoDestinatario.TipoDestinatarioN1,
                        HER_UDestinatarioId = destinatario,
                        HER_DocumentoBaseId = documento.HER_DocumentoBaseId
                    });
                }

                //CCP
                foreach (var concopia in nuevoDocumento.CCP)
                {
                    listadoPara.Add(new HER_Destinatario()
                    {
                        HER_Tipo = ConstTipoDestinatario.TipoDestinatarioN2,
                        HER_UDestinatarioId = concopia,
                        HER_DocumentoBaseId = documento.HER_DocumentoBaseId
                    });
                }
                _context.HER_Destinatario.AddRange(listadoPara);
                _context.SaveChanges();

                //documento
                documentoId = documento.HER_DocumentoBaseId;
            }

            return documentoId;
        }
        public async Task<int> ActualizarDocumentoBaseAsync(ActualizarDocumentoBaseViewModel documento)
        {
            int documentoId = 0;
            var documentoActualQuery = _context.HER_DocumentoBase
                .Where(x => x.HER_Folio == documento.Folio
                         && x.HER_DocumentoBaseId == documento.DocumentoBaseId)
                .AsQueryable();

            bool existe = await documentoActualQuery.AnyAsync();

            if (existe)
            {
                //ACTUALIZA EL BORRADOR
                var documentoActual = await documentoActualQuery.FirstOrDefaultAsync();

                documentoActual.HER_RequiereRespuesta = documento.RequiereRespuesta;
                documentoActual.HER_EnRevision = documento.EnRevision;
                documentoActual.HER_Asunto = documento.Asunto;
                documentoActual.HER_NoInterno = documento.NoInterno;
                documentoActual.HER_Cuerpo = documento.Cuerpo;
                documentoActual.HER_ImportanciaId = documento.ImportanciaId;
                documentoActual.HER_TipoId = documento.TipoId;
                documentoActual.HER_EstadoId = documento.EstadoId;
                documentoActual.HER_VisibilidadId = documento.VisibilidadId;
                documentoActual.HER_FechaPropuesta = (documento.RequiereRespuesta) ? DateTime.Parse(documento.FechaPropuesta, _cultureEs) : DateTime.Now;
                //--
                _context.HER_DocumentoBase.Update(documentoActual).State = EntityState.Modified;

                //Destinatarios (Eliminación)
                var destinatariosActualesQuery = _context.HER_Destinatario
                    .Where(x => x.HER_DocumentoBaseId == documentoActual.HER_DocumentoBaseId)
                    .AsQueryable();

                var destinatariosActuales = await destinatariosActualesQuery.ToListAsync();
                _context.HER_Destinatario.RemoveRange(destinatariosActuales);

                var result = await _context.SaveChangesAsync();
                //Se dividen dos resultados para ver si guardan correctamente el orden.
                //Destinatarios (Agregar)
                var listadoPara = new List<HER_Destinatario>();
                foreach (var destinatario in documento.Destinatarios)
                {
                    listadoPara.Add(new HER_Destinatario()
                    {
                        HER_Tipo = ConstTipoDestinatario.TipoDestinatarioN1,
                        HER_UDestinatarioId = destinatario,
                        HER_DocumentoBaseId = documentoActual.HER_DocumentoBaseId
                    });
                }
                //
                foreach (var concopia in documento.CCP)
                {
                    listadoPara.Add(new HER_Destinatario()
                    {
                        HER_Tipo = ConstTipoDestinatario.TipoDestinatarioN2,
                        HER_UDestinatarioId = concopia,
                        HER_DocumentoBaseId = documentoActual.HER_DocumentoBaseId
                    });
                }

                listadoPara.Reverse();
                foreach (HER_Destinatario destinatario in listadoPara)
                {
                    _context.HER_Destinatario.Add(destinatario);
                }
                //_context.HER_Destinatario.AddRange(listadoPara);
                var result2 = await _context.SaveChangesAsync();

                documentoId = (result > 0 && result2 > 0) ? documentoActual.HER_DocumentoBaseId : 0;
            }

            return documentoId;
        }
        //Obtener documento para editar
        public async Task<HER_DocumentoBase> ObtenerInfoBaseDocumentoAsync(int id, string username)
        {
            var baseQuery = _context.HER_DocumentoBase
                .Where(x => x.HER_DocumentoBaseId == id
                         && x.HER_DocumentoBaseTitular.HER_UserName == username)
                .Select(x => new
                {
                    x.HER_AnexoId,
                })
                .AsQueryable();

            var documentoBase = await baseQuery.FirstOrDefaultAsync();

            HER_DocumentoBase documento = null;
            IQueryable<HER_DocumentoBase> documentoQuery;

            //Validación para saber si tiene archivos anexos
            if (documentoBase != null)
            {
                if (documentoBase.HER_AnexoId != null)
                {
                    documentoQuery = _context.HER_DocumentoBase
                            .Include(x => x.HER_Anexo)
                                .ThenInclude(x => x.HER_AnexoArchivos)
                                    .ThenInclude(x => x.HER_AnexoRuta)
                            .Include(x => x.HER_Destinatarios)
                                .ThenInclude(x => x.HER_UDestinatario)
                            .Include(x => x.HER_Importancia)
                            .Include(x => x.HER_Estado)
                            .Include(x => x.HER_Tipo)
                            .Include(x => x.HER_Visibilidad)
                            .Where(x => x.HER_DocumentoBaseId == id
                                     && x.HER_DocumentoBaseTitular.HER_UserName == username)
                            .AsNoTracking()
                            .AsQueryable();

                    documento = await documentoQuery.FirstOrDefaultAsync();
                }
                else
                {
                    documentoQuery = _context.HER_DocumentoBase
                            .Include(x => x.HER_Destinatarios)
                                .ThenInclude(x => x.HER_UDestinatario)
                            .Include(x => x.HER_Importancia)
                            .Include(x => x.HER_Estado)
                            .Include(x => x.HER_Tipo)
                            .Include(x => x.HER_Visibilidad)
                            .Where(x => x.HER_DocumentoBaseId == id
                                     && x.HER_DocumentoBaseTitular.HER_UserName == username)
                            .AsNoTracking()
                            .AsQueryable();

                    documento = await documentoQuery.FirstOrDefaultAsync();
                }
            }

            return documento;
        }
        //Listado de documentos en borrador
        public IQueryable<DocumentoBorradorViewModel> ListadoBorradores(string username, string busqueda, int? categoria, string fechaini, string fechafin)
        {
            IQueryable<DocumentoBorradorViewModel> documentosQuery;
            //--
            DateTime fechaInicioTemp;
            DateTime fechaFinTemp;

            if (string.IsNullOrEmpty(busqueda) && categoria == null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                documentosQuery = _context.HER_DocumentoBase
                        .Where(x => x.HER_EstadoId == ConstEstadoDocumento.EstadoDocumentoN1
                                 && x.HER_DocumentoBaseTitular.HER_UserName == username
                                 && x.HER_DocumentoBaseTitular.HER_Activo == true
                                 && (x.HER_FechaRegistro >= fechaInicioTemp && x.HER_FechaRegistro <= fechaFinTemp))
                        .Select(x => new DocumentoBorradorViewModel
                        {
                            DocumentoId = x.HER_DocumentoBaseId,
                            Folio = x.HER_Folio,
                            Remitente = x.HER_DocumentoBaseTitular.HER_NombreCompleto,
                            Destinatario = x.HER_Destinatarios.Where(y => y.HER_Tipo == ConstTipoDestinatario.TipoDestinatarioN1).First().HER_UDestinatario.HER_NombreCompleto,
                            Asunto = x.HER_Asunto,
                            NoInterno = x.HER_NoInterno,
                            Fecha = x.HER_FechaRegistro,
                            Tipo = x.HER_Tipo.HER_Nombre,
                            Importancia = (x.HER_Importancia.HER_Nombre == ConstImportancia.ImportanciaT1) ? true : false,
                            Destinatarios_Extras = (x.HER_Destinatarios.Where(y => y.HER_Tipo == ConstTipoDestinatario.TipoDestinatarioN1).Count() - 1),
                            Adjuntos = (x.HER_AnexoId != null) ? true : false
                        })
                        .OrderByDescending(x => x.Fecha)
                        .AsNoTracking()
                        .AsQueryable();
            }
            else if (!string.IsNullOrEmpty(busqueda) && categoria == null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                busqueda = busqueda.Replace('+', ' ');

                documentosQuery = _context.HER_DocumentoBase
                        .Where(x => x.HER_EstadoId == ConstEstadoDocumento.EstadoDocumentoN1
                                 && x.HER_DocumentoBaseTitular.HER_UserName == username
                                 && x.HER_DocumentoBaseTitular.HER_Activo == true
                                 && (EF.Functions.Like(x.HER_Folio, "%" + busqueda + "%")
                                    || EF.Functions.Like(x.HER_Asunto, "%" + busqueda + "%")
                                    || x.HER_Destinatarios.Any(y => EF.Functions.Like(y.HER_UDestinatario.HER_NombreCompleto, "%" + busqueda + "%")))
                                 )
                        .Select(x => new DocumentoBorradorViewModel
                        {
                            DocumentoId = x.HER_DocumentoBaseId,
                            Folio = x.HER_Folio,
                            Remitente = x.HER_DocumentoBaseTitular.HER_NombreCompleto,
                            Destinatario = x.HER_Destinatarios.Where(y => y.HER_Tipo == ConstTipoDestinatario.TipoDestinatarioN1).First().HER_UDestinatario.HER_NombreCompleto,
                            Asunto = x.HER_Asunto,
                            NoInterno = x.HER_NoInterno,
                            Fecha = x.HER_FechaRegistro,
                            Tipo = x.HER_Tipo.HER_Nombre,
                            Importancia = (x.HER_Importancia.HER_Nombre == ConstImportancia.ImportanciaT1) ? true : false,
                            Destinatarios_Extras = (x.HER_Destinatarios.Where(y => y.HER_Tipo == ConstTipoDestinatario.TipoDestinatarioN1).Count() - 1),
                            Adjuntos = (x.HER_AnexoId != null) ? true : false
                        })
                        .OrderByDescending(x => x.Fecha)
                        .AsNoTracking()
                        .AsQueryable();
            }
            else if (string.IsNullOrEmpty(busqueda) && categoria != null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                documentosQuery = _context.HER_DocumentoBase
                       .Where(x => x.HER_EstadoId == ConstEstadoDocumento.EstadoDocumentoN1
                                && x.HER_DocumentoBaseTitular.HER_UserName == username
                                && x.HER_DocumentoBaseTitular.HER_Activo == true
                                && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria))
                       .Select(x => new DocumentoBorradorViewModel
                       {
                           DocumentoId = x.HER_DocumentoBaseId,
                           Folio = x.HER_Folio,
                           Remitente = x.HER_DocumentoBaseTitular.HER_NombreCompleto,
                           Destinatario = x.HER_Destinatarios.Where(y => y.HER_Tipo == ConstTipoDestinatario.TipoDestinatarioN1).First().HER_UDestinatario.HER_NombreCompleto,
                           Asunto = x.HER_Asunto,
                           NoInterno = x.HER_NoInterno,
                           Fecha = x.HER_FechaRegistro,
                           Tipo = x.HER_Tipo.HER_Nombre,
                           Importancia = (x.HER_Importancia.HER_Nombre == ConstImportancia.ImportanciaT1) ? true : false,
                           Destinatarios_Extras = (x.HER_Destinatarios.Where(y => y.HER_Tipo == ConstTipoDestinatario.TipoDestinatarioN1).Count() - 1),
                           Adjuntos = (x.HER_AnexoId != null) ? true : false
                       })
                       .OrderByDescending(x => x.Fecha)
                       .AsNoTracking()
                       .AsQueryable();
            }
            else if (!string.IsNullOrEmpty(busqueda) && categoria != null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                busqueda = busqueda.Replace('+', ' ');

                documentosQuery = _context.HER_DocumentoBase
                        .Where(x => x.HER_EstadoId == ConstEstadoDocumento.EstadoDocumentoN1
                                 && x.HER_DocumentoBaseTitular.HER_UserName == username
                                 && x.HER_DocumentoBaseTitular.HER_Activo == true
                                 && (EF.Functions.Like(x.HER_Folio, "%" + busqueda + "%")
                                    || EF.Functions.Like(x.HER_Asunto, "%" + busqueda + "%")
                                    || x.HER_Destinatarios.Any(y => EF.Functions.Like(y.HER_UDestinatario.HER_NombreCompleto, "%" + busqueda + "%")))
                                 && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                         )
                        .Select(x => new DocumentoBorradorViewModel
                        {
                            DocumentoId = x.HER_DocumentoBaseId,
                            Folio = x.HER_Folio,
                            Remitente = x.HER_DocumentoBaseTitular.HER_NombreCompleto,
                            Destinatario = x.HER_Destinatarios.Where(y => y.HER_Tipo == ConstTipoDestinatario.TipoDestinatarioN1).First().HER_UDestinatario.HER_NombreCompleto,
                            Asunto = x.HER_Asunto,
                            NoInterno = x.HER_NoInterno,
                            Fecha = x.HER_FechaRegistro,
                            Tipo = x.HER_Tipo.HER_Nombre,
                            Importancia = (x.HER_Importancia.HER_Nombre == ConstImportancia.ImportanciaT1) ? true : false,
                            Destinatarios_Extras = (x.HER_Destinatarios.Where(y => y.HER_Tipo == ConstTipoDestinatario.TipoDestinatarioN1).Count() - 1),
                            Adjuntos = (x.HER_AnexoId != null) ? true : false
                        })
                        .OrderByDescending(x => x.Fecha)
                        .AsNoTracking()
                        .AsQueryable();
            }
            else if (!string.IsNullOrEmpty(busqueda) && categoria == null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);
                busqueda = busqueda.Replace('+', ' ');

                documentosQuery = _context.HER_DocumentoBase
                        .Where(x => x.HER_EstadoId == ConstEstadoDocumento.EstadoDocumentoN1
                                 && x.HER_DocumentoBaseTitular.HER_UserName == username
                                 && x.HER_DocumentoBaseTitular.HER_Activo == true
                                 && (EF.Functions.Like(x.HER_Folio, "%" + busqueda + "%")
                                    || EF.Functions.Like(x.HER_Asunto, "%" + busqueda + "%")
                                    || x.HER_Destinatarios.Any(y => EF.Functions.Like(y.HER_UDestinatario.HER_NombreCompleto, "%" + busqueda + "%")))
                                && (x.HER_FechaRegistro >= fechaInicioTemp && x.HER_FechaRegistro <= fechaFinTemp)
                         )
                        .Select(x => new DocumentoBorradorViewModel
                        {
                            DocumentoId = x.HER_DocumentoBaseId,
                            Folio = x.HER_Folio,
                            Remitente = x.HER_DocumentoBaseTitular.HER_NombreCompleto,
                            Destinatario = x.HER_Destinatarios.Where(y => y.HER_Tipo == ConstTipoDestinatario.TipoDestinatarioN1).First().HER_UDestinatario.HER_NombreCompleto,
                            Asunto = x.HER_Asunto,
                            NoInterno = x.HER_NoInterno,
                            Fecha = x.HER_FechaRegistro,
                            Tipo = x.HER_Tipo.HER_Nombre,
                            Importancia = (x.HER_Importancia.HER_Nombre == ConstImportancia.ImportanciaT1) ? true : false,
                            Destinatarios_Extras = (x.HER_Destinatarios.Where(y => y.HER_Tipo == ConstTipoDestinatario.TipoDestinatarioN1).Count() - 1),
                            Adjuntos = (x.HER_AnexoId != null) ? true : false
                        })
                        .OrderByDescending(x => x.Fecha)
                        .AsNoTracking()
                        .AsQueryable();
            }
            else if (string.IsNullOrEmpty(busqueda) && categoria != null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                documentosQuery = _context.HER_DocumentoBase
                       .Where(x => x.HER_EstadoId == ConstEstadoDocumento.EstadoDocumentoN1
                                && x.HER_DocumentoBaseTitular.HER_UserName == username
                                && x.HER_DocumentoBaseTitular.HER_Activo == true
                                && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                                && (x.HER_FechaRegistro >= fechaInicioTemp && x.HER_FechaRegistro <= fechaFinTemp)
                       )
                       .Select(x => new DocumentoBorradorViewModel
                       {
                           DocumentoId = x.HER_DocumentoBaseId,
                           Folio = x.HER_Folio,
                           Remitente = x.HER_DocumentoBaseTitular.HER_NombreCompleto,
                           Destinatario = x.HER_Destinatarios.Where(y => y.HER_Tipo == ConstTipoDestinatario.TipoDestinatarioN1).First().HER_UDestinatario.HER_NombreCompleto,
                           Asunto = x.HER_Asunto,
                           NoInterno = x.HER_NoInterno,
                           Fecha = x.HER_FechaRegistro,
                           Tipo = x.HER_Tipo.HER_Nombre,
                           Importancia = (x.HER_Importancia.HER_Nombre == ConstImportancia.ImportanciaT1) ? true : false,
                           Destinatarios_Extras = (x.HER_Destinatarios.Where(y => y.HER_Tipo == ConstTipoDestinatario.TipoDestinatarioN1).Count() - 1),
                           Adjuntos = (x.HER_AnexoId != null) ? true : false
                       })
                       .OrderByDescending(x => x.Fecha)
                        .AsNoTracking()
                       .AsQueryable();
            }
            else if (!string.IsNullOrEmpty(busqueda) && categoria != null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);
                busqueda = busqueda.Replace('+', ' ');

                documentosQuery = _context.HER_DocumentoBase
                        .Where(x => x.HER_EstadoId == ConstEstadoDocumento.EstadoDocumentoN1
                                 && x.HER_DocumentoBaseTitular.HER_UserName == username
                                 && x.HER_DocumentoBaseTitular.HER_Activo == true
                                 && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                                 && (x.HER_FechaRegistro >= fechaInicioTemp && x.HER_FechaRegistro <= fechaFinTemp)
                                 && (EF.Functions.Like(x.HER_Folio, "%" + busqueda + "%")
                                    || EF.Functions.Like(x.HER_Asunto, "%" + busqueda + "%")
                                    || x.HER_Destinatarios.Any(y => EF.Functions.Like(y.HER_UDestinatario.HER_NombreCompleto, "%" + busqueda + "%")))
                         )
                        .Select(x => new DocumentoBorradorViewModel
                        {
                            DocumentoId = x.HER_DocumentoBaseId,
                            Folio = x.HER_Folio,
                            Remitente = x.HER_DocumentoBaseTitular.HER_NombreCompleto,
                            Destinatario = x.HER_Destinatarios.Where(y => y.HER_Tipo == ConstTipoDestinatario.TipoDestinatarioN1).First().HER_UDestinatario.HER_NombreCompleto,
                            Asunto = x.HER_Asunto,
                            NoInterno = x.HER_NoInterno,
                            Fecha = x.HER_FechaRegistro,
                            Tipo = x.HER_Tipo.HER_Nombre,
                            Importancia = (x.HER_Importancia.HER_Nombre == ConstImportancia.ImportanciaT1) ? true : false,
                            Destinatarios_Extras = (x.HER_Destinatarios.Where(y => y.HER_Tipo == ConstTipoDestinatario.TipoDestinatarioN1).Count() - 1),
                            Adjuntos = (x.HER_AnexoId != null) ? true : false
                        })
                        .OrderByDescending(x => x.Fecha)
                        .AsNoTracking()
                        .AsQueryable();
            }
            else
            {
                documentosQuery = _context.HER_DocumentoBase
                        .Where(x => x.HER_EstadoId == ConstEstadoDocumento.EstadoDocumentoN1
                                 && x.HER_DocumentoBaseTitular.HER_UserName == username
                                 && x.HER_DocumentoBaseTitular.HER_Activo == true)
                        .Select(x => new DocumentoBorradorViewModel
                        {
                            DocumentoId = x.HER_DocumentoBaseId,
                            Folio = x.HER_Folio,
                            Remitente = x.HER_DocumentoBaseTitular.HER_NombreCompleto,
                            Destinatario = x.HER_Destinatarios.Where(y => y.HER_Tipo == ConstTipoDestinatario.TipoDestinatarioN1).First().HER_UDestinatario.HER_NombreCompleto,
                            Asunto = x.HER_Asunto,
                            NoInterno = x.HER_NoInterno,
                            Fecha = x.HER_FechaRegistro,
                            Tipo = x.HER_Tipo.HER_Nombre,
                            Importancia = (x.HER_Importancia.HER_Nombre == ConstImportancia.ImportanciaT1) ? true : false,
                            Destinatarios_Extras = (x.HER_Destinatarios.Where(y => y.HER_Tipo == ConstTipoDestinatario.TipoDestinatarioN1).Count() - 1),
                            Adjuntos = (x.HER_AnexoId != null) ? true : false
                        })
                        .OrderByDescending(x => x.Fecha)
                        .AsNoTracking()
                        .AsQueryable();
            }

            return documentosQuery;
        }
        public async Task<bool> EliminarDocumentoBaseAsync(string folio, int documentoBaseId)
        {
            var result = 0;
            var documentoBaseQuery = _context.HER_DocumentoBase
                .Include(x => x.HER_Destinatarios)
                .Include(x => x.HER_Categorias)
                .Where(x => x.HER_Folio == folio
                         && x.HER_DocumentoBaseId == documentoBaseId)
                .AsQueryable();

            var documentoBase = await documentoBaseQuery.FirstOrDefaultAsync();

            if (documentoBase != null)
            {
                //Elimina Destinatarios
                _context.HER_Destinatario.RemoveRange(documentoBase.HER_Destinatarios);

                //Elimina Categorias
                _context.HER_CategoriaDocumentoBase.RemoveRange(documentoBase.HER_Categorias);

                _context.HER_DocumentoBase.Remove(documentoBase);
                result = await _context.SaveChangesAsync();
            }

            return (result > 0) ? true : false;
        }
        public async Task<BorrarDocumentoBaseViewModel> ObtenerInfoBaseParaBorrarDocumentoAsync(int id, string username)
        {
            var borradorQuery = _context.HER_DocumentoBase
                .Where(x => x.HER_DocumentoBaseTitular.HER_UserName == username
                       && x.HER_DocumentoBaseId == id)
                .Select(x => new BorrarDocumentoBaseViewModel
                {
                    DocumentoBaseId = x.HER_DocumentoBaseId,
                    Folio = x.HER_Folio,
                    Asunto = x.HER_Asunto,
                    Tipo = x.HER_Tipo.HER_Nombre,
                    Fecha = x.HER_FechaRegistro,
                    FechaPropuesta = x.HER_FechaPropuesta
                })
                .AsNoTracking()
                .AsQueryable();

            return await borradorQuery.FirstOrDefaultAsync();
        }
        public async Task<bool> ExisteDocumentoBaseAsync(string folio, int documentobaseId)
        {
            var documentoBaseQuery = _context.HER_DocumentoBase
               .Where(x => x.HER_Folio == folio
                        && x.HER_DocumentoBaseId == documentobaseId)
               .AsNoTracking()
               .AsQueryable();

            return await documentoBaseQuery.AnyAsync();
        }
        public async Task<bool> BorrarDocumentoBaseAsync(string folio, int documentobaseId)
        {
            int result = 0;
            var documentoBaseQuery = _context.HER_DocumentoBase
                .Include(x => x.HER_Destinatarios)
                .Include(x => x.HER_Categorias)
                .Where(x => x.HER_Folio == folio
                         && x.HER_DocumentoBaseId == documentobaseId)
                .AsQueryable();

            var documentoBase = await documentoBaseQuery.FirstOrDefaultAsync();

            if (documentoBase.HER_AnexoId != null)
            {
                var anexoQuery = _context.HER_Anexo
                    .Include(x => x.HER_AnexoArchivos)
                    .Where(x => x.HER_AnexoId == documentoBase.HER_AnexoId)
                    .AsQueryable();

                var anexo = await anexoQuery.FirstOrDefaultAsync();

                var anexoArchivoQuery = _context.HER_AnexoArchivo
                    .Include(x => x.HER_AnexoRuta)
                    .Where(x => x.HER_AnexoId == anexo.HER_AnexoId)
                    .AsQueryable();

                var anexoArchivo = await anexoArchivoQuery.FirstOrDefaultAsync();

                string rutaBase;

                if (anexoArchivo.HER_AnexoRutaId == null)
                {
                    rutaBase = _environment.WebRootPath;
                }
                else
                {
                    rutaBase = anexoArchivo.HER_AnexoRuta.HER_RutaBase;
                }

                //---Borrado de carpeta
                var rutaCarpeta = Path.Combine(rutaBase, anexoArchivo.HER_RutaComplemento);

                try
                {
                    bool carpetaExiste = Directory.Exists(rutaCarpeta);
                    if (carpetaExiste)
                    {
                        foreach (string file in Directory.GetFiles(rutaCarpeta))
                        {
                            File.Delete(file);
                        }

                        Directory.Delete(rutaCarpeta, true);
                    }

                    //Borrar en la BD el anexo
                    _context.HER_AnexoArchivo.RemoveRange(anexo.HER_AnexoArchivos);
                    _context.HER_Anexo.Remove(anexo);

                    //Borrar en la BD el documento base

                    //Elimina Destinatarios
                    _context.HER_Destinatario.RemoveRange(documentoBase.HER_Destinatarios);

                    //Elimina Categorias
                    _context.HER_CategoriaDocumentoBase.RemoveRange(documentoBase.HER_Categorias);

                    _context.HER_DocumentoBase.Remove(documentoBase);

                    result = await _context.SaveChangesAsync();
                }
                catch (Exception ex)
                {
                    _logger.LogError("DocumentoService:EliminarBorrador: " + ex.Message);
                }
            }
            else
            {
                //Elimina Destinatarios
                _context.HER_Destinatario.RemoveRange(documentoBase.HER_Destinatarios);

                //Elimina Categorias
                _context.HER_CategoriaDocumentoBase.RemoveRange(documentoBase.HER_Categorias);

                _context.HER_DocumentoBase.Remove(documentoBase);

                result = await _context.SaveChangesAsync();
            }

            return (result > 0) ? true : false;
        }
        public async Task<bool> ActualizarEstadoDocumentoAsync(EstadoDocumentoViewModel estadoViewModel)
        {
            var band = false;
            var documentoQuery = _context.HER_DocumentoBase
                .Where(x => x.HER_Folio == estadoViewModel.Folio)
                .AsQueryable();

            var documento = await documentoQuery.FirstOrDefaultAsync();

            if (documento != null)
            {
                documento.HER_EstadoId = estadoViewModel.Estado;

                _context.HER_DocumentoBase.Update(documento).State = EntityState.Modified;
                var result = _context.SaveChanges();

                band = (result > 0) ? true : false;
            }

            return band;
        }
        public IQueryable<DocumentoRevisionViewModel> ListadoRevisionRemitente(string username, string busqueda, int? categoria, string fechaini, string fechafin)
        {
            IQueryable<DocumentoRevisionViewModel> unionQuery;
            IQueryable<DocumentoRevisionViewModel> listadoRevisionRemitenteQuery;
            IQueryable<DocumentoRevisionViewModel> listadoRevisionDestinatarioQuery;
            //--
            DateTime fechaInicioTemp;
            DateTime fechaFinTemp;

            if (string.IsNullOrEmpty(busqueda) && categoria == null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                //-ListadoRevisionRemitente
                listadoRevisionRemitenteQuery = _context.HER_DocumentoBase
                    .Where(x => x.HER_EstadoId == ConstEstadoDocumento.EstadoDocumentoN2
                             && x.HER_Revision.HER_RevisionRemitente.HER_UserName == username
                             && x.HER_Revision.HER_RevisionRemitente.HER_Activo == true
                             && (x.HER_Revision.HER_Fecha >= fechaInicioTemp && x.HER_Revision.HER_Fecha <= fechaFinTemp)
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRevisionViewModel
                    {
                        RevisionId = x.HER_Revision.HER_EnvioRevisionId,
                        Folio = x.HER_Folio,
                        Remitente = x.HER_Revision.HER_RevisionRemitente.HER_NombreCompleto,
                        Destinatario = x.HER_Revision.HER_RevisionDestinatario.HER_NombreCompleto,
                        Asunto = x.HER_Asunto,
                        NoInterno = x.HER_NoInterno,
                        Fecha = x.HER_FechaRegistro,
                        Tipo = x.HER_Tipo.HER_Nombre,
                        Importancia = (x.HER_Importancia.HER_Nombre == ConstImportancia.ImportanciaT1) ? true : false,
                        TipoEnvio = ConstTipoEnvioRevision.TipoEnvioRevisionN1,
                        Estado = x.HER_Revision.HER_EstadoRemitente,
                        Adjuntos = (x.HER_AnexoId != null) ? true : false
                    })
                    .OrderByDescending(x => x.Fecha)
                    .AsQueryable();

                //-ListadoRevisionDestinatario
                listadoRevisionDestinatarioQuery = _context.HER_DocumentoBase
                    .Where(x => x.HER_EstadoId == ConstEstadoDocumento.EstadoDocumentoN2
                             && x.HER_Revision.HER_RevisionDestinatario.HER_UserName == username
                             && x.HER_Revision.HER_RevisionDestinatario.HER_Activo == true
                             && x.HER_Revision.HER_EstadoDestinatario != ConstEstadoRevision.EstadoDestinatarioN2
                             && (x.HER_Revision.HER_Fecha >= fechaInicioTemp && x.HER_Revision.HER_Fecha <= fechaFinTemp)
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRevisionViewModel
                    {
                        RevisionId = x.HER_Revision.HER_EnvioRevisionId,
                        Folio = x.HER_Folio,
                        Remitente = x.HER_Revision.HER_RevisionRemitente.HER_NombreCompleto,
                        Destinatario = x.HER_Revision.HER_RevisionDestinatario.HER_NombreCompleto,
                        Asunto = x.HER_Asunto,
                        NoInterno = x.HER_NoInterno,
                        Fecha = x.HER_FechaRegistro,
                        Tipo = x.HER_Tipo.HER_Nombre,
                        Importancia = (x.HER_Importancia.HER_Nombre == ConstImportancia.ImportanciaT1) ? true : false,
                        TipoEnvio = ConstTipoEnvioRevision.TipoEnvioRevisionN2,
                        Estado = x.HER_Revision.HER_EstadoDestinatario,
                        Adjuntos = (x.HER_AnexoId != null) ? true : false,
                    })
                    .OrderByDescending(x => x.Fecha)
                    .AsQueryable();
            }
            else if (!string.IsNullOrEmpty(busqueda) && categoria == null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                busqueda = busqueda.Replace('+', ' ');

                //-ListadoRevisionRemitente
                listadoRevisionRemitenteQuery = _context.HER_DocumentoBase
                    .Where(x => x.HER_EstadoId == ConstEstadoDocumento.EstadoDocumentoN2
                             && x.HER_Revision.HER_RevisionRemitente.HER_UserName == username
                             && x.HER_Revision.HER_RevisionRemitente.HER_Activo == true
                             && (EF.Functions.Like(x.HER_Folio, "%" + busqueda + "%")
                                 || EF.Functions.Like(x.HER_Asunto, "%" + busqueda + "%")
                                 || EF.Functions.Like(x.HER_Revision.HER_RevisionDestinatario.HER_NombreCompleto, "%" + busqueda + "%"))
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRevisionViewModel
                    {
                        RevisionId = x.HER_Revision.HER_EnvioRevisionId,
                        Folio = x.HER_Folio,
                        Remitente = x.HER_Revision.HER_RevisionRemitente.HER_NombreCompleto,
                        Destinatario = x.HER_Revision.HER_RevisionDestinatario.HER_NombreCompleto,
                        Asunto = x.HER_Asunto,
                        NoInterno = x.HER_NoInterno,
                        Fecha = x.HER_FechaRegistro,
                        Tipo = x.HER_Tipo.HER_Nombre,
                        Importancia = (x.HER_Importancia.HER_Nombre == ConstImportancia.ImportanciaT1) ? true : false,
                        TipoEnvio = ConstTipoEnvioRevision.TipoEnvioRevisionN1,
                        Estado = x.HER_Revision.HER_EstadoRemitente,
                        Adjuntos = (x.HER_AnexoId != null) ? true : false
                    })
                    .OrderByDescending(x => x.Fecha)
                    .AsQueryable();


                //-ListadoRevisionDestinatario
                listadoRevisionDestinatarioQuery = _context.HER_DocumentoBase
                    .Where(x => x.HER_EstadoId == ConstEstadoDocumento.EstadoDocumentoN2
                             && x.HER_Revision.HER_RevisionDestinatario.HER_UserName == username
                             && x.HER_Revision.HER_RevisionDestinatario.HER_Activo == true
                             && x.HER_Revision.HER_EstadoDestinatario != ConstEstadoRevision.EstadoDestinatarioN2
                             && (EF.Functions.Like(x.HER_Folio, "%" + busqueda + "%")
                                    || EF.Functions.Like(x.HER_Asunto, "%" + busqueda + "%")
                                    || EF.Functions.Like(x.HER_Revision.HER_RevisionRemitente.HER_NombreCompleto, "%" + busqueda + "%"))
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRevisionViewModel
                    {
                        RevisionId = x.HER_Revision.HER_EnvioRevisionId,
                        Folio = x.HER_Folio,
                        Remitente = x.HER_Revision.HER_RevisionRemitente.HER_NombreCompleto,
                        Destinatario = x.HER_Revision.HER_RevisionDestinatario.HER_NombreCompleto,
                        Asunto = x.HER_Asunto,
                        NoInterno = x.HER_NoInterno,
                        Fecha = x.HER_FechaRegistro,
                        Tipo = x.HER_Tipo.HER_Nombre,
                        Importancia = (x.HER_Importancia.HER_Nombre == ConstImportancia.ImportanciaT1) ? true : false,
                        TipoEnvio = ConstTipoEnvioRevision.TipoEnvioRevisionN2,
                        Estado = x.HER_Revision.HER_EstadoDestinatario,
                        Adjuntos = (x.HER_AnexoId != null) ? true : false,
                    })
                    .OrderByDescending(x => x.Fecha)
                    .AsQueryable();
            }
            else if (string.IsNullOrEmpty(busqueda) && categoria != null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                //-ListadoRevisionRemitente
                listadoRevisionRemitenteQuery = _context.HER_DocumentoBase
                    .Where(x => x.HER_EstadoId == ConstEstadoDocumento.EstadoDocumentoN2
                             && x.HER_Revision.HER_RevisionRemitente.HER_UserName == username
                             && x.HER_Revision.HER_RevisionRemitente.HER_Activo == true
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRevisionViewModel
                    {
                        RevisionId = x.HER_Revision.HER_EnvioRevisionId,
                        Folio = x.HER_Folio,
                        Remitente = x.HER_Revision.HER_RevisionRemitente.HER_NombreCompleto,
                        Destinatario = x.HER_Revision.HER_RevisionDestinatario.HER_NombreCompleto,
                        Asunto = x.HER_Asunto,
                        NoInterno = x.HER_NoInterno,
                        Fecha = x.HER_FechaRegistro,
                        Tipo = x.HER_Tipo.HER_Nombre,
                        Importancia = (x.HER_Importancia.HER_Nombre == ConstImportancia.ImportanciaT1) ? true : false,
                        TipoEnvio = ConstTipoEnvioRevision.TipoEnvioRevisionN1,
                        Estado = x.HER_Revision.HER_EstadoRemitente,
                        Adjuntos = (x.HER_AnexoId != null) ? true : false
                    })
                    .OrderByDescending(x => x.Fecha)
                    .AsQueryable();


                //-ListadoRevisionDestinatario
                listadoRevisionDestinatarioQuery = _context.HER_DocumentoBase
                    .Where(x => x.HER_EstadoId == ConstEstadoDocumento.EstadoDocumentoN2
                             && x.HER_Revision.HER_RevisionDestinatario.HER_UserName == username
                             && x.HER_Revision.HER_RevisionDestinatario.HER_Activo == true
                             && x.HER_Revision.HER_EstadoDestinatario != ConstEstadoRevision.EstadoDestinatarioN2
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRevisionViewModel
                    {
                        RevisionId = x.HER_Revision.HER_EnvioRevisionId,
                        Folio = x.HER_Folio,
                        Remitente = x.HER_Revision.HER_RevisionRemitente.HER_NombreCompleto,
                        Destinatario = x.HER_Revision.HER_RevisionDestinatario.HER_NombreCompleto,
                        Asunto = x.HER_Asunto,
                        NoInterno = x.HER_NoInterno,
                        Fecha = x.HER_FechaRegistro,
                        Tipo = x.HER_Tipo.HER_Nombre,
                        Importancia = (x.HER_Importancia.HER_Nombre == ConstImportancia.ImportanciaT1) ? true : false,
                        TipoEnvio = ConstTipoEnvioRevision.TipoEnvioRevisionN2,
                        Estado = x.HER_Revision.HER_EstadoDestinatario,
                        Adjuntos = (x.HER_AnexoId != null) ? true : false,
                    })
                    .OrderByDescending(x => x.Fecha)
                    .AsQueryable();
            }
            else if (!string.IsNullOrEmpty(busqueda) && categoria != null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                busqueda = busqueda.Replace('+', ' ');

                //-ListadoRevisionRemitente
                listadoRevisionRemitenteQuery = _context.HER_DocumentoBase
                    .Where(x => x.HER_EstadoId == ConstEstadoDocumento.EstadoDocumentoN2
                             && x.HER_Revision.HER_RevisionRemitente.HER_UserName == username
                             && x.HER_Revision.HER_RevisionRemitente.HER_Activo == true
                             && (EF.Functions.Like(x.HER_Folio, "%" + busqueda + "%")
                                 || EF.Functions.Like(x.HER_Asunto, "%" + busqueda + "%")
                                 || EF.Functions.Like(x.HER_Revision.HER_RevisionDestinatario.HER_NombreCompleto, "%" + busqueda + "%"))
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRevisionViewModel
                    {
                        RevisionId = x.HER_Revision.HER_EnvioRevisionId,
                        Folio = x.HER_Folio,
                        Remitente = x.HER_Revision.HER_RevisionRemitente.HER_NombreCompleto,
                        Destinatario = x.HER_Revision.HER_RevisionDestinatario.HER_NombreCompleto,
                        Asunto = x.HER_Asunto,
                        NoInterno = x.HER_NoInterno,
                        Fecha = x.HER_FechaRegistro,
                        Tipo = x.HER_Tipo.HER_Nombre,
                        Importancia = (x.HER_Importancia.HER_Nombre == ConstImportancia.ImportanciaT1) ? true : false,
                        TipoEnvio = ConstTipoEnvioRevision.TipoEnvioRevisionN1,
                        Estado = x.HER_Revision.HER_EstadoRemitente,
                        Adjuntos = (x.HER_AnexoId != null) ? true : false
                    })
                    .OrderByDescending(x => x.Fecha)
                    .AsQueryable();


                //-ListadoRevisionDestinatario
                listadoRevisionDestinatarioQuery = _context.HER_DocumentoBase
                    .Where(x => x.HER_EstadoId == ConstEstadoDocumento.EstadoDocumentoN2
                             && x.HER_Revision.HER_RevisionDestinatario.HER_UserName == username
                             && x.HER_Revision.HER_RevisionDestinatario.HER_Activo == true
                             && x.HER_Revision.HER_EstadoDestinatario != ConstEstadoRevision.EstadoDestinatarioN2
                             && (EF.Functions.Like(x.HER_Folio, "%" + busqueda + "%")
                                    || EF.Functions.Like(x.HER_Asunto, "%" + busqueda + "%")
                                    || EF.Functions.Like(x.HER_Revision.HER_RevisionRemitente.HER_NombreCompleto, "%" + busqueda + "%"))
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRevisionViewModel
                    {
                        RevisionId = x.HER_Revision.HER_EnvioRevisionId,
                        Folio = x.HER_Folio,
                        Remitente = x.HER_Revision.HER_RevisionRemitente.HER_NombreCompleto,
                        Destinatario = x.HER_Revision.HER_RevisionDestinatario.HER_NombreCompleto,
                        Asunto = x.HER_Asunto,
                        NoInterno = x.HER_NoInterno,
                        Fecha = x.HER_FechaRegistro,
                        Tipo = x.HER_Tipo.HER_Nombre,
                        Importancia = (x.HER_Importancia.HER_Nombre == ConstImportancia.ImportanciaT1) ? true : false,
                        TipoEnvio = ConstTipoEnvioRevision.TipoEnvioRevisionN2,
                        Estado = x.HER_Revision.HER_EstadoDestinatario,
                        Adjuntos = (x.HER_AnexoId != null) ? true : false,
                    })
                    .OrderByDescending(x => x.Fecha)
                    .AsQueryable();
            }
            else if (!string.IsNullOrEmpty(busqueda) && categoria == null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);
                busqueda = busqueda.Replace('+', ' ');

                //-ListadoRevisionRemitente
                listadoRevisionRemitenteQuery = _context.HER_DocumentoBase
                    .Where(x => x.HER_EstadoId == ConstEstadoDocumento.EstadoDocumentoN2
                             && x.HER_Revision.HER_RevisionRemitente.HER_UserName == username
                             && x.HER_Revision.HER_RevisionRemitente.HER_Activo == true
                             && (x.HER_Revision.HER_Fecha >= fechaInicioTemp && x.HER_Revision.HER_Fecha <= fechaFinTemp)
                             && (EF.Functions.Like(x.HER_Folio, "%" + busqueda + "%")
                                 || EF.Functions.Like(x.HER_Asunto, "%" + busqueda + "%")
                                 || EF.Functions.Like(x.HER_Revision.HER_RevisionDestinatario.HER_NombreCompleto, "%" + busqueda + "%"))
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRevisionViewModel
                    {
                        RevisionId = x.HER_Revision.HER_EnvioRevisionId,
                        Folio = x.HER_Folio,
                        Remitente = x.HER_Revision.HER_RevisionRemitente.HER_NombreCompleto,
                        Destinatario = x.HER_Revision.HER_RevisionDestinatario.HER_NombreCompleto,
                        Asunto = x.HER_Asunto,
                        NoInterno = x.HER_NoInterno,
                        Fecha = x.HER_FechaRegistro,
                        Tipo = x.HER_Tipo.HER_Nombre,
                        Importancia = (x.HER_Importancia.HER_Nombre == ConstImportancia.ImportanciaT1) ? true : false,
                        TipoEnvio = ConstTipoEnvioRevision.TipoEnvioRevisionN1,
                        Estado = x.HER_Revision.HER_EstadoRemitente,
                        Adjuntos = (x.HER_AnexoId != null) ? true : false
                    })
                    .OrderByDescending(x => x.Fecha)
                    .AsQueryable();


                //-ListadoRevisionDestinatario
                listadoRevisionDestinatarioQuery = _context.HER_DocumentoBase
                    .Where(x => x.HER_EstadoId == ConstEstadoDocumento.EstadoDocumentoN2
                             && x.HER_Revision.HER_RevisionDestinatario.HER_UserName == username
                             && x.HER_Revision.HER_RevisionDestinatario.HER_Activo == true
                             && x.HER_Revision.HER_EstadoDestinatario != ConstEstadoRevision.EstadoDestinatarioN2
                             && (x.HER_Revision.HER_Fecha >= fechaInicioTemp && x.HER_Revision.HER_Fecha <= fechaFinTemp)
                             && (EF.Functions.Like(x.HER_Folio, "%" + busqueda + "%")
                                 || EF.Functions.Like(x.HER_Asunto, "%" + busqueda + "%")
                                 || EF.Functions.Like(x.HER_Revision.HER_RevisionRemitente.HER_NombreCompleto, "%" + busqueda + "%"))
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRevisionViewModel
                    {
                        RevisionId = x.HER_Revision.HER_EnvioRevisionId,
                        Folio = x.HER_Folio,
                        Remitente = x.HER_Revision.HER_RevisionRemitente.HER_NombreCompleto,
                        Destinatario = x.HER_Revision.HER_RevisionDestinatario.HER_NombreCompleto,
                        Asunto = x.HER_Asunto,
                        NoInterno = x.HER_NoInterno,
                        Fecha = x.HER_FechaRegistro,
                        Tipo = x.HER_Tipo.HER_Nombre,
                        Importancia = (x.HER_Importancia.HER_Nombre == ConstImportancia.ImportanciaT1) ? true : false,
                        TipoEnvio = ConstTipoEnvioRevision.TipoEnvioRevisionN2,
                        Estado = x.HER_Revision.HER_EstadoDestinatario,
                        Adjuntos = (x.HER_AnexoId != null) ? true : false,
                    })
                    .OrderByDescending(x => x.Fecha)
                    .AsQueryable();
            }
            else if (string.IsNullOrEmpty(busqueda) && categoria != null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                //-ListadoRevisionRemitente
                listadoRevisionRemitenteQuery = _context.HER_DocumentoBase
                    .Where(x => x.HER_EstadoId == ConstEstadoDocumento.EstadoDocumentoN2
                             && x.HER_Revision.HER_RevisionRemitente.HER_UserName == username
                             && x.HER_Revision.HER_RevisionRemitente.HER_Activo == true
                             && (x.HER_Revision.HER_Fecha >= fechaInicioTemp && x.HER_Revision.HER_Fecha <= fechaFinTemp)
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRevisionViewModel
                    {
                        RevisionId = x.HER_Revision.HER_EnvioRevisionId,
                        Folio = x.HER_Folio,
                        Remitente = x.HER_Revision.HER_RevisionRemitente.HER_NombreCompleto,
                        Destinatario = x.HER_Revision.HER_RevisionDestinatario.HER_NombreCompleto,
                        Asunto = x.HER_Asunto,
                        NoInterno = x.HER_NoInterno,
                        Fecha = x.HER_FechaRegistro,
                        Tipo = x.HER_Tipo.HER_Nombre,
                        Importancia = (x.HER_Importancia.HER_Nombre == ConstImportancia.ImportanciaT1) ? true : false,
                        TipoEnvio = ConstTipoEnvioRevision.TipoEnvioRevisionN1,
                        Estado = x.HER_Revision.HER_EstadoRemitente,
                        Adjuntos = (x.HER_AnexoId != null) ? true : false
                    })
                    .OrderByDescending(x => x.Fecha)
                    .AsQueryable();


                //-ListadoRevisionDestinatario
                listadoRevisionDestinatarioQuery = _context.HER_DocumentoBase
                    .Where(x => x.HER_EstadoId == ConstEstadoDocumento.EstadoDocumentoN2
                             && x.HER_Revision.HER_RevisionDestinatario.HER_UserName == username
                             && x.HER_Revision.HER_RevisionDestinatario.HER_Activo == true
                             && x.HER_Revision.HER_EstadoDestinatario != ConstEstadoRevision.EstadoDestinatarioN2
                             && (x.HER_Revision.HER_Fecha >= fechaInicioTemp && x.HER_Revision.HER_Fecha <= fechaFinTemp)
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRevisionViewModel
                    {
                        RevisionId = x.HER_Revision.HER_EnvioRevisionId,
                        Folio = x.HER_Folio,
                        Remitente = x.HER_Revision.HER_RevisionRemitente.HER_NombreCompleto,
                        Destinatario = x.HER_Revision.HER_RevisionDestinatario.HER_NombreCompleto,
                        Asunto = x.HER_Asunto,
                        NoInterno = x.HER_NoInterno,
                        Fecha = x.HER_FechaRegistro,
                        Tipo = x.HER_Tipo.HER_Nombre,
                        Importancia = (x.HER_Importancia.HER_Nombre == ConstImportancia.ImportanciaT1) ? true : false,
                        TipoEnvio = ConstTipoEnvioRevision.TipoEnvioRevisionN2,
                        Estado = x.HER_Revision.HER_EstadoDestinatario,
                        Adjuntos = (x.HER_AnexoId != null) ? true : false,
                    })
                    .OrderByDescending(x => x.Fecha)
                    .AsQueryable();
            }
            else if (!string.IsNullOrEmpty(busqueda) && categoria != null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);
                busqueda = busqueda.Replace('+', ' ');

                //-ListadoRevisionRemitente
                listadoRevisionRemitenteQuery = _context.HER_DocumentoBase
                    .Where(x => x.HER_EstadoId == ConstEstadoDocumento.EstadoDocumentoN2
                             && x.HER_Revision.HER_RevisionRemitente.HER_UserName == username
                             && x.HER_Revision.HER_RevisionRemitente.HER_Activo == true
                             && (x.HER_Revision.HER_Fecha >= fechaInicioTemp && x.HER_Revision.HER_Fecha <= fechaFinTemp)
                             && (EF.Functions.Like(x.HER_Folio, "%" + busqueda + "%")
                                 || EF.Functions.Like(x.HER_Asunto, "%" + busqueda + "%")
                                 || EF.Functions.Like(x.HER_Revision.HER_RevisionDestinatario.HER_NombreCompleto, "%" + busqueda + "%"))
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRevisionViewModel
                    {
                        RevisionId = x.HER_Revision.HER_EnvioRevisionId,
                        Folio = x.HER_Folio,
                        Remitente = x.HER_Revision.HER_RevisionRemitente.HER_NombreCompleto,
                        Destinatario = x.HER_Revision.HER_RevisionDestinatario.HER_NombreCompleto,
                        Asunto = x.HER_Asunto,
                        NoInterno = x.HER_NoInterno,
                        Fecha = x.HER_FechaRegistro,
                        Tipo = x.HER_Tipo.HER_Nombre,
                        Importancia = (x.HER_Importancia.HER_Nombre == ConstImportancia.ImportanciaT1) ? true : false,
                        TipoEnvio = ConstTipoEnvioRevision.TipoEnvioRevisionN1,
                        Estado = x.HER_Revision.HER_EstadoRemitente,
                        Adjuntos = (x.HER_AnexoId != null) ? true : false
                    })
                    .OrderByDescending(x => x.Fecha)
                    .AsQueryable();


                //-ListadoRevisionDestinatario
                listadoRevisionDestinatarioQuery = _context.HER_DocumentoBase
                    .Where(x => x.HER_EstadoId == ConstEstadoDocumento.EstadoDocumentoN2
                             && x.HER_Revision.HER_RevisionDestinatario.HER_UserName == username
                             && x.HER_Revision.HER_RevisionDestinatario.HER_Activo == true
                             && x.HER_Revision.HER_EstadoDestinatario != ConstEstadoRevision.EstadoDestinatarioN2
                             && (x.HER_Revision.HER_Fecha >= fechaInicioTemp && x.HER_Revision.HER_Fecha <= fechaFinTemp)
                             && (EF.Functions.Like(x.HER_Folio, "%" + busqueda + "%")
                                    || EF.Functions.Like(x.HER_Asunto, "%" + busqueda + "%")
                                    || EF.Functions.Like(x.HER_Revision.HER_RevisionRemitente.HER_NombreCompleto, "%" + busqueda + "%"))
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRevisionViewModel
                    {
                        RevisionId = x.HER_Revision.HER_EnvioRevisionId,
                        Folio = x.HER_Folio,
                        Remitente = x.HER_Revision.HER_RevisionRemitente.HER_NombreCompleto,
                        Destinatario = x.HER_Revision.HER_RevisionDestinatario.HER_NombreCompleto,
                        Asunto = x.HER_Asunto,
                        NoInterno = x.HER_NoInterno,
                        Fecha = x.HER_FechaRegistro,
                        Tipo = x.HER_Tipo.HER_Nombre,
                        Importancia = (x.HER_Importancia.HER_Nombre == ConstImportancia.ImportanciaT1) ? true : false,
                        TipoEnvio = ConstTipoEnvioRevision.TipoEnvioRevisionN2,
                        Estado = x.HER_Revision.HER_EstadoDestinatario,
                        Adjuntos = (x.HER_AnexoId != null) ? true : false,
                    })
                    .OrderByDescending(x => x.Fecha)
                    .AsQueryable();
            }
            else
            {
                //-ListadoRevisionRemitente
                listadoRevisionRemitenteQuery = _context.HER_DocumentoBase
                    .Where(x => x.HER_EstadoId == ConstEstadoDocumento.EstadoDocumentoN2
                             && x.HER_Revision.HER_RevisionRemitente.HER_UserName == username
                             && x.HER_Revision.HER_RevisionRemitente.HER_Activo == true
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRevisionViewModel
                    {
                        RevisionId = x.HER_Revision.HER_EnvioRevisionId,
                        Folio = x.HER_Folio,
                        Remitente = x.HER_Revision.HER_RevisionRemitente.HER_NombreCompleto,
                        Destinatario = x.HER_Revision.HER_RevisionDestinatario.HER_NombreCompleto,
                        Asunto = x.HER_Asunto,
                        NoInterno = x.HER_NoInterno,
                        Fecha = x.HER_FechaRegistro,
                        Tipo = x.HER_Tipo.HER_Nombre,
                        Importancia = (x.HER_Importancia.HER_Nombre == ConstImportancia.ImportanciaT1) ? true : false,
                        TipoEnvio = ConstTipoEnvioRevision.TipoEnvioRevisionN1,
                        Estado = x.HER_Revision.HER_EstadoRemitente,
                        Adjuntos = (x.HER_AnexoId != null) ? true : false
                    })
                    .OrderByDescending(x => x.Fecha)
                    .AsQueryable();


                //-ListadoRevisionDestinatario
                listadoRevisionDestinatarioQuery = _context.HER_DocumentoBase
                    .Where(x => x.HER_EstadoId == ConstEstadoDocumento.EstadoDocumentoN2
                             && x.HER_Revision.HER_RevisionDestinatario.HER_UserName == username
                             && x.HER_Revision.HER_RevisionDestinatario.HER_Activo == true
                             && x.HER_Revision.HER_EstadoDestinatario != ConstEstadoRevision.EstadoDestinatarioN2
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRevisionViewModel
                    {
                        RevisionId = x.HER_Revision.HER_EnvioRevisionId,
                        Folio = x.HER_Folio,
                        Remitente = x.HER_Revision.HER_RevisionRemitente.HER_NombreCompleto,
                        Destinatario = x.HER_Revision.HER_RevisionDestinatario.HER_NombreCompleto,
                        Asunto = x.HER_Asunto,
                        NoInterno = x.HER_NoInterno,
                        Fecha = x.HER_FechaRegistro,
                        Tipo = x.HER_Tipo.HER_Nombre,
                        Importancia = (x.HER_Importancia.HER_Nombre == ConstImportancia.ImportanciaT1) ? true : false,
                        TipoEnvio = ConstTipoEnvioRevision.TipoEnvioRevisionN2,
                        Estado = x.HER_Revision.HER_EstadoDestinatario,
                        Adjuntos = (x.HER_AnexoId != null) ? true : false,
                    })
                    .OrderByDescending(x => x.Fecha)
                    .AsQueryable();
            }

            unionQuery = listadoRevisionRemitenteQuery.Union(listadoRevisionDestinatarioQuery)
                .OrderByDescending(x => x.Fecha);

            return unionQuery;
        }
        public async Task<DocumentoEnRevisionViewModel> ObtenerEnvioRevisionDocumentoAsync(int revisionId, string usuarioActual)
        {
            var envioRevisionQuery = _context.HER_EnvioRevision
                    .Where(x => x.HER_EnvioRevisionId == revisionId)
                    .AsNoTracking()
                    .Select(x => new DocumentoEnRevisionViewModel
                    {
                        DocumentoBaseId = x.HER_DocumentoBase.HER_DocumentoBaseId,
                        RemitenteUsuario = x.HER_RevisionRemitente.HER_UserName,
                        Remitente = x.HER_RevisionRemitente.HER_NombreCompleto,
                        Destinatario = x.HER_RevisionDestinatario.HER_NombreCompleto,
                        Categorias = string.Empty,
                        Asunto = x.HER_DocumentoBase.HER_Asunto,
                        Cuerpo = x.HER_DocumentoBase.HER_Cuerpo,
                        NoInterno = x.HER_DocumentoBase.HER_NoInterno,
                        Folio = x.HER_DocumentoBase.HER_Folio,
                        ImportanciaId = x.HER_DocumentoBase.HER_ImportanciaId,
                        Importancia = x.HER_DocumentoBase.HER_Importancia.HER_Nombre,
                        TipoId = x.HER_DocumentoBase.HER_TipoId,
                        Tipo = x.HER_DocumentoBase.HER_Tipo.HER_Nombre,
                        VisibilidadId = x.HER_DocumentoBase.HER_VisibilidadId,
                        Visibilidad = x.HER_DocumentoBase.HER_Visibilidad.HER_Nombre,
                        RequiereRespuesta = x.HER_DocumentoBase.HER_RequiereRespuesta,
                        RequiereRespuestaTexto = (x.HER_DocumentoBase.HER_RequiereRespuesta) ? "Si" : "No",
                        Fecha = x.HER_Fecha.ToString("D", _cultureEs),
                        //Banderas
                        TipoVisualizacion = (x.HER_RevisionRemitente.HER_UserName == usuarioActual) ? ConstVisualizacionRevision.VisualizacionRemitente : ConstVisualizacionRevision.VisualizacionDestinatario,
                        //Revision estado
                        EstadoRemitente = x.HER_EstadoRemitente,
                        EstadoDestinatario = x.HER_EstadoDestinatario
                    })
                    .AsQueryable();

            return await envioRevisionQuery.FirstOrDefaultAsync();
        }
        public async Task<bool> ValidaRevisionAsync(int revisionId, string usuarioActual)
        {
            //Si es vedadero significa que puede verlo, y falso en caso contrario
            var estado = false;

            var revisionQuery = _context.HER_EnvioRevision
                .Where(x => x.HER_EnvioRevisionId == revisionId)
                .AsNoTracking()
                .Select(x => new
                {
                    x.HER_RevisionRemitente.HER_UserName,
                    x.HER_EstadoDestinatario
                })
                .AsQueryable();

            var revision = await revisionQuery.FirstOrDefaultAsync();

            if (revision != null)
            {
                //Existe documento enviado a revision
                if (revision.HER_UserName == usuarioActual)
                {
                    estado = true;
                }
                else
                {
                    if (revision.HER_EstadoDestinatario == ConstEstadoRevision.EstadoDestinatarioN1)
                    {
                        estado = true;
                    }
                }
            }

            return estado;
        }
        public async Task<bool> CrearEnvioRevisionAsync(EnviarRevisionViewModel revision)
        {
            var envioRevision = new HER_EnvioRevision()
            {
                HER_DocumentoBaseId = revision.DocumentoBaseId,
                HER_RevisionRemitenteId = revision.RemitenteId,
                HER_RevisionDestinatarioId = revision.DestinatarioId,
                HER_EstadoRemitente = revision.Estado_Remitente,
                HER_EstadoDestinatario = revision.Estado_Destinatario,
                HER_Fecha = revision.Fecha
            };

            _context.HER_EnvioRevision.Add(envioRevision);
            var result = await _context.SaveChangesAsync();

            return (result > 0) ? true : false;
        }
        public async Task<int> ActualizarRevisionRemitenteAsync(ActualizarRevisionRemitenteViewModel documento)
        {
            int documentoBaseId = 0;
            var documentoActualQuery = _context.HER_DocumentoBase
                .Where(x => x.HER_Folio.Equals(documento.Folio)
                            && x.HER_DocumentoBaseId == documento.DocumentoBaseId)
                .AsQueryable();

            bool existe = await documentoActualQuery.AnyAsync();

            //Guardar
            if (existe)
            {
                //ACTUALIZA REVISION
                //Documento
                var documentoActual = await documentoActualQuery.FirstOrDefaultAsync();

                documentoActual.HER_RequiereRespuesta = documento.RequiereRespuesta;
                documentoActual.HER_ImportanciaId = documento.ImportanciaId;
                documentoActual.HER_TipoId = documento.TipoId;
                documentoActual.HER_VisibilidadId = documento.VisibilidadId;
                documentoActual.HER_NoInterno = documento.NoInterno;
                documentoActual.HER_Cuerpo = documento.Cuerpo;

                _context.HER_DocumentoBase.Update(documentoActual).State = EntityState.Modified;
                var result = await _context.SaveChangesAsync();

                //Documento Id
                documentoBaseId = (result > 0) ? documentoActual.HER_DocumentoBaseId : 0;
            }

            return documentoBaseId;
        }
        public async Task<int> ActualizarRevisionDestinatarioAsync(ActualizarRevisionDestinatarioViewModel documento)
        {
            int documentoBaseId = 0;
            var datosDocumentoActualQuery = _context.HER_DocumentoBase
                .Where(x => x.HER_Folio.Equals(documento.Folio)
                         && x.HER_DocumentoBaseId == documento.DocumentoBaseId)
                .AsQueryable();

            bool existe = await datosDocumentoActualQuery.AnyAsync();
            //Guardar
            if (existe)
            {
                //Guardar
                var datosDocumentoActual = await datosDocumentoActualQuery.FirstOrDefaultAsync();

                datosDocumentoActual.HER_NoInterno = documento.NoInterno;
                datosDocumentoActual.HER_Cuerpo = documento.Cuerpo;

                _context.HER_DocumentoBase.Update(datosDocumentoActual).State = EntityState.Modified;
                var result = await _context.SaveChangesAsync();

                //Documento Id
                documentoBaseId = (result > 0) ? datosDocumentoActual.HER_DocumentoBaseId : 0;
            }

            return documentoBaseId;
        }
        public async Task<int> ActualizarEstadoRevisionAsync(ActualizarEstadoRevisionViewModel revision)
        {
            int documentoBaseId = 0;
            var envioRevisionQuery = _context.HER_EnvioRevision
                .Where(x => x.HER_DocumentoBase.HER_Folio == revision.Folio
                         && x.HER_DocumentoBase.HER_DocumentoBaseId == revision.DocumentoBaseId)
                .AsQueryable();

            var envioRevision = await envioRevisionQuery.FirstOrDefaultAsync();
            if (envioRevision != null)
            {
                envioRevision.HER_EstadoRemitente = revision.Estado_Remitente;
                envioRevision.HER_EstadoDestinatario = revision.Estado_Destinatario;
                envioRevision.HER_Fecha = revision.Fecha;

                _context.HER_EnvioRevision.Update(envioRevision).State = EntityState.Modified;
                var result = await _context.SaveChangesAsync();

                documentoBaseId = (result > 0) ? envioRevision.HER_DocumentoBaseId : 0;
            }

            return documentoBaseId;
        }
        public async Task<bool> EliminarEnvioRevisionAsync(string folio)
        {
            var band = false;
            var revisionQuery = _context.HER_EnvioRevision
                .Where(x => x.HER_DocumentoBase.HER_Folio == folio)
                .AsQueryable();

            var revision = await revisionQuery.FirstOrDefaultAsync();

            if (revision != null)
            {
                _context.HER_EnvioRevision.Remove(revision);
                var result = await _context.SaveChangesAsync();

                band = (result > 0) ? true : false;
            }

            return band;
        }

        //[**ENVIO**]
        public async Task<int> CrearEnvioAsync(EnvioViewModel envioViewModel)
        {
            var envioId = 0;
            //Envio 
            var envio = new HER_Envio()
            {
                //--
                HER_DeDireccion = envioViewModel.UsuarioDeDireccion,
                HER_DeTelefono = envioViewModel.UsuarioDeTelefono,
                //--
                HER_UsuarioOrigenId = null,
                HER_Orden = 1,
                HER_TotalPara = envioViewModel.TotalPara,
                HER_TotalCCP = envioViewModel.TotalCCP,
                //--
                HER_TotalParaRespuestas = 0,
                HER_TotalCCPRespuestas = 0,
                //--
                HER_Indicaciones = null,
                HER_RequiereRespuesta = envioViewModel.RequiereRespuesta,
                HER_FechaEnvio = DateTime.Now,
                HER_FechaPropuesta = (envioViewModel.RequiereRespuesta) ? DateTime.Parse(envioViewModel.FechaPropuesta, _cultureEs) : DateTime.Now,
                //--
                HER_EsReenvio = false,
                HER_GrupoEnvio = 1,  //Referencia para los reenvios
                //--
                HER_DocumentoId = envioViewModel.DocumentoId,
                HER_DeId = envioViewModel.UsuarioDeId,
                HER_UsuarioEnviaId = envioViewModel.UsuarioEnviaId,
                HER_TipoEnvioId = ConstTipoEnvio.TipoEnvioN1,
                HER_EnvioPadreId = null,
                HER_EstadoEnvioId = (envioViewModel.RequiereRespuesta) ? ConstEstadoEnvio.EstadoEnvioN5 : ConstEstadoEnvio.EstadoEnvioN7,
                HER_VisibilidadId = envioViewModel.VisibilidadId,
                HER_ImportanciaId = envioViewModel.ImportanciaId,
                HER_AnexoId = envioViewModel.AnexoId,
                HER_CarpetaId = null,
                //--
                HER_TramiteId = (int?)ConstTramite.TipoN1
            };
            _context.HER_Envio.Add(envio);
            var result = await _context.SaveChangesAsync();

            envioId = (result > 0) ? envio.HER_EnvioId : 0;

            return envioId;
        }
        public async Task<bool> CrearRecepcionAsync(List<RecepcionViewModel> listadoRecepcionViewModel, string fechaPropuesta)
        {
            var listadoRecepcion = new List<HER_Recepcion>();
            var listadoCategorias = new List<HER_RecepcionCategoria>();
            var listadoCompromisos = new List<HER_Compromiso>();
            var fechaRecepcion = DateTime.Now;

            foreach (var recepcion in listadoRecepcionViewModel)
            {
                listadoRecepcion.Add(new HER_Recepcion()
                {
                    HER_EnvioId = recepcion.EnvioId,
                    HER_ParaId = recepcion.ParaId,
                    HER_TipoPara = recepcion.TipoPara,
                    HER_TieneRespuesta = false,
                    HER_EstaLeido = false,
                    HER_FechaRecepcion = fechaRecepcion,
                    HER_CarpetaId = null,
                    HER_EstadoEnvioId = (recepcion.RequiereRespuesta) ? (recepcion.TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? ConstEstadoEnvio.EstadoEnvioN1 : ConstEstadoEnvio.EstadoEnvioN7 : ConstEstadoEnvio.EstadoEnvioN7,
                });
            }
            _context.HER_Recepcion.AddRange(listadoRecepcion);

            //Agrega la categoria por defecto a todas las recepciones
            foreach (var recepcion in listadoRecepcion)
            {
                //Categoria
                listadoCategorias.Add(new HER_RecepcionCategoria()
                {
                    HER_CategoriaId = ConstCategoria.CategoriaN1,
                    HER_RecepcionId = recepcion.HER_RecepcionId
                });
            }

            _context.HER_RecepcionCategoria.AddRange(listadoCategorias);

            if (!string.IsNullOrEmpty(fechaPropuesta))
            {
                //-- -------------------------- --------------------
                //Agrega la fecha propuesta como primera fecha compromiso
                foreach (var recepcion in listadoRecepcion)
                {
                    if (recepcion.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1)
                    {
                        listadoCompromisos.Add(new HER_Compromiso()
                        {
                            HER_Estado = ConstCompromiso.EstadoN1,
                            HER_Tipo = ConstCompromiso.TipoN1,
                            HER_Fecha = DateTime.Parse(fechaPropuesta, _cultureEs),
                            HER_Registro = DateTime.Now,
                            HER_RecepcionId = recepcion.HER_RecepcionId,
                        });
                    }
                }

                if (listadoCompromisos.Count > 0)
                    _context.HER_Compromiso.AddRange(listadoCompromisos);
            }

            var result = await _context.SaveChangesAsync();

            return (result > 0) ? true : false;
        }

        //Bandeja Recibidos
        public async Task<bool> ActualizaEstadoDocumentoRecibidoAsync(string username)
        {
            //Actualizar el estado de los documentos
            var estado = false;
            var hoy = DateTime.Now;
            var fechaVencimiento = DateTime.Now.AddDays(1);

            var recibidosVencidosQuery = _context.HER_Recepcion
                .Where(a => a.HER_Para.HER_UserName == username
                    && a.HER_Para.HER_Activo == true
                    && a.HER_Compromiso.Where(x => x.HER_Estado == ConstCompromiso.EstadoN1).Select(x => x.HER_Fecha).First().AddDays(1) <= hoy
                    && a.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1)
                .AsQueryable();

            var recibidosVencidos = await recibidosVencidosQuery.ToListAsync();

            if (recibidosVencidos.Count > 0)
            {
                foreach (var vencido in recibidosVencidos)
                {
                    //Actualización del estado
                    vencido.HER_EstadoEnvioId = ConstEstadoEnvio.EstadoEnvioN4;
                    _context.HER_Recepcion.Update(vencido).State = EntityState.Modified;
                }

                var result = await _context.SaveChangesAsync();
                estado = (result > 0) ? true : false;
            }

            return estado;
        }
        public IQueryable<DocumentoRecibidoViewModel> ListadoDocumentosRecibidos(string username, string busqueda, int? categoria, string fechaini, string fechafin, int? estado, int? tipo, int? proximovencer, int? tramite)
        {
            var porcentaje = ConstProximosVencer.Porcentaje;
            IQueryable<DocumentoRecibidoViewModel> recibidosQuery;
            //--
            DateTime fechaInicioTemp;
            DateTime fechaFinTemp;

            if (tramite != null && proximovencer != null && tipo != null && estado != null && !string.IsNullOrEmpty(busqueda) && categoria != null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                                || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                                || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                                || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                                || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             && x.HER_EstadoEnvioId == (int)estado
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                              (
                                DateTime.Now >=
                                  ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                  -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje) + 1)
                                  ))
                                && DateTime.Now <=
                                  (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                              )
                             : false
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer != null && tipo != null && estado != null && !string.IsNullOrEmpty(busqueda) && categoria != null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && x.HER_EstadoEnvioId == (int)estado
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer != null && tipo != null && estado != null && !string.IsNullOrEmpty(busqueda) && categoria == null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             && x.HER_EstadoEnvioId == (int)estado
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer != null && tipo != null && estado != null && !string.IsNullOrEmpty(busqueda) && categoria == null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && x.HER_EstadoEnvioId == (int)estado
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer != null && tipo != null && estado != null && string.IsNullOrEmpty(busqueda) && categoria != null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             && x.HER_EstadoEnvioId == (int)estado
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer != null && tipo != null && estado != null && string.IsNullOrEmpty(busqueda) && categoria != null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && x.HER_EstadoEnvioId == (int)estado
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer != null && tipo != null && estado != null && string.IsNullOrEmpty(busqueda) && categoria == null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             && x.HER_EstadoEnvioId == (int)estado
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer != null && tipo != null && estado != null && string.IsNullOrEmpty(busqueda) && categoria == null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && x.HER_EstadoEnvioId == (int)estado
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer != null && tipo != null && estado == null && !string.IsNullOrEmpty(busqueda) && categoria != null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer != null && tipo != null && estado == null && !string.IsNullOrEmpty(busqueda) && categoria != null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer != null && tipo != null && estado == null && !string.IsNullOrEmpty(busqueda) && categoria == null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer != null && tipo != null && estado == null && !string.IsNullOrEmpty(busqueda) && categoria == null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer != null && tipo != null && estado == null && string.IsNullOrEmpty(busqueda) && categoria != null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                          )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer != null && tipo != null && estado == null && string.IsNullOrEmpty(busqueda) && categoria != null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                          )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer != null && tipo != null && estado == null && string.IsNullOrEmpty(busqueda) && categoria == null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                         )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer != null && tipo != null && estado == null && string.IsNullOrEmpty(busqueda) && categoria == null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                           )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer != null && tipo == null && estado != null && !string.IsNullOrEmpty(busqueda) && categoria != null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             && x.HER_EstadoEnvioId == (int)estado
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer != null && tipo == null && estado != null && !string.IsNullOrEmpty(busqueda) && categoria != null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && x.HER_EstadoEnvioId == (int)estado
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer != null && tipo == null && estado != null && !string.IsNullOrEmpty(busqueda) && categoria == null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             && x.HER_EstadoEnvioId == (int)estado
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer != null && tipo == null && estado != null && !string.IsNullOrEmpty(busqueda) && categoria == null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && x.HER_EstadoEnvioId == (int)estado
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer != null && tipo == null && estado != null && string.IsNullOrEmpty(busqueda) && categoria != null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             && x.HER_EstadoEnvioId == (int)estado
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                          )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer != null && tipo == null && estado != null && string.IsNullOrEmpty(busqueda) && categoria != null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && x.HER_EstadoEnvioId == (int)estado
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                          )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer != null && tipo == null && estado != null && string.IsNullOrEmpty(busqueda) && categoria == null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             && x.HER_EstadoEnvioId == (int)estado
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                          )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer != null && tipo == null && estado != null && string.IsNullOrEmpty(busqueda) && categoria == null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && x.HER_EstadoEnvioId == (int)estado
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                          )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer != null && tipo == null && estado == null && !string.IsNullOrEmpty(busqueda) && categoria != null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer != null && tipo == null && estado == null && !string.IsNullOrEmpty(busqueda) && categoria != null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer != null && tipo == null && estado == null && !string.IsNullOrEmpty(busqueda) && categoria == null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer != null && tipo == null && estado == null && !string.IsNullOrEmpty(busqueda) && categoria == null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer != null && tipo == null && estado == null && string.IsNullOrEmpty(busqueda) && categoria != null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                          )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer != null && tipo == null && estado == null && string.IsNullOrEmpty(busqueda) && categoria != null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                          )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer != null && tipo == null && estado == null && string.IsNullOrEmpty(busqueda) && categoria == null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                           )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer != null && tipo == null && estado == null && string.IsNullOrEmpty(busqueda) && categoria == null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Include(x => x.HER_Compromiso)
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                             (
                                 DateTime.Now >=
                                      ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                      -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                      ))
                                 && DateTime.Now <=
                                      (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                 && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                 && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                             )
                             : false
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                          ) //No esta clasificada en alguna carpeta
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer == null && tipo != null && estado != null && !string.IsNullOrEmpty(busqueda) && categoria != null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                                || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                                || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                                || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                                || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             && x.HER_EstadoEnvioId == (int)estado
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer == null && tipo != null && estado != null && !string.IsNullOrEmpty(busqueda) && categoria != null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && x.HER_EstadoEnvioId == (int)estado
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer == null && tipo != null && estado != null && !string.IsNullOrEmpty(busqueda) && categoria == null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             && x.HER_EstadoEnvioId == (int)estado
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer == null && tipo != null && estado != null && !string.IsNullOrEmpty(busqueda) && categoria == null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && x.HER_EstadoEnvioId == (int)estado
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer == null && tipo != null && estado != null && string.IsNullOrEmpty(busqueda) && categoria != null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             && x.HER_EstadoEnvioId == (int)estado
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer == null && tipo != null && estado != null && string.IsNullOrEmpty(busqueda) && categoria != null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && x.HER_EstadoEnvioId == (int)estado
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer == null && tipo != null && estado != null && string.IsNullOrEmpty(busqueda) && categoria == null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             && x.HER_EstadoEnvioId == (int)estado
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                   .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer == null && tipo != null && estado != null && string.IsNullOrEmpty(busqueda) && categoria == null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && x.HER_EstadoEnvioId == (int)estado
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer == null && tipo != null && estado == null && !string.IsNullOrEmpty(busqueda) && categoria != null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer == null && tipo != null && estado == null && !string.IsNullOrEmpty(busqueda) && categoria != null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer == null && tipo != null && estado == null && !string.IsNullOrEmpty(busqueda) && categoria == null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer == null && tipo != null && estado == null && !string.IsNullOrEmpty(busqueda) && categoria == null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer == null && tipo != null && estado == null && string.IsNullOrEmpty(busqueda) && categoria != null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer == null && tipo != null && estado == null && string.IsNullOrEmpty(busqueda) && categoria != null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                             )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer == null && tipo != null && estado == null && string.IsNullOrEmpty(busqueda) && categoria == null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                             )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer == null && tipo != null && estado == null && string.IsNullOrEmpty(busqueda) && categoria == null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                           )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer == null && tipo == null && estado != null && !string.IsNullOrEmpty(busqueda) && categoria != null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             && x.HER_EstadoEnvioId == (int)estado
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer == null && tipo == null && estado != null && !string.IsNullOrEmpty(busqueda) && categoria != null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && x.HER_EstadoEnvioId == (int)estado
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer == null && tipo == null && estado != null && !string.IsNullOrEmpty(busqueda) && categoria == null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             && x.HER_EstadoEnvioId == (int)estado
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer == null && tipo == null && estado != null && !string.IsNullOrEmpty(busqueda) && categoria == null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && x.HER_EstadoEnvioId == (int)estado
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer == null && tipo == null && estado != null && string.IsNullOrEmpty(busqueda) && categoria != null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             && x.HER_EstadoEnvioId == (int)estado
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                    )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer == null && tipo == null && estado != null && string.IsNullOrEmpty(busqueda) && categoria != null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && x.HER_EstadoEnvioId == (int)estado
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                    )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer == null && tipo == null && estado != null && string.IsNullOrEmpty(busqueda) && categoria == null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             && x.HER_EstadoEnvioId == (int)estado
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                    )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer == null && tipo == null && estado != null && string.IsNullOrEmpty(busqueda) && categoria == null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && x.HER_EstadoEnvioId == (int)estado
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer == null && tipo == null && estado == null && !string.IsNullOrEmpty(busqueda) && categoria != null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer == null && tipo == null && estado == null && !string.IsNullOrEmpty(busqueda) && categoria != null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer == null && tipo == null && estado == null && !string.IsNullOrEmpty(busqueda) && categoria == null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer == null && tipo == null && estado == null && !string.IsNullOrEmpty(busqueda) && categoria == null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer == null && tipo == null && estado == null && string.IsNullOrEmpty(busqueda) && categoria != null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer == null && tipo == null && estado == null && string.IsNullOrEmpty(busqueda) && categoria != null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                    )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer == null && tipo == null && estado == null && string.IsNullOrEmpty(busqueda) && categoria == null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer == null && tipo == null && estado == null && string.IsNullOrEmpty(busqueda) && categoria == null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }

            else if (tramite == null && proximovencer != null && tipo != null && estado != null && !string.IsNullOrEmpty(busqueda) && categoria != null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                                || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                                || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                                || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                                || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             && x.HER_EstadoEnvioId == (int)estado
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                              (
                                DateTime.Now >=
                                  ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                  -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                  ))
                                && DateTime.Now <=
                                  (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                              )
                             : false
                     //---
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer != null && tipo != null && estado != null && !string.IsNullOrEmpty(busqueda) && categoria != null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && x.HER_EstadoEnvioId == (int)estado
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                     //---
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer != null && tipo != null && estado != null && !string.IsNullOrEmpty(busqueda) && categoria == null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             && x.HER_EstadoEnvioId == (int)estado
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                     //---
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer != null && tipo != null && estado != null && !string.IsNullOrEmpty(busqueda) && categoria == null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && x.HER_EstadoEnvioId == (int)estado
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                     //---
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer != null && tipo != null && estado != null && string.IsNullOrEmpty(busqueda) && categoria != null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             && x.HER_EstadoEnvioId == (int)estado
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                     //---
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer != null && tipo != null && estado != null && string.IsNullOrEmpty(busqueda) && categoria != null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && x.HER_EstadoEnvioId == (int)estado
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                     //---
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer != null && tipo != null && estado != null && string.IsNullOrEmpty(busqueda) && categoria == null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             && x.HER_EstadoEnvioId == (int)estado
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                     //---
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer != null && tipo != null && estado != null && string.IsNullOrEmpty(busqueda) && categoria == null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && x.HER_EstadoEnvioId == (int)estado
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                     //---
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer != null && tipo != null && estado == null && !string.IsNullOrEmpty(busqueda) && categoria != null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                     //---
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer != null && tipo != null && estado == null && !string.IsNullOrEmpty(busqueda) && categoria != null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                     //---
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer != null && tipo != null && estado == null && !string.IsNullOrEmpty(busqueda) && categoria == null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                     //---
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer != null && tipo != null && estado == null && !string.IsNullOrEmpty(busqueda) && categoria == null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                     //---
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer != null && tipo != null && estado == null && string.IsNullOrEmpty(busqueda) && categoria != null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                          //---
                          )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer != null && tipo != null && estado == null && string.IsNullOrEmpty(busqueda) && categoria != null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                          //---
                          )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer != null && tipo != null && estado == null && string.IsNullOrEmpty(busqueda) && categoria == null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                         //---
                         )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer != null && tipo != null && estado == null && string.IsNullOrEmpty(busqueda) && categoria == null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                           //---
                           )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer != null && tipo == null && estado != null && !string.IsNullOrEmpty(busqueda) && categoria != null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             && x.HER_EstadoEnvioId == (int)estado
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                     //---
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer != null && tipo == null && estado != null && !string.IsNullOrEmpty(busqueda) && categoria != null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && x.HER_EstadoEnvioId == (int)estado
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                     //---
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer != null && tipo == null && estado != null && !string.IsNullOrEmpty(busqueda) && categoria == null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             && x.HER_EstadoEnvioId == (int)estado
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                     //---
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer != null && tipo == null && estado != null && !string.IsNullOrEmpty(busqueda) && categoria == null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && x.HER_EstadoEnvioId == (int)estado
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                     //---
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer != null && tipo == null && estado != null && string.IsNullOrEmpty(busqueda) && categoria != null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             && x.HER_EstadoEnvioId == (int)estado
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                          //---
                          )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer != null && tipo == null && estado != null && string.IsNullOrEmpty(busqueda) && categoria != null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && x.HER_EstadoEnvioId == (int)estado
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                          //---
                          )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer != null && tipo == null && estado != null && string.IsNullOrEmpty(busqueda) && categoria == null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             && x.HER_EstadoEnvioId == (int)estado
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                          //---
                          )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer != null && tipo == null && estado != null && string.IsNullOrEmpty(busqueda) && categoria == null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && x.HER_EstadoEnvioId == (int)estado
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                          //---
                          )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer != null && tipo == null && estado == null && !string.IsNullOrEmpty(busqueda) && categoria != null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                     //---
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer != null && tipo == null && estado == null && !string.IsNullOrEmpty(busqueda) && categoria != null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                     //---
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer != null && tipo == null && estado == null && !string.IsNullOrEmpty(busqueda) && categoria == null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                     //---
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer != null && tipo == null && estado == null && !string.IsNullOrEmpty(busqueda) && categoria == null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                     //---
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer != null && tipo == null && estado == null && string.IsNullOrEmpty(busqueda) && categoria != null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                          //---
                          )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer != null && tipo == null && estado == null && string.IsNullOrEmpty(busqueda) && categoria != null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                          //---
                          )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer != null && tipo == null && estado == null && string.IsNullOrEmpty(busqueda) && categoria == null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                           //---
                           )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer != null && tipo == null && estado == null && string.IsNullOrEmpty(busqueda) && categoria == null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Include(x => x.HER_Compromiso)
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                             (
                                 DateTime.Now >=
                                      ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                      -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                      ))
                                 && DateTime.Now <=
                                      (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                 && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                 && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                             )
                             : false
                          //---
                          ) //No esta clasificada en alguna carpeta
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer == null && tipo != null && estado != null && !string.IsNullOrEmpty(busqueda) && categoria != null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                                || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                                || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                                || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                                || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             && x.HER_EstadoEnvioId == (int)estado
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer == null && tipo != null && estado != null && !string.IsNullOrEmpty(busqueda) && categoria != null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && x.HER_EstadoEnvioId == (int)estado
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer == null && tipo != null && estado != null && !string.IsNullOrEmpty(busqueda) && categoria == null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             && x.HER_EstadoEnvioId == (int)estado
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer == null && tipo != null && estado != null && !string.IsNullOrEmpty(busqueda) && categoria == null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && x.HER_EstadoEnvioId == (int)estado
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer == null && tipo != null && estado != null && string.IsNullOrEmpty(busqueda) && categoria != null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             && x.HER_EstadoEnvioId == (int)estado
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer == null && tipo != null && estado != null && string.IsNullOrEmpty(busqueda) && categoria != null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && x.HER_EstadoEnvioId == (int)estado
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer == null && tipo != null && estado != null && string.IsNullOrEmpty(busqueda) && categoria == null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             && x.HER_EstadoEnvioId == (int)estado
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                   .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer == null && tipo != null && estado != null && string.IsNullOrEmpty(busqueda) && categoria == null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && x.HER_EstadoEnvioId == (int)estado
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer == null && tipo != null && estado == null && !string.IsNullOrEmpty(busqueda) && categoria != null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer == null && tipo != null && estado == null && !string.IsNullOrEmpty(busqueda) && categoria != null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer == null && tipo != null && estado == null && !string.IsNullOrEmpty(busqueda) && categoria == null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer == null && tipo != null && estado == null && !string.IsNullOrEmpty(busqueda) && categoria == null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer == null && tipo != null && estado == null && string.IsNullOrEmpty(busqueda) && categoria != null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer == null && tipo != null && estado == null && string.IsNullOrEmpty(busqueda) && categoria != null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer == null && tipo != null && estado == null && string.IsNullOrEmpty(busqueda) && categoria == null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer == null && tipo != null && estado == null && string.IsNullOrEmpty(busqueda) && categoria == null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                           )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer == null && tipo == null && estado != null && !string.IsNullOrEmpty(busqueda) && categoria != null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             && x.HER_EstadoEnvioId == (int)estado
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer == null && tipo == null && estado != null && !string.IsNullOrEmpty(busqueda) && categoria != null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && x.HER_EstadoEnvioId == (int)estado
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer == null && tipo == null && estado != null && !string.IsNullOrEmpty(busqueda) && categoria == null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             && x.HER_EstadoEnvioId == (int)estado
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer == null && tipo == null && estado != null && !string.IsNullOrEmpty(busqueda) && categoria == null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && x.HER_EstadoEnvioId == (int)estado
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer == null && tipo == null && estado != null && string.IsNullOrEmpty(busqueda) && categoria != null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             && x.HER_EstadoEnvioId == (int)estado)
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer == null && tipo == null && estado != null && string.IsNullOrEmpty(busqueda) && categoria != null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && x.HER_EstadoEnvioId == (int)estado)
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer == null && tipo == null && estado != null && string.IsNullOrEmpty(busqueda) && categoria == null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             && x.HER_EstadoEnvioId == (int)estado)
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer == null && tipo == null && estado != null && string.IsNullOrEmpty(busqueda) && categoria == null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && x.HER_EstadoEnvioId == (int)estado)
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer == null && tipo == null && estado == null && !string.IsNullOrEmpty(busqueda) && categoria != null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer == null && tipo == null && estado == null && !string.IsNullOrEmpty(busqueda) && categoria != null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer == null && tipo == null && estado == null && !string.IsNullOrEmpty(busqueda) && categoria == null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer == null && tipo == null && estado == null && !string.IsNullOrEmpty(busqueda) && categoria == null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer == null && tipo == null && estado == null && string.IsNullOrEmpty(busqueda) && categoria != null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp))
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer == null && tipo == null && estado == null && string.IsNullOrEmpty(busqueda) && categoria != null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria))
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer == null && tipo == null && estado == null && string.IsNullOrEmpty(busqueda) && categoria == null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp))
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else
            {
                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Include(x => x.HER_Compromiso)
                    .Include(x => x.HER_Envio)
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_CarpetaId == null) //No esta clasificada en alguna carpeta
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        //--
                        Proximo = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                                (from envio in _context.HER_Envio
                                 where envio.HER_Documento.HER_Folio == x.HER_Envio.HER_Documento.HER_Folio &&
                                       envio.HER_Orden > x.HER_Envio.HER_Orden &&
                                       envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2 &&
                                       envio.HER_De.HER_UserName == username
                                 select new ComplementoDocumentoRecibidoViewModel
                                 {
                                     EnvioId = envio.HER_EnvioId,
                                     TipoEnvio = envio.HER_TipoEnvioId,
                                     FechaEnvio = envio.HER_FechaEnvio,
                                     Destinatarios = (from recepcion in envio.HER_Recepciones
                                                      select new ComplementoDestinararios
                                                      {
                                                          Destinatario = recepcion.HER_Para.HER_NombreCompleto,
                                                          Area = recepcion.HER_Para.HER_Area.HER_Nombre,
                                                          Region = recepcion.HER_Para.HER_Area.HER_Region.HER_Nombre,
                                                          FechaRecepcion = recepcion.HER_FechaRecepcion,
                                                          FechaCompromiso = (envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                                                                                        (from comp in recepcion.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                                                                                : DateTime.Now,
                                                          TipoPara = recepcion.HER_TipoPara
                                                      }).ToList()
                                 }).FirstOrDefault()
                                 : (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4) ?
                                  (from envio in _context.HER_Envio
                                   where envio.HER_Documento.HER_Folio == x.HER_Envio.HER_Documento.HER_Folio &&
                                         envio.HER_Orden > x.HER_Envio.HER_Orden &&
                                         envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 &&
                                         envio.HER_EsReenvio == true &&
                                         envio.HER_De.HER_UserName == username
                                   select new ComplementoDocumentoRecibidoViewModel
                                   {
                                       EnvioId = envio.HER_EnvioId,
                                       TipoEnvio = envio.HER_TipoEnvioId,
                                       FechaEnvio = envio.HER_FechaEnvio,
                                       Destinatarios = (from recepcion in envio.HER_Recepciones
                                                        select new ComplementoDestinararios
                                                        {
                                                            Destinatario = recepcion.HER_Para.HER_NombreCompleto,
                                                            Area = recepcion.HER_Para.HER_Area.HER_Nombre,
                                                            Region = recepcion.HER_Para.HER_Area.HER_Region.HER_Nombre,
                                                            FechaRecepcion = recepcion.HER_FechaRecepcion,
                                                            FechaCompromiso = (envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                                                                                          (from comp in recepcion.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                                                                                  : DateTime.Now,
                                                            TipoPara = recepcion.HER_TipoPara
                                                        }).ToList()
                                   }).FirstOrDefault()
                              : null
                    })
                    .OrderByDescending(x => x.FechaRecepcion)
                    .ThenBy(x => x.Leido)
                    .AsQueryable();
            }

            return recibidosQuery;
        }        //Recibidos que pueden estar en carpeta
        public IQueryable<DocumentoRecibidoViewModel> ListadoDocumentosRecibidosEnCarpetas(string username, string busqueda, int? categoria, string fechaini, string fechafin, int? estado, int? tipo, int? proximovencer, int? tramite)
        {
            var porcentaje = ConstProximosVencer.Porcentaje;
            IQueryable<DocumentoRecibidoViewModel> recibidosQuery;
            //--
            DateTime fechaInicioTemp;
            DateTime fechaFinTemp;

            if (tramite != null && proximovencer != null && tipo != null && estado != null && !string.IsNullOrEmpty(busqueda) && categoria != null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                                || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                                || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                                || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                                || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             && x.HER_EstadoEnvioId == (int)estado
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                              (
                                DateTime.Now >=
                                  ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                  -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje) + 1)
                                  ))
                                && DateTime.Now <=
                                  (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                              )
                             : false
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer != null && tipo != null && estado != null && !string.IsNullOrEmpty(busqueda) && categoria != null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                busqueda = busqueda.Replace('+', ' ');
                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && x.HER_EstadoEnvioId == (int)estado
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer != null && tipo != null && estado != null && !string.IsNullOrEmpty(busqueda) && categoria == null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             && x.HER_EstadoEnvioId == (int)estado
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer != null && tipo != null && estado != null && !string.IsNullOrEmpty(busqueda) && categoria == null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && x.HER_EstadoEnvioId == (int)estado
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer != null && tipo != null && estado != null && string.IsNullOrEmpty(busqueda) && categoria != null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             && x.HER_EstadoEnvioId == (int)estado
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer != null && tipo != null && estado != null && string.IsNullOrEmpty(busqueda) && categoria != null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && x.HER_EstadoEnvioId == (int)estado
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer != null && tipo != null && estado != null && string.IsNullOrEmpty(busqueda) && categoria == null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false

                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             && x.HER_EstadoEnvioId == (int)estado
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer != null && tipo != null && estado != null && string.IsNullOrEmpty(busqueda) && categoria == null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_EstadoEnvioId == (int)estado
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer != null && tipo != null && estado == null && !string.IsNullOrEmpty(busqueda) && categoria != null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer != null && tipo != null && estado == null && !string.IsNullOrEmpty(busqueda) && categoria != null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer != null && tipo != null && estado == null && !string.IsNullOrEmpty(busqueda) && categoria == null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer != null && tipo != null && estado == null && !string.IsNullOrEmpty(busqueda) && categoria == null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer != null && tipo != null && estado == null && string.IsNullOrEmpty(busqueda) && categoria != null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                          )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer != null && tipo != null && estado == null && string.IsNullOrEmpty(busqueda) && categoria != null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                          )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer != null && tipo != null && estado == null && string.IsNullOrEmpty(busqueda) && categoria == null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                         )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer != null && tipo != null && estado == null && string.IsNullOrEmpty(busqueda) && categoria == null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                           )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer != null && tipo == null && estado != null && !string.IsNullOrEmpty(busqueda) && categoria != null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             && x.HER_EstadoEnvioId == (int)estado
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer != null && tipo == null && estado != null && !string.IsNullOrEmpty(busqueda) && categoria != null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && x.HER_EstadoEnvioId == (int)estado
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer != null && tipo == null && estado != null && !string.IsNullOrEmpty(busqueda) && categoria == null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             && x.HER_EstadoEnvioId == (int)estado
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer != null && tipo == null && estado != null && !string.IsNullOrEmpty(busqueda) && categoria == null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && x.HER_EstadoEnvioId == (int)estado
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer != null && tipo == null && estado != null && string.IsNullOrEmpty(busqueda) && categoria != null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             && x.HER_EstadoEnvioId == (int)estado
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                          )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer != null && tipo == null && estado != null && string.IsNullOrEmpty(busqueda) && categoria != null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false

                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && x.HER_EstadoEnvioId == (int)estado
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                          )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer != null && tipo == null && estado != null && string.IsNullOrEmpty(busqueda) && categoria == null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false

                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             && x.HER_EstadoEnvioId == (int)estado
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                          )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer != null && tipo == null && estado != null && string.IsNullOrEmpty(busqueda) && categoria == null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_EstadoEnvioId == (int)estado
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                          )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer != null && tipo == null && estado == null && !string.IsNullOrEmpty(busqueda) && categoria != null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false

                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer != null && tipo == null && estado == null && !string.IsNullOrEmpty(busqueda) && categoria != null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer != null && tipo == null && estado == null && !string.IsNullOrEmpty(busqueda) && categoria == null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false

                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer != null && tipo == null && estado == null && !string.IsNullOrEmpty(busqueda) && categoria == null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer != null && tipo == null && estado == null && string.IsNullOrEmpty(busqueda) && categoria != null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false

                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                          )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer != null && tipo == null && estado == null && string.IsNullOrEmpty(busqueda) && categoria != null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false

                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                          )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer != null && tipo == null && estado == null && string.IsNullOrEmpty(busqueda) && categoria == null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                           )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer != null && tipo == null && estado == null && string.IsNullOrEmpty(busqueda) && categoria == null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Include(x => x.HER_Compromiso)
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false

                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                             (
                                 DateTime.Now >=
                                      ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                      -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                      ))
                                 && DateTime.Now <=
                                      (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                 && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                 && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                             )
                             : false
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                          ) //No esta clasificada en alguna carpeta
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer == null && tipo != null && estado != null && !string.IsNullOrEmpty(busqueda) && categoria != null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                                || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                                || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                                || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             && x.HER_EstadoEnvioId == (int)estado
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer == null && tipo != null && estado != null && !string.IsNullOrEmpty(busqueda) && categoria != null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && x.HER_EstadoEnvioId == (int)estado
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer == null && tipo != null && estado != null && !string.IsNullOrEmpty(busqueda) && categoria == null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             && x.HER_EstadoEnvioId == (int)estado
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer == null && tipo != null && estado != null && !string.IsNullOrEmpty(busqueda) && categoria == null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && x.HER_EstadoEnvioId == (int)estado
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer == null && tipo != null && estado != null && string.IsNullOrEmpty(busqueda) && categoria != null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             && x.HER_EstadoEnvioId == (int)estado
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer == null && tipo != null && estado != null && string.IsNullOrEmpty(busqueda) && categoria != null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && x.HER_EstadoEnvioId == (int)estado
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer == null && tipo != null && estado != null && string.IsNullOrEmpty(busqueda) && categoria == null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             && x.HER_EstadoEnvioId == (int)estado
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                   .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer == null && tipo != null && estado != null && string.IsNullOrEmpty(busqueda) && categoria == null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_EstadoEnvioId == (int)estado
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer == null && tipo != null && estado == null && !string.IsNullOrEmpty(busqueda) && categoria != null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer == null && tipo != null && estado == null && !string.IsNullOrEmpty(busqueda) && categoria != null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer == null && tipo != null && estado == null && !string.IsNullOrEmpty(busqueda) && categoria == null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer == null && tipo != null && estado == null && !string.IsNullOrEmpty(busqueda) && categoria == null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer == null && tipo != null && estado == null && string.IsNullOrEmpty(busqueda) && categoria != null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer == null && tipo != null && estado == null && string.IsNullOrEmpty(busqueda) && categoria != null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                             )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer == null && tipo != null && estado == null && string.IsNullOrEmpty(busqueda) && categoria == null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false

                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                             )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer == null && tipo != null && estado == null && string.IsNullOrEmpty(busqueda) && categoria == null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                           )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer == null && tipo == null && estado != null && !string.IsNullOrEmpty(busqueda) && categoria != null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             && x.HER_EstadoEnvioId == (int)estado
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer == null && tipo == null && estado != null && !string.IsNullOrEmpty(busqueda) && categoria != null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false

                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && x.HER_EstadoEnvioId == (int)estado
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer == null && tipo == null && estado != null && !string.IsNullOrEmpty(busqueda) && categoria == null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             && x.HER_EstadoEnvioId == (int)estado
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer == null && tipo == null && estado != null && !string.IsNullOrEmpty(busqueda) && categoria == null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && x.HER_EstadoEnvioId == (int)estado
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer == null && tipo == null && estado != null && string.IsNullOrEmpty(busqueda) && categoria != null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             && x.HER_EstadoEnvioId == (int)estado
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                    )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer == null && tipo == null && estado != null && string.IsNullOrEmpty(busqueda) && categoria != null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && x.HER_EstadoEnvioId == (int)estado
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                    )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,
                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer == null && tipo == null && estado != null && string.IsNullOrEmpty(busqueda) && categoria == null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false

                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             && x.HER_EstadoEnvioId == (int)estado
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                    )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,
                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer == null && tipo == null && estado != null && string.IsNullOrEmpty(busqueda) && categoria == null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_EstadoEnvioId == (int)estado
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,
                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer == null && tipo == null && estado == null && !string.IsNullOrEmpty(busqueda) && categoria != null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false

                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer == null && tipo == null && estado == null && !string.IsNullOrEmpty(busqueda) && categoria != null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,
                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer == null && tipo == null && estado == null && !string.IsNullOrEmpty(busqueda) && categoria == null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,
                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer == null && tipo == null && estado == null && !string.IsNullOrEmpty(busqueda) && categoria == null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer == null && tipo == null && estado == null && string.IsNullOrEmpty(busqueda) && categoria != null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false

                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,
                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer == null && tipo == null && estado == null && string.IsNullOrEmpty(busqueda) && categoria != null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false

                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                    )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer == null && tipo == null && estado == null && string.IsNullOrEmpty(busqueda) && categoria == null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,
                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite != null && proximovencer == null && tipo == null && estado == null && string.IsNullOrEmpty(busqueda) && categoria == null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             //---
                             && x.HER_Envio.HER_TramiteId == (int)tramite
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }

            else if (tramite == null && proximovencer != null && tipo != null && estado != null && !string.IsNullOrEmpty(busqueda) && categoria != null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                                || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                                || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                                || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                                || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             && x.HER_EstadoEnvioId == (int)estado
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                              (
                                DateTime.Now >=
                                  ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                  -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                  ))
                                && DateTime.Now <=
                                  (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                              )
                             : false
                     //---
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,
                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer != null && tipo != null && estado != null && !string.IsNullOrEmpty(busqueda) && categoria != null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && x.HER_EstadoEnvioId == (int)estado
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                     //---
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,
                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer != null && tipo != null && estado != null && !string.IsNullOrEmpty(busqueda) && categoria == null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             && x.HER_EstadoEnvioId == (int)estado
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                     //---
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,
                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer != null && tipo != null && estado != null && !string.IsNullOrEmpty(busqueda) && categoria == null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                busqueda = busqueda.Replace('+', ' ');
                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && x.HER_EstadoEnvioId == (int)estado
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                     //---
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,
                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer != null && tipo != null && estado != null && string.IsNullOrEmpty(busqueda) && categoria != null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);
                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             && x.HER_EstadoEnvioId == (int)estado
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                     //---
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,
                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer != null && tipo != null && estado != null && string.IsNullOrEmpty(busqueda) && categoria != null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false

                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && x.HER_EstadoEnvioId == (int)estado
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                     //---
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,
                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer != null && tipo != null && estado != null && string.IsNullOrEmpty(busqueda) && categoria == null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             && x.HER_EstadoEnvioId == (int)estado
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                     //---
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,
                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer != null && tipo != null && estado != null && string.IsNullOrEmpty(busqueda) && categoria == null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_EstadoEnvioId == (int)estado
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                     //---
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,
                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer != null && tipo != null && estado == null && !string.IsNullOrEmpty(busqueda) && categoria != null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                     //---
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,
                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer != null && tipo != null && estado == null && !string.IsNullOrEmpty(busqueda) && categoria != null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                     //---
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,
                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer != null && tipo != null && estado == null && !string.IsNullOrEmpty(busqueda) && categoria == null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                     //---
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,
                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer != null && tipo != null && estado == null && !string.IsNullOrEmpty(busqueda) && categoria == null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false

                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                     //---
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,
                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer != null && tipo != null && estado == null && string.IsNullOrEmpty(busqueda) && categoria != null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                          //---
                          )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,
                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer != null && tipo != null && estado == null && string.IsNullOrEmpty(busqueda) && categoria != null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false

                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                          //---
                          )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,
                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer != null && tipo != null && estado == null && string.IsNullOrEmpty(busqueda) && categoria == null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false

                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                         //---
                         )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,
                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer != null && tipo != null && estado == null && string.IsNullOrEmpty(busqueda) && categoria == null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false

                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                           //---
                           )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,
                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer != null && tipo == null && estado != null && !string.IsNullOrEmpty(busqueda) && categoria != null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             && x.HER_EstadoEnvioId == (int)estado
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                     //---
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer != null && tipo == null && estado != null && !string.IsNullOrEmpty(busqueda) && categoria != null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && x.HER_EstadoEnvioId == (int)estado
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                     //---
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,
                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer != null && tipo == null && estado != null && !string.IsNullOrEmpty(busqueda) && categoria == null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false

                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             && x.HER_EstadoEnvioId == (int)estado
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                     //---
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,
                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer != null && tipo == null && estado != null && !string.IsNullOrEmpty(busqueda) && categoria == null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false

                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && x.HER_EstadoEnvioId == (int)estado
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                     //---
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,
                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer != null && tipo == null && estado != null && string.IsNullOrEmpty(busqueda) && categoria != null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             && x.HER_EstadoEnvioId == (int)estado
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                          //---
                          )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,
                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer != null && tipo == null && estado != null && string.IsNullOrEmpty(busqueda) && categoria != null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && x.HER_EstadoEnvioId == (int)estado
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                          //---
                          )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,
                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer != null && tipo == null && estado != null && string.IsNullOrEmpty(busqueda) && categoria == null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false

                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             && x.HER_EstadoEnvioId == (int)estado
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                          //---
                          )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,
                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer != null && tipo == null && estado != null && string.IsNullOrEmpty(busqueda) && categoria == null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false

                             && x.HER_EstadoEnvioId == (int)estado
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                          //---
                          )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer != null && tipo == null && estado == null && !string.IsNullOrEmpty(busqueda) && categoria != null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                     //---
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,
                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer != null && tipo == null && estado == null && !string.IsNullOrEmpty(busqueda) && categoria != null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                     //---
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,
                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer != null && tipo == null && estado == null && !string.IsNullOrEmpty(busqueda) && categoria == null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);
                busqueda = busqueda.Replace('+', ' ');
                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false

                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                     //---
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,
                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer != null && tipo == null && estado == null && !string.IsNullOrEmpty(busqueda) && categoria == null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                     //---
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,
                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer != null && tipo == null && estado == null && string.IsNullOrEmpty(busqueda) && categoria != null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                          //---
                          )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,
                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer != null && tipo == null && estado == null && string.IsNullOrEmpty(busqueda) && categoria != null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                          //---
                          )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,
                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer != null && tipo == null && estado == null && string.IsNullOrEmpty(busqueda) && categoria == null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false

                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                                (
                                    DateTime.Now >=
                                          ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                          -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                          ))
                                     && DateTime.Now <=
                                          (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                     && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                     && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                                ) : false
                           //---
                           )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,
                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer != null && tipo == null && estado == null && string.IsNullOrEmpty(busqueda) && categoria == null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Include(x => x.HER_Compromiso)
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             //--
                             && (x.HER_Compromiso.Count() > 0) ?
                             (
                                 DateTime.Now >=
                                      ((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault().AddDays(
                                      -(Math.Round(((from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault() - x.HER_FechaRecepcion).Days * porcentaje))
                                      ))
                                 && DateTime.Now <=
                                      (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha).FirstOrDefault()
                                 && (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                                 && x.HER_EstadoEnvioId == ConstEstadoEnvio.EstadoEnvioN1
                             )
                             : false
                          //---
                          ) //No esta clasificada en alguna carpeta
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,
                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer == null && tipo != null && estado != null && !string.IsNullOrEmpty(busqueda) && categoria != null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                                || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                                || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                                || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                                || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             && x.HER_EstadoEnvioId == (int)estado
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,
                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer == null && tipo != null && estado != null && !string.IsNullOrEmpty(busqueda) && categoria != null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false

                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && x.HER_EstadoEnvioId == (int)estado
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,
                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer == null && tipo != null && estado != null && !string.IsNullOrEmpty(busqueda) && categoria == null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             && x.HER_EstadoEnvioId == (int)estado
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,
                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer == null && tipo != null && estado != null && !string.IsNullOrEmpty(busqueda) && categoria == null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && x.HER_EstadoEnvioId == (int)estado
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,
                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer == null && tipo != null && estado != null && string.IsNullOrEmpty(busqueda) && categoria != null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false

                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             && x.HER_EstadoEnvioId == (int)estado
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,
                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer == null && tipo != null && estado != null && string.IsNullOrEmpty(busqueda) && categoria != null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && x.HER_EstadoEnvioId == (int)estado
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,
                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer == null && tipo != null && estado != null && string.IsNullOrEmpty(busqueda) && categoria == null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             && x.HER_EstadoEnvioId == (int)estado
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,
                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                   .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer == null && tipo != null && estado != null && string.IsNullOrEmpty(busqueda) && categoria == null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_EstadoEnvioId == (int)estado
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,
                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer == null && tipo != null && estado == null && !string.IsNullOrEmpty(busqueda) && categoria != null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,
                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer == null && tipo != null && estado == null && !string.IsNullOrEmpty(busqueda) && categoria != null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer == null && tipo != null && estado == null && !string.IsNullOrEmpty(busqueda) && categoria == null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,
                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer == null && tipo != null && estado == null && !string.IsNullOrEmpty(busqueda) && categoria == null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,
                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer == null && tipo != null && estado == null && string.IsNullOrEmpty(busqueda) && categoria != null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,
                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer == null && tipo != null && estado == null && string.IsNullOrEmpty(busqueda) && categoria != null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,
                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer == null && tipo != null && estado == null && string.IsNullOrEmpty(busqueda) && categoria == null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,
                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer == null && tipo != null && estado == null && string.IsNullOrEmpty(busqueda) && categoria == null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_Envio.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && x.HER_Envio.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                           )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,
                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer == null && tipo == null && estado != null && !string.IsNullOrEmpty(busqueda) && categoria != null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             && x.HER_EstadoEnvioId == (int)estado
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,
                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer == null && tipo == null && estado != null && !string.IsNullOrEmpty(busqueda) && categoria != null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && x.HER_EstadoEnvioId == (int)estado
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,
                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer == null && tipo == null && estado != null && !string.IsNullOrEmpty(busqueda) && categoria == null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             && x.HER_EstadoEnvioId == (int)estado
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,
                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer == null && tipo == null && estado != null && !string.IsNullOrEmpty(busqueda) && categoria == null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && x.HER_EstadoEnvioId == (int)estado
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,
                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer == null && tipo == null && estado != null && string.IsNullOrEmpty(busqueda) && categoria != null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             && x.HER_EstadoEnvioId == (int)estado)
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,
                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer == null && tipo == null && estado != null && string.IsNullOrEmpty(busqueda) && categoria != null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false

                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && x.HER_EstadoEnvioId == (int)estado)
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer == null && tipo == null && estado != null && string.IsNullOrEmpty(busqueda) && categoria == null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false

                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                             && x.HER_EstadoEnvioId == (int)estado)
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer == null && tipo == null && estado != null && string.IsNullOrEmpty(busqueda) && categoria == null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false

                             && x.HER_EstadoEnvioId == (int)estado)
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,
                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer == null && tipo == null && estado == null && !string.IsNullOrEmpty(busqueda) && categoria != null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer == null && tipo == null && estado == null && !string.IsNullOrEmpty(busqueda) && categoria != null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,
                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer == null && tipo == null && estado == null && !string.IsNullOrEmpty(busqueda) && categoria == null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,
                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer == null && tipo == null && estado == null && !string.IsNullOrEmpty(busqueda) && categoria == null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like(x.HER_Envio.HER_De.HER_Area.HER_Nombre, "%" + busqueda + "%"))
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,
                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer == null && tipo == null && estado == null && string.IsNullOrEmpty(busqueda) && categoria != null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp))
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,
                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer == null && tipo == null && estado == null && string.IsNullOrEmpty(busqueda) && categoria != null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria))
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else if (tramite == null && proximovencer == null && tipo == null && estado == null && string.IsNullOrEmpty(busqueda) && categoria == null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                             && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp))
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,
                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderBy(x => x.TramiteId)
                    .ThenBy(x => x.Leido)
                    .ThenBy(x => x.FechaRecepcion)
                    //.OrderByDescending(x => x.FechaRecepcion)
                    .AsQueryable();
            }
            else
            {
                //Busqueda 
                recibidosQuery = _context.HER_Recepcion
                    .Include(x => x.HER_Compromiso)
                    .Include(x => x.HER_Envio)
                    .Where(x => x.HER_Para.HER_UserName == username
                             && x.HER_Para.HER_Activo == true
                             && x.HER_Envio.HER_EsOculto == false
                    ) //No esta clasificada en alguna carpeta
                    .AsNoTracking()
                    .Select(x => new DocumentoRecibidoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaRecepcion = x.HER_FechaRecepcion,
                        Leido = x.HER_EstaLeido,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_Envio.HER_EnvioPadre != null && x.HER_Envio.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_Envio.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_Envio.HER_TipoEnvioId,
                        Folio = x.HER_Envio.HER_Documento.HER_Folio,
                        Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                        Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                        Area = x.HER_Envio.HER_De.HER_Area.HER_Nombre,
                        Region = x.HER_Envio.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                        FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                            (from comp in x.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                        : DateTime.Now,
                        //--
                        TipoPara = x.HER_TipoPara,

                        TramiteId = x.HER_Envio.HER_TramiteId,
                        Tramite = x.HER_Envio.HER_Tramite.HER_Nombre,
                        NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                        Carpeta = x.HER_Carpeta.HER_Nombre,
                        //--
                        Proximo = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                                (from envio in _context.HER_Envio
                                 where envio.HER_Documento.HER_Folio == x.HER_Envio.HER_Documento.HER_Folio &&
                                       envio.HER_Orden > x.HER_Envio.HER_Orden &&
                                       envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2 &&
                                       envio.HER_De.HER_UserName == username
                                 select new ComplementoDocumentoRecibidoViewModel
                                 {
                                     EnvioId = envio.HER_EnvioId,
                                     TipoEnvio = envio.HER_TipoEnvioId,
                                     FechaEnvio = envio.HER_FechaEnvio,
                                     Destinatarios = (from recepcion in envio.HER_Recepciones
                                                      select new ComplementoDestinararios
                                                      {
                                                          Destinatario = recepcion.HER_Para.HER_NombreCompleto,
                                                          Area = recepcion.HER_Para.HER_Area.HER_Nombre,
                                                          Region = recepcion.HER_Para.HER_Area.HER_Region.HER_Nombre,
                                                          FechaRecepcion = recepcion.HER_FechaRecepcion,
                                                          FechaCompromiso = (envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                                                                                        (from comp in recepcion.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                                                                                : DateTime.Now,
                                                          TipoPara = recepcion.HER_TipoPara
                                                      }).ToList()
                                 }).FirstOrDefault()
                                 : (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4) ?
                                  (from envio in _context.HER_Envio
                                   where envio.HER_Documento.HER_Folio == x.HER_Envio.HER_Documento.HER_Folio &&
                                         envio.HER_Orden > x.HER_Envio.HER_Orden &&
                                         envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 &&
                                         envio.HER_EsReenvio == true &&
                                         envio.HER_De.HER_UserName == username
                                   select new ComplementoDocumentoRecibidoViewModel
                                   {
                                       EnvioId = envio.HER_EnvioId,
                                       TipoEnvio = envio.HER_TipoEnvioId,
                                       FechaEnvio = envio.HER_FechaEnvio,
                                       Destinatarios = (from recepcion in envio.HER_Recepciones
                                                        select new ComplementoDestinararios
                                                        {
                                                            Destinatario = recepcion.HER_Para.HER_NombreCompleto,
                                                            Area = recepcion.HER_Para.HER_Area.HER_Nombre,
                                                            Region = recepcion.HER_Para.HER_Area.HER_Region.HER_Nombre,
                                                            FechaRecepcion = recepcion.HER_FechaRecepcion,
                                                            FechaCompromiso = (envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                                                                                          (from comp in recepcion.HER_Compromiso where comp.HER_Estado == ConstCompromiso.EstadoN1 select comp.HER_Fecha).FirstOrDefault()
                                                                                  : DateTime.Now,
                                                            TipoPara = recepcion.HER_TipoPara
                                                        }).ToList()
                                   }).FirstOrDefault()
                                : null
                    })
                    .OrderByDescending(x => x.FechaRecepcion)
                    .ThenBy(x => x.Leido)
                    .AsQueryable();
            }

            return recibidosQuery;
        }
        //Bandeja Enviados
        public IQueryable<DocumentoEnviadoViewModel> ListadoDocumentosEnviados(string username, string busqueda, int? categoria, string fechaini, string fechafin, int? estado, int? tipo, int? tramite)
        {
            IQueryable<DocumentoEnviadoViewModel> enviadosQuery;
            //--
            DateTime fechaInicioTemp;
            DateTime fechaFinTemp;

            if (tramite != null && tipo != null && estado != null && !string.IsNullOrEmpty(busqueda) && categoria != null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);
                busqueda = busqueda.Replace('+', ' ');

                enviadosQuery = _context.HER_Envio
                        .Where(a => a.HER_De.HER_UserName == username
                                 && a.HER_De.HER_Activo == true
                                 && a.HER_EsOculto == false
                                 && a.HER_CarpetaId == null
                                 && (EF.Functions.Like(a.HER_Documento.HER_Folio, "%" + busqueda + "%")
                                    || EF.Functions.Like(a.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                                    || EF.Functions.Like(a.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                                    || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_NombreCompleto).FirstOrDefault(), "%" + busqueda + "%")
                                    || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(), "%" + busqueda + "%")
                                    )
                                 && a.HER_Documento.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                                 && (a.HER_FechaEnvio >= fechaInicioTemp && a.HER_FechaEnvio <= fechaFinTemp)
                                 && a.HER_EstadoEnvioId == (int)estado
                                 && a.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                                 && a.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                                 //--
                                 && a.HER_TramiteId == (int)tramite
                                 )
                        .AsNoTracking()
                        .Select(x => new DocumentoEnviadoViewModel
                        {
                            EnvioId = x.HER_EnvioId,
                            FechaEnvio = x.HER_FechaEnvio,
                            TipoEnvio = x.HER_TipoEnvioId,
                            TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                            Estado = x.HER_EstadoEnvio.HER_Nombre,
                            Folio = x.HER_Documento.HER_Folio,
                            Asunto = x.HER_Documento.HER_Asunto,
                            Adjuntos = (x.HER_AnexoId != null) ? true : false,
                            Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                            //--
                            Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                            Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                            Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                            //--
                            Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                            ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                            NoInterno = x.HER_Documento.HER_NoInterno,
                            TramiteId = x.HER_TramiteId,
                            Tramite = x.HER_Tramite.HER_Nombre
                        })
                        .OrderByDescending(x => x.FechaEnvio)
                        .AsQueryable();
            }
            else if (tramite != null && tipo != null && estado != null && !string.IsNullOrEmpty(busqueda) && categoria != null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                busqueda = busqueda.Replace('+', ' ');

                enviadosQuery = (_context.HER_Envio
                    .Where(a => a.HER_De.HER_UserName == username
                             && a.HER_De.HER_Activo == true
                             && a.HER_EsOculto == false
                             && a.HER_CarpetaId == null
                             && (EF.Functions.Like(a.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(a.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(a.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_NombreCompleto).FirstOrDefault(), "%" + busqueda + "%")
                             || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(), "%" + busqueda + "%")
                             )
                             && a.HER_Documento.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && a.HER_EstadoEnvioId == (int)estado
                             && a.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && a.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             //--
                             && a.HER_TramiteId == (int)tramite
                             )
                    .AsNoTracking()
                    .Select(x => new DocumentoEnviadoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaEnvio = x.HER_FechaEnvio,
                        TipoEnvio = x.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        Folio = x.HER_Documento.HER_Folio,
                        Asunto = x.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_AnexoId != null) ? true : false,
                        Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                        Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                        Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                        //--
                        Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                        ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                        NoInterno = x.HER_Documento.HER_NoInterno,
                        TramiteId = x.HER_TramiteId,
                        Tramite = x.HER_Tramite.HER_Nombre
                    })
                    .OrderByDescending(x => x.FechaEnvio)
                    .AsQueryable()
                );
            }
            else if (tramite != null && tipo != null && estado != null && !string.IsNullOrEmpty(busqueda) && categoria == null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);
                busqueda = busqueda.Replace('+', ' ');

                enviadosQuery = _context.HER_Envio
                    .Where(a => a.HER_De.HER_UserName == username
                             && a.HER_De.HER_Activo == true
                             && a.HER_EsOculto == false
                             && a.HER_CarpetaId == null
                             && (EF.Functions.Like(a.HER_Documento.HER_Folio, "%" + busqueda + "%")
                                || EF.Functions.Like(a.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                                || EF.Functions.Like(a.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                                || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_NombreCompleto).FirstOrDefault(), "%" + busqueda + "%")
                                || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(), "%" + busqueda + "%")
                                )
                             && (a.HER_FechaEnvio >= fechaInicioTemp && a.HER_FechaEnvio <= fechaFinTemp)
                             && a.HER_EstadoEnvioId == (int)estado
                             && a.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && a.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             //--
                             && a.HER_TramiteId == (int)tramite
                           )
                    .AsNoTracking()
                    .Select(x => new DocumentoEnviadoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaEnvio = x.HER_FechaEnvio,
                        TipoEnvio = x.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        Folio = x.HER_Documento.HER_Folio,
                        Asunto = x.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_AnexoId != null) ? true : false,
                        Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                        Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                        Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                        //--
                        Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                        ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                        NoInterno = x.HER_Documento.HER_NoInterno,
                        TramiteId = x.HER_TramiteId,
                        Tramite = x.HER_Tramite.HER_Nombre
                    })
                    .OrderByDescending(x => x.FechaEnvio)
                    .AsQueryable();
            }
            else if (tramite != null && tipo != null && estado != null && !string.IsNullOrEmpty(busqueda) && categoria == null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                busqueda = busqueda.Replace('+', ' ');

                enviadosQuery = _context.HER_Envio
                    .Where(a => a.HER_De.HER_UserName == username
                             && a.HER_De.HER_Activo == true
                             && a.HER_EsOculto == false
                             && a.HER_CarpetaId == null
                             && (EF.Functions.Like(a.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(a.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(a.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_NombreCompleto).FirstOrDefault(), "%" + busqueda + "%")
                             || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(), "%" + busqueda + "%")
                             )
                             && a.HER_EstadoEnvioId == (int)estado
                             && a.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && a.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             //--
                             && a.HER_TramiteId == (int)tramite
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoEnviadoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaEnvio = x.HER_FechaEnvio,
                        TipoEnvio = x.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        Folio = x.HER_Documento.HER_Folio,
                        Asunto = x.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_AnexoId != null) ? true : false,
                        Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                        Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                        Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                        //--
                        Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                        ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                        NoInterno = x.HER_Documento.HER_NoInterno,
                        TramiteId = x.HER_TramiteId,
                        Tramite = x.HER_Tramite.HER_Nombre
                    })
                    .OrderByDescending(x => x.FechaEnvio)
                    .AsQueryable();
            }
            else if (tramite != null && tipo != null && estado != null && string.IsNullOrEmpty(busqueda) && categoria != null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                enviadosQuery = (_context.HER_Envio
                        .Where(a => a.HER_De.HER_UserName == username
                                    && a.HER_De.HER_Activo == true
                                    && a.HER_EsOculto == false
                                    && a.HER_CarpetaId == null
                                    && a.HER_Documento.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                                    && (a.HER_FechaEnvio >= fechaInicioTemp && a.HER_FechaEnvio <= fechaFinTemp)
                                    && a.HER_EstadoEnvioId == (int)estado
                                    && a.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                                    && a.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                                    //--
                                    && a.HER_TramiteId == (int)tramite
                                    )
                        .AsNoTracking()
                        .Select(x => new DocumentoEnviadoViewModel
                        {
                            EnvioId = x.HER_EnvioId,
                            FechaEnvio = x.HER_FechaEnvio,
                            TipoEnvio = x.HER_TipoEnvioId,
                            TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                            Estado = x.HER_EstadoEnvio.HER_Nombre,
                            Folio = x.HER_Documento.HER_Folio,
                            Asunto = x.HER_Documento.HER_Asunto,
                            Adjuntos = (x.HER_AnexoId != null) ? true : false,
                            Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                            //--
                            Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                            Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                            Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                            //--
                            Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                            ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                            NoInterno = x.HER_Documento.HER_NoInterno,
                            TramiteId = x.HER_TramiteId,
                            Tramite = x.HER_Tramite.HER_Nombre
                        })
                        .OrderByDescending(x => x.FechaEnvio)
                        .AsQueryable()
                   );
            }
            else if (tramite != null && tipo != null && estado != null && string.IsNullOrEmpty(busqueda) && categoria != null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                enviadosQuery = (
                            _context.HER_Envio
                            .Where(a => a.HER_De.HER_UserName == username
                                     && a.HER_De.HER_Activo == true
                                     && a.HER_EsOculto == false
                                     && a.HER_CarpetaId == null
                                     && a.HER_Documento.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                                     && a.HER_EstadoEnvioId == (int)estado
                                     && a.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                                     && a.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                                     //--
                                     && a.HER_TramiteId == (int)tramite
                                     )
                            .AsNoTracking()
                            .Select(x => new DocumentoEnviadoViewModel
                            {
                                EnvioId = x.HER_EnvioId,
                                FechaEnvio = x.HER_FechaEnvio,
                                TipoEnvio = x.HER_TipoEnvioId,
                                TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                                Estado = x.HER_EstadoEnvio.HER_Nombre,
                                Folio = x.HER_Documento.HER_Folio,
                                Asunto = x.HER_Documento.HER_Asunto,
                                Adjuntos = (x.HER_AnexoId != null) ? true : false,
                                Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                                //--
                                Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                                Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                                Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                                //--
                                Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                                ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                                NoInterno = x.HER_Documento.HER_NoInterno,
                                TramiteId = x.HER_TramiteId,
                                Tramite = x.HER_Tramite.HER_Nombre
                            })
                            .OrderByDescending(x => x.FechaEnvio)
                            .AsQueryable()
                    );
            }
            else if (tramite != null && tipo != null && estado != null && string.IsNullOrEmpty(busqueda) && categoria == null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                enviadosQuery = _context.HER_Envio
                    .Where(a => a.HER_De.HER_UserName == username
                             && a.HER_De.HER_Activo == true
                             && a.HER_EsOculto == false
                             && a.HER_CarpetaId == null
                             && (a.HER_FechaEnvio >= fechaInicioTemp && a.HER_FechaEnvio <= fechaFinTemp)
                             && a.HER_EstadoEnvioId == (int)estado
                             && a.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && a.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             //--
                             && a.HER_TramiteId == (int)tramite
                             )
                    .AsNoTracking()
                    .Select(x => new DocumentoEnviadoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaEnvio = x.HER_FechaEnvio,
                        TipoEnvio = x.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        Folio = x.HER_Documento.HER_Folio,
                        Asunto = x.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_AnexoId != null) ? true : false,
                        Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                        Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                        Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                        //--
                        Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                        ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                        NoInterno = x.HER_Documento.HER_NoInterno,
                        TramiteId = x.HER_TramiteId,
                        Tramite = x.HER_Tramite.HER_Nombre
                    })
                    .OrderByDescending(x => x.FechaEnvio)
                    .AsQueryable();
            }
            else if (tramite != null && tipo != null && estado != null && string.IsNullOrEmpty(busqueda) && categoria == null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                enviadosQuery = _context.HER_Envio
                    .Where(a => a.HER_De.HER_UserName == username
                             && a.HER_De.HER_Activo == true
                             && a.HER_EsOculto == false
                             && a.HER_CarpetaId == null
                             && a.HER_EstadoEnvioId == (int)estado
                             && a.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && a.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             //--
                             && a.HER_TramiteId == (int)tramite
                             )
                    .AsNoTracking()
                    .Select(x => new DocumentoEnviadoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaEnvio = x.HER_FechaEnvio,
                        TipoEnvio = x.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        Folio = x.HER_Documento.HER_Folio,
                        Asunto = x.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_AnexoId != null) ? true : false,
                        Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                        Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                        Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                        //--
                        Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                        ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                        NoInterno = x.HER_Documento.HER_NoInterno,
                        TramiteId = x.HER_TramiteId,
                        Tramite = x.HER_Tramite.HER_Nombre
                    })
                    .OrderByDescending(x => x.FechaEnvio)
                    .AsQueryable();
            }
            else if (tramite != null && tipo != null && estado == null && !string.IsNullOrEmpty(busqueda) && categoria != null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);
                busqueda = busqueda.Replace('+', ' ');

                enviadosQuery = (_context.HER_Envio
                        .Where(a => a.HER_De.HER_UserName == username
                                 && a.HER_De.HER_Activo == true
                                 && a.HER_EsOculto == false
                                 && a.HER_CarpetaId == null
                                 && (EF.Functions.Like(a.HER_Documento.HER_Folio, "%" + busqueda + "%")
                                    || EF.Functions.Like(a.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                                    || EF.Functions.Like(a.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                                    || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_NombreCompleto).FirstOrDefault(), "%" + busqueda + "%")
                                    || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(), "%" + busqueda + "%")
                                    )
                                 && a.HER_Documento.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                                 && (a.HER_FechaEnvio >= fechaInicioTemp && a.HER_FechaEnvio <= fechaFinTemp)
                                 && a.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                                 && a.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                                 //--
                                 && a.HER_TramiteId == (int)tramite
                                 )
                        .AsNoTracking()
                        .Select(x => new DocumentoEnviadoViewModel
                        {
                            EnvioId = x.HER_EnvioId,
                            FechaEnvio = x.HER_FechaEnvio,
                            TipoEnvio = x.HER_TipoEnvioId,
                            TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                            Estado = x.HER_EstadoEnvio.HER_Nombre,
                            Folio = x.HER_Documento.HER_Folio,
                            Asunto = x.HER_Documento.HER_Asunto,
                            Adjuntos = (x.HER_AnexoId != null) ? true : false,
                            Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                            //--
                            Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                            Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                            Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                            //--
                            Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                            ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                            NoInterno = x.HER_Documento.HER_NoInterno,
                            TramiteId = x.HER_TramiteId,
                            Tramite = x.HER_Tramite.HER_Nombre
                        })
                        .OrderByDescending(x => x.FechaEnvio)
                        .AsQueryable()
                    );
            }
            else if (tramite != null && tipo != null && estado == null && !string.IsNullOrEmpty(busqueda) && categoria != null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                busqueda = busqueda.Replace('+', ' ');

                enviadosQuery = (_context.HER_Envio
                    .Where(a => a.HER_De.HER_UserName == username
                             && a.HER_De.HER_Activo == true
                             && a.HER_EsOculto == false
                             && a.HER_CarpetaId == null
                             && (EF.Functions.Like(a.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(a.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(a.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_NombreCompleto).FirstOrDefault(), "%" + busqueda + "%")
                             || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(), "%" + busqueda + "%")
                             )
                             && a.HER_Documento.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && a.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && a.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             //--
                             && a.HER_TramiteId == (int)tramite
                             )
                    .AsNoTracking()
                    .Select(x => new DocumentoEnviadoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaEnvio = x.HER_FechaEnvio,
                        TipoEnvio = x.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        Folio = x.HER_Documento.HER_Folio,
                        Asunto = x.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_AnexoId != null) ? true : false,
                        Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                        Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                        Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                        //--
                        Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                        ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                        NoInterno = x.HER_Documento.HER_NoInterno,
                        TramiteId = x.HER_TramiteId,
                        Tramite = x.HER_Tramite.HER_Nombre
                    })
                    .OrderByDescending(x => x.FechaEnvio)
                    .AsQueryable()
                );
            }
            else if (tramite != null && tipo != null && estado == null && !string.IsNullOrEmpty(busqueda) && categoria == null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);
                busqueda = busqueda.Replace('+', ' ');

                enviadosQuery = _context.HER_Envio
                    .Where(a => a.HER_De.HER_UserName == username
                             && a.HER_De.HER_Activo == true
                             && a.HER_EsOculto == false
                             && a.HER_CarpetaId == null
                             && (EF.Functions.Like(a.HER_Documento.HER_Folio, "%" + busqueda + "%")
                                || EF.Functions.Like(a.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                                || EF.Functions.Like(a.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                                || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_NombreCompleto).FirstOrDefault(), "%" + busqueda + "%")
                                || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(), "%" + busqueda + "%")
                                )
                             && (a.HER_FechaEnvio >= fechaInicioTemp && a.HER_FechaEnvio <= fechaFinTemp)
                             && a.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && a.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             //--
                             && a.HER_TramiteId == (int)tramite
                             )
                    .AsNoTracking()
                    .Select(x => new DocumentoEnviadoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaEnvio = x.HER_FechaEnvio,
                        TipoEnvio = x.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        Folio = x.HER_Documento.HER_Folio,
                        Asunto = x.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_AnexoId != null) ? true : false,
                        Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                        Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                        Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                        //--
                        Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                        ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                        NoInterno = x.HER_Documento.HER_NoInterno,
                        TramiteId = x.HER_TramiteId,
                        Tramite = x.HER_Tramite.HER_Nombre
                    })
                    .OrderByDescending(x => x.FechaEnvio)
                    .AsQueryable();
            }
            else if (tramite != null && tipo != null && estado == null && !string.IsNullOrEmpty(busqueda) && categoria == null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                busqueda = busqueda.Replace('+', ' ');

                enviadosQuery = _context.HER_Envio
                    .Where(a => a.HER_De.HER_UserName == username
                             && a.HER_De.HER_Activo == true
                             && a.HER_EsOculto == false
                             && a.HER_CarpetaId == null
                             && (EF.Functions.Like(a.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(a.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(a.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_NombreCompleto).FirstOrDefault(), "%" + busqueda + "%")
                             || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(), "%" + busqueda + "%")
                             )
                             && a.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && a.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             //--
                             && a.HER_TramiteId == (int)tramite
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoEnviadoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaEnvio = x.HER_FechaEnvio,
                        TipoEnvio = x.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        Folio = x.HER_Documento.HER_Folio,
                        Asunto = x.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_AnexoId != null) ? true : false,
                        Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                        Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                        Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                        //--
                        Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                        ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                        NoInterno = x.HER_Documento.HER_NoInterno,
                        TramiteId = x.HER_TramiteId,
                        Tramite = x.HER_Tramite.HER_Nombre
                    })
                    .OrderByDescending(x => x.FechaEnvio)
                    .AsQueryable();
            }
            else if (tramite != null && tipo != null && estado == null && string.IsNullOrEmpty(busqueda) && categoria != null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                enviadosQuery = (_context.HER_Envio
                        .Where(a => a.HER_De.HER_UserName == username
                                    && a.HER_De.HER_Activo == true
                                    && a.HER_EsOculto == false
                                    && a.HER_CarpetaId == null
                                    && a.HER_Documento.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                                    && (a.HER_FechaEnvio >= fechaInicioTemp && a.HER_FechaEnvio <= fechaFinTemp)
                                    && a.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                                    && a.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                                    //--
                                    && a.HER_TramiteId == (int)tramite
                                    )
                        .AsNoTracking()
                        .Select(x => new DocumentoEnviadoViewModel
                        {
                            EnvioId = x.HER_EnvioId,
                            FechaEnvio = x.HER_FechaEnvio,
                            TipoEnvio = x.HER_TipoEnvioId,
                            TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                            Estado = x.HER_EstadoEnvio.HER_Nombre,
                            Folio = x.HER_Documento.HER_Folio,
                            Asunto = x.HER_Documento.HER_Asunto,
                            Adjuntos = (x.HER_AnexoId != null) ? true : false,
                            Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                            //--
                            Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                            Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                            Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                            //--
                            Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                            ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                            NoInterno = x.HER_Documento.HER_NoInterno,
                            TramiteId = x.HER_TramiteId,
                            Tramite = x.HER_Tramite.HER_Nombre
                        })
                        .OrderByDescending(x => x.FechaEnvio)
                        .AsQueryable()
                   );
            }
            else if (tramite != null && tipo != null && estado == null && string.IsNullOrEmpty(busqueda) && categoria != null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                enviadosQuery = (
                            _context.HER_Envio
                            .Where(a => a.HER_De.HER_UserName == username
                                     && a.HER_De.HER_Activo == true
                                     && a.HER_EsOculto == false
                                     && a.HER_CarpetaId == null
                                     && a.HER_Documento.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                                     && a.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                                     && a.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                                     //--
                                     && a.HER_TramiteId == (int)tramite
                                     )
                            .AsNoTracking()
                            .Select(x => new DocumentoEnviadoViewModel
                            {
                                EnvioId = x.HER_EnvioId,
                                FechaEnvio = x.HER_FechaEnvio,
                                TipoEnvio = x.HER_TipoEnvioId,
                                TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                                Estado = x.HER_EstadoEnvio.HER_Nombre,
                                Folio = x.HER_Documento.HER_Folio,
                                Asunto = x.HER_Documento.HER_Asunto,
                                Adjuntos = (x.HER_AnexoId != null) ? true : false,
                                Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                                //--
                                Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                                Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                                Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                                //--
                                Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                                ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                                NoInterno = x.HER_Documento.HER_NoInterno,
                                TramiteId = x.HER_TramiteId,
                                Tramite = x.HER_Tramite.HER_Nombre
                            })
                            .OrderByDescending(x => x.FechaEnvio)
                            .AsQueryable()
                    );
            }
            else if (tramite != null && tipo != null && estado == null && string.IsNullOrEmpty(busqueda) && categoria == null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                enviadosQuery = _context.HER_Envio
                    .Where(a => a.HER_De.HER_UserName == username
                             && a.HER_De.HER_Activo == true
                             && a.HER_EsOculto == false
                             && a.HER_CarpetaId == null
                             && (a.HER_FechaEnvio >= fechaInicioTemp && a.HER_FechaEnvio <= fechaFinTemp)
                             && a.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && a.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             //--
                             && a.HER_TramiteId == (int)tramite
                             )
                    .AsNoTracking()
                    .Select(x => new DocumentoEnviadoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaEnvio = x.HER_FechaEnvio,
                        TipoEnvio = x.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        Folio = x.HER_Documento.HER_Folio,
                        Asunto = x.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_AnexoId != null) ? true : false,
                        Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                        Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                        Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                        //--
                        Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                        ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                        NoInterno = x.HER_Documento.HER_NoInterno,
                        TramiteId = x.HER_TramiteId,
                        Tramite = x.HER_Tramite.HER_Nombre
                    })
                    .OrderByDescending(x => x.FechaEnvio)
                    .AsQueryable();
            }
            else if (tramite != null && tipo != null && estado == null && string.IsNullOrEmpty(busqueda) && categoria == null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                enviadosQuery = _context.HER_Envio
                    .Where(a => a.HER_De.HER_UserName == username
                               && a.HER_De.HER_Activo == true
                                 && a.HER_EsOculto == false
                             && a.HER_CarpetaId == null
                             && a.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && a.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             //--
                             && a.HER_TramiteId == (int)tramite
                             )
                    .AsNoTracking()
                    .Select(x => new DocumentoEnviadoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaEnvio = x.HER_FechaEnvio,
                        TipoEnvio = x.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        Folio = x.HER_Documento.HER_Folio,
                        Asunto = x.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_AnexoId != null) ? true : false,
                        Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                        Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                        Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                        //--
                        Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                        ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                        NoInterno = x.HER_Documento.HER_NoInterno,
                        TramiteId = x.HER_TramiteId,
                        Tramite = x.HER_Tramite.HER_Nombre
                    })
                    .OrderByDescending(x => x.FechaEnvio)
                    .AsQueryable();
            }
            else if (tramite != null && tipo == null && estado != null && !string.IsNullOrEmpty(busqueda) && categoria != null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);
                busqueda = busqueda.Replace('+', ' ');

                enviadosQuery = (_context.HER_Envio
                        .Where(a => a.HER_De.HER_UserName == username
                                 && a.HER_De.HER_Activo == true
                                 && a.HER_EsOculto == false
                                 && a.HER_CarpetaId == null
                                 && (EF.Functions.Like(a.HER_Documento.HER_Folio, "%" + busqueda + "%")
                                    || EF.Functions.Like(a.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                                    || EF.Functions.Like(a.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                                    || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_NombreCompleto).FirstOrDefault(), "%" + busqueda + "%")
                                    || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(), "%" + busqueda + "%")
                                    )
                                 && a.HER_Documento.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                                 && (a.HER_FechaEnvio >= fechaInicioTemp && a.HER_FechaEnvio <= fechaFinTemp)
                                 && a.HER_EstadoEnvioId == (int)estado
                                 //--
                                 && a.HER_TramiteId == (int)tramite
                         )
                        .AsNoTracking()
                        .Select(x => new DocumentoEnviadoViewModel
                        {
                            EnvioId = x.HER_EnvioId,
                            FechaEnvio = x.HER_FechaEnvio,
                            TipoEnvio = x.HER_TipoEnvioId,
                            TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                            Estado = x.HER_EstadoEnvio.HER_Nombre,
                            Folio = x.HER_Documento.HER_Folio,
                            Asunto = x.HER_Documento.HER_Asunto,
                            Adjuntos = (x.HER_AnexoId != null) ? true : false,
                            Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                            //--
                            Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                            Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                            Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                            //--
                            Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                            ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                            NoInterno = x.HER_Documento.HER_NoInterno,
                            TramiteId = x.HER_TramiteId,
                            Tramite = x.HER_Tramite.HER_Nombre
                        })
                        .OrderByDescending(x => x.FechaEnvio)
                        .AsQueryable()
                    );
            }
            else if (tramite != null && tipo == null && estado != null && !string.IsNullOrEmpty(busqueda) && categoria != null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                busqueda = busqueda.Replace('+', ' ');

                enviadosQuery = (_context.HER_Envio
                    .Where(a => a.HER_De.HER_UserName == username
                             && a.HER_De.HER_Activo == true
                             && a.HER_EsOculto == false
                             && a.HER_CarpetaId == null
                             && (EF.Functions.Like(a.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(a.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(a.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_NombreCompleto).FirstOrDefault(), "%" + busqueda + "%")
                             || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(), "%" + busqueda + "%")
                             )
                             && a.HER_Documento.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && a.HER_EstadoEnvioId == (int)estado
                             //--
                             && a.HER_TramiteId == (int)tramite
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoEnviadoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaEnvio = x.HER_FechaEnvio,
                        TipoEnvio = x.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        Folio = x.HER_Documento.HER_Folio,
                        Asunto = x.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_AnexoId != null) ? true : false,
                        Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                        Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                        Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                        //--
                        Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                        ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                        NoInterno = x.HER_Documento.HER_NoInterno,
                        TramiteId = x.HER_TramiteId,
                        Tramite = x.HER_Tramite.HER_Nombre
                    })
                    .OrderByDescending(x => x.FechaEnvio)
                    .AsQueryable()
                );
            }
            else if (tramite != null && tipo == null && estado != null && !string.IsNullOrEmpty(busqueda) && categoria == null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);
                busqueda = busqueda.Replace('+', ' ');

                enviadosQuery = _context.HER_Envio
                    .Where(a => a.HER_De.HER_UserName == username
                               && a.HER_De.HER_Activo == true
                                 && a.HER_EsOculto == false
                             && a.HER_CarpetaId == null
                             && (EF.Functions.Like(a.HER_Documento.HER_Folio, "%" + busqueda + "%")
                                || EF.Functions.Like(a.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                                || EF.Functions.Like(a.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                                || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_NombreCompleto).FirstOrDefault(), "%" + busqueda + "%")
                                || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(), "%" + busqueda + "%")
                                )
                             && (a.HER_FechaEnvio >= fechaInicioTemp && a.HER_FechaEnvio <= fechaFinTemp)
                             && a.HER_EstadoEnvioId == (int)estado
                            //--
                            && a.HER_TramiteId == (int)tramite
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoEnviadoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaEnvio = x.HER_FechaEnvio,
                        TipoEnvio = x.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        Folio = x.HER_Documento.HER_Folio,
                        Asunto = x.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_AnexoId != null) ? true : false,
                        Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                        Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                        Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                        //--
                        Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                        ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                        NoInterno = x.HER_Documento.HER_NoInterno,
                        TramiteId = x.HER_TramiteId,
                        Tramite = x.HER_Tramite.HER_Nombre
                    })
                    .OrderByDescending(x => x.FechaEnvio)
                    .AsQueryable();
            }
            else if (tramite != null && tipo == null && estado != null && !string.IsNullOrEmpty(busqueda) && categoria == null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                busqueda = busqueda.Replace('+', ' ');

                enviadosQuery = _context.HER_Envio
                    .Where(a => a.HER_De.HER_UserName == username
                             && a.HER_De.HER_Activo == true
                             && a.HER_EsOculto == false
                             && a.HER_CarpetaId == null
                             && (EF.Functions.Like(a.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(a.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(a.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_NombreCompleto).FirstOrDefault(), "%" + busqueda + "%")
                             || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(), "%" + busqueda + "%")
                             )
                             && a.HER_EstadoEnvioId == (int)estado
                             //--
                             && a.HER_TramiteId == (int)tramite
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoEnviadoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaEnvio = x.HER_FechaEnvio,
                        TipoEnvio = x.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        Folio = x.HER_Documento.HER_Folio,
                        Asunto = x.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_AnexoId != null) ? true : false,
                        Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                        Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                        Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                        //--
                        Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                        ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                        NoInterno = x.HER_Documento.HER_NoInterno,
                        TramiteId = x.HER_TramiteId,
                        Tramite = x.HER_Tramite.HER_Nombre
                    })
                    .OrderByDescending(x => x.FechaEnvio)
                    .AsQueryable();
            }
            else if (tramite != null && tipo == null && estado != null && string.IsNullOrEmpty(busqueda) && categoria != null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                enviadosQuery = (_context.HER_Envio
                        .Where(a => a.HER_De.HER_UserName == username
                                    && a.HER_De.HER_Activo == true
                                    && a.HER_EsOculto == false
                                    && a.HER_CarpetaId == null
                                    && a.HER_Documento.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                                    && (a.HER_FechaEnvio >= fechaInicioTemp && a.HER_FechaEnvio <= fechaFinTemp)
                                    && a.HER_EstadoEnvioId == (int)estado
                                    //--
                                    && a.HER_TramiteId == (int)tramite
                         )
                        .AsNoTracking()
                        .Select(x => new DocumentoEnviadoViewModel
                        {
                            EnvioId = x.HER_EnvioId,
                            FechaEnvio = x.HER_FechaEnvio,
                            TipoEnvio = x.HER_TipoEnvioId,
                            TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                            Estado = x.HER_EstadoEnvio.HER_Nombre,
                            Folio = x.HER_Documento.HER_Folio,
                            Asunto = x.HER_Documento.HER_Asunto,
                            Adjuntos = (x.HER_AnexoId != null) ? true : false,
                            Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                            //--
                            Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                            Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                            Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                            //--
                            Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                            ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                            NoInterno = x.HER_Documento.HER_NoInterno,
                            TramiteId = x.HER_TramiteId,
                            Tramite = x.HER_Tramite.HER_Nombre
                        })
                        .OrderByDescending(x => x.FechaEnvio)
                        .AsQueryable()
                   );
            }
            else if (tramite != null && tipo == null && estado != null && string.IsNullOrEmpty(busqueda) && categoria != null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                enviadosQuery = (
                            _context.HER_Envio
                            .Where(a => a.HER_De.HER_UserName == username
                                     && a.HER_De.HER_Activo == true
                                     && a.HER_EsOculto == false
                                     && a.HER_CarpetaId == null
                                     && a.HER_Documento.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                                     && a.HER_EstadoEnvioId == (int)estado
                                     //--
                                     && a.HER_TramiteId == (int)tramite
                             )
                            .AsNoTracking()
                            .Select(x => new DocumentoEnviadoViewModel
                            {
                                EnvioId = x.HER_EnvioId,
                                FechaEnvio = x.HER_FechaEnvio,
                                TipoEnvio = x.HER_TipoEnvioId,
                                TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                                Estado = x.HER_EstadoEnvio.HER_Nombre,
                                Folio = x.HER_Documento.HER_Folio,
                                Asunto = x.HER_Documento.HER_Asunto,
                                Adjuntos = (x.HER_AnexoId != null) ? true : false,
                                Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                                //--
                                Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                                Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                                Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                                //--
                                Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                                ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                                NoInterno = x.HER_Documento.HER_NoInterno,
                                TramiteId = x.HER_TramiteId,
                                Tramite = x.HER_Tramite.HER_Nombre
                            })
                            .OrderByDescending(x => x.FechaEnvio)
                            .AsQueryable()
                    );
            }
            else if (tramite != null && tipo == null && estado != null && string.IsNullOrEmpty(busqueda) && categoria == null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                enviadosQuery = _context.HER_Envio
                    .Where(a => a.HER_De.HER_UserName == username
                             && a.HER_De.HER_Activo == true
                             && a.HER_EsOculto == false
                             && a.HER_CarpetaId == null
                             && (a.HER_FechaEnvio >= fechaInicioTemp && a.HER_FechaEnvio <= fechaFinTemp)
                             && a.HER_EstadoEnvioId == (int)estado
                             //--
                             && a.HER_TramiteId == (int)tramite
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoEnviadoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaEnvio = x.HER_FechaEnvio,
                        TipoEnvio = x.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        Folio = x.HER_Documento.HER_Folio,
                        Asunto = x.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_AnexoId != null) ? true : false,
                        Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                        Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                        Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                        //--
                        Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                        ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                        NoInterno = x.HER_Documento.HER_NoInterno,
                        TramiteId = x.HER_TramiteId,
                        Tramite = x.HER_Tramite.HER_Nombre
                    })
                    .OrderByDescending(x => x.FechaEnvio)
                    .AsQueryable();
            }
            else if (tramite != null && tipo == null && estado != null && string.IsNullOrEmpty(busqueda) && categoria == null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                enviadosQuery = _context.HER_Envio
                    .Where(a => a.HER_De.HER_UserName == username
                             && a.HER_De.HER_Activo == true
                             && a.HER_EsOculto == false
                             && a.HER_CarpetaId == null
                             && a.HER_EstadoEnvioId == (int)estado
                             //--
                             && a.HER_TramiteId == (int)tramite
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoEnviadoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaEnvio = x.HER_FechaEnvio,
                        TipoEnvio = x.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        Folio = x.HER_Documento.HER_Folio,
                        Asunto = x.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_AnexoId != null) ? true : false,
                        Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                        Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                        Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                        //--
                        Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                        ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                        NoInterno = x.HER_Documento.HER_NoInterno,
                        TramiteId = x.HER_TramiteId,
                        Tramite = x.HER_Tramite.HER_Nombre
                    })
                    .OrderByDescending(x => x.FechaEnvio)
                    .AsQueryable();
            }
            else if (tramite != null && tipo == null && estado == null && !string.IsNullOrEmpty(busqueda) && categoria != null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);
                busqueda = busqueda.Replace('+', ' ');

                enviadosQuery = (_context.HER_Envio
                        .Where(a => a.HER_De.HER_UserName == username
                                 && a.HER_De.HER_Activo == true
                                 && a.HER_EsOculto == false
                                 && a.HER_CarpetaId == null
                                 && (EF.Functions.Like(a.HER_Documento.HER_Folio, "%" + busqueda + "%")
                                    || EF.Functions.Like(a.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                                    || EF.Functions.Like(a.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                                    || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_NombreCompleto).FirstOrDefault(), "%" + busqueda + "%")
                                    || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(), "%" + busqueda + "%")
                                    )
                                 && a.HER_Documento.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                                 && (a.HER_FechaEnvio >= fechaInicioTemp && a.HER_FechaEnvio <= fechaFinTemp)
                                 //--
                                 && a.HER_TramiteId == (int)tramite
                                 )
                        .AsNoTracking()
                        .Select(x => new DocumentoEnviadoViewModel
                        {
                            EnvioId = x.HER_EnvioId,
                            FechaEnvio = x.HER_FechaEnvio,
                            TipoEnvio = x.HER_TipoEnvioId,
                            TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                            Estado = x.HER_EstadoEnvio.HER_Nombre,
                            Folio = x.HER_Documento.HER_Folio,
                            Asunto = x.HER_Documento.HER_Asunto,
                            Adjuntos = (x.HER_AnexoId != null) ? true : false,
                            Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                            //--
                            Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                            Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                            Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                            //--
                            Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                            ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                            NoInterno = x.HER_Documento.HER_NoInterno,
                            TramiteId = x.HER_TramiteId,
                            Tramite = x.HER_Tramite.HER_Nombre
                        })
                        .OrderByDescending(x => x.FechaEnvio)
                        .AsQueryable()
                    );
            }
            else if (tramite != null && tipo == null && estado == null && !string.IsNullOrEmpty(busqueda) && categoria != null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                busqueda = busqueda.Replace('+', ' ');

                enviadosQuery = (_context.HER_Envio
                    .Where(a => a.HER_De.HER_UserName == username
                             && a.HER_De.HER_Activo == true
                             && a.HER_EsOculto == false
                             && a.HER_CarpetaId == null
                             && (EF.Functions.Like(a.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(a.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(a.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_NombreCompleto).FirstOrDefault(), "%" + busqueda + "%")
                             || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(), "%" + busqueda + "%")
                             )
                             && a.HER_Documento.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             //--
                             && a.HER_TramiteId == (int)tramite
                             )
                    .AsNoTracking()
                    .Select(x => new DocumentoEnviadoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaEnvio = x.HER_FechaEnvio,
                        TipoEnvio = x.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        Folio = x.HER_Documento.HER_Folio,
                        Asunto = x.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_AnexoId != null) ? true : false,
                        Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                        Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                        Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                        //--
                        Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                        ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                        NoInterno = x.HER_Documento.HER_NoInterno,
                        TramiteId = x.HER_TramiteId,
                        Tramite = x.HER_Tramite.HER_Nombre
                    })
                    .OrderByDescending(x => x.FechaEnvio)
                    .AsQueryable()
                );
            }
            else if (tramite != null && tipo == null && estado == null && !string.IsNullOrEmpty(busqueda) && categoria == null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);
                busqueda = busqueda.Replace('+', ' ');

                enviadosQuery = _context.HER_Envio
                    .Where(a => a.HER_De.HER_UserName == username
                             && a.HER_De.HER_Activo == true
                             && a.HER_EsOculto == false
                             && a.HER_CarpetaId == null
                             && (EF.Functions.Like(a.HER_Documento.HER_Folio, "%" + busqueda + "%")
                                || EF.Functions.Like(a.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                                || EF.Functions.Like(a.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                                || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_NombreCompleto).FirstOrDefault(), "%" + busqueda + "%")
                                || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(), "%" + busqueda + "%")
                              )
                             && (a.HER_FechaEnvio >= fechaInicioTemp && a.HER_FechaEnvio <= fechaFinTemp)
                             //--
                             && a.HER_TramiteId == (int)tramite
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoEnviadoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaEnvio = x.HER_FechaEnvio,
                        TipoEnvio = x.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        Folio = x.HER_Documento.HER_Folio,
                        Asunto = x.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_AnexoId != null) ? true : false,
                        Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                        Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                        Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                        //--
                        Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                        ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                        NoInterno = x.HER_Documento.HER_NoInterno,
                        TramiteId = x.HER_TramiteId,
                        Tramite = x.HER_Tramite.HER_Nombre
                    })
                    .OrderByDescending(x => x.FechaEnvio)
                    .AsQueryable();
            }
            else if (tramite != null && tipo == null && estado == null && !string.IsNullOrEmpty(busqueda) && categoria == null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                busqueda = busqueda.Replace('+', ' ');

                enviadosQuery = _context.HER_Envio
                    .Where(a => a.HER_De.HER_UserName == username
                             && a.HER_De.HER_Activo == true
                             && a.HER_EsOculto == false
                             && a.HER_CarpetaId == null
                             && (EF.Functions.Like(a.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(a.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(a.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_NombreCompleto).FirstOrDefault(), "%" + busqueda + "%")
                             || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(), "%" + busqueda + "%")
                             )
                            //--
                            && a.HER_TramiteId == (int)tramite
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoEnviadoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaEnvio = x.HER_FechaEnvio,
                        TipoEnvio = x.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        Folio = x.HER_Documento.HER_Folio,
                        Asunto = x.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_AnexoId != null) ? true : false,
                        Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                        Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                        Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                        //--
                        Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                        ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                        NoInterno = x.HER_Documento.HER_NoInterno,
                        TramiteId = x.HER_TramiteId,
                        Tramite = x.HER_Tramite.HER_Nombre
                    })
                    .OrderByDescending(x => x.FechaEnvio)
                    .AsQueryable();
            }
            else if (tramite != null && tipo == null && estado == null && string.IsNullOrEmpty(busqueda) && categoria != null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                enviadosQuery = (_context.HER_Envio
                        .Where(a => a.HER_De.HER_UserName == username
                                    && a.HER_De.HER_Activo == true
                                    && a.HER_EsOculto == false
                                    && a.HER_CarpetaId == null
                                    && a.HER_Documento.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                                    && (a.HER_FechaEnvio >= fechaInicioTemp && a.HER_FechaEnvio <= fechaFinTemp)
                                    //--
                                    && a.HER_TramiteId == (int)tramite
                                )
                        .AsNoTracking()
                        .Select(x => new DocumentoEnviadoViewModel
                        {
                            EnvioId = x.HER_EnvioId,
                            FechaEnvio = x.HER_FechaEnvio,
                            TipoEnvio = x.HER_TipoEnvioId,
                            TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                            Estado = x.HER_EstadoEnvio.HER_Nombre,
                            Folio = x.HER_Documento.HER_Folio,
                            Asunto = x.HER_Documento.HER_Asunto,
                            Adjuntos = (x.HER_AnexoId != null) ? true : false,
                            Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                            //--
                            Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                            Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                            Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                            //--
                            Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                            ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                            NoInterno = x.HER_Documento.HER_NoInterno,
                            TramiteId = x.HER_TramiteId,
                            Tramite = x.HER_Tramite.HER_Nombre
                        })
                        .OrderByDescending(x => x.FechaEnvio)
                        .AsQueryable()
                   );
            }
            else if (tramite != null && tipo == null && estado == null && string.IsNullOrEmpty(busqueda) && categoria != null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                enviadosQuery = (
                            _context.HER_Envio
                            .Where(a => a.HER_De.HER_UserName == username
                                     && a.HER_De.HER_Activo == true
                                     && a.HER_EsOculto == false
                                     && a.HER_CarpetaId == null
                                     && a.HER_Documento.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                                    //--
                                    && a.HER_TramiteId == (int)tramite
                             )
                            .AsNoTracking()
                            .Select(x => new DocumentoEnviadoViewModel
                            {
                                EnvioId = x.HER_EnvioId,
                                FechaEnvio = x.HER_FechaEnvio,
                                TipoEnvio = x.HER_TipoEnvioId,
                                TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                                Estado = x.HER_EstadoEnvio.HER_Nombre,
                                Folio = x.HER_Documento.HER_Folio,
                                Asunto = x.HER_Documento.HER_Asunto,
                                Adjuntos = (x.HER_AnexoId != null) ? true : false,
                                Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                                //--
                                Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                                Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                                Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                                //--
                                Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                                ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                                NoInterno = x.HER_Documento.HER_NoInterno,
                                TramiteId = x.HER_TramiteId,
                                Tramite = x.HER_Tramite.HER_Nombre
                            })
                            .OrderByDescending(x => x.FechaEnvio)
                            .AsQueryable()
                    );
            }
            else if (tramite != null && tipo == null && estado == null && string.IsNullOrEmpty(busqueda) && categoria == null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                enviadosQuery = _context.HER_Envio
                    .Where(a => a.HER_De.HER_UserName == username
                             && a.HER_De.HER_Activo == true
                             && a.HER_EsOculto == false
                             && a.HER_CarpetaId == null
                             && (a.HER_FechaEnvio >= fechaInicioTemp && a.HER_FechaEnvio <= fechaFinTemp)
                             //--
                             && a.HER_TramiteId == (int)tramite
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoEnviadoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaEnvio = x.HER_FechaEnvio,
                        TipoEnvio = x.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        Folio = x.HER_Documento.HER_Folio,
                        Asunto = x.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_AnexoId != null) ? true : false,
                        Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                        Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                        Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                        //--
                        Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                        ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                        NoInterno = x.HER_Documento.HER_NoInterno,
                        TramiteId = x.HER_TramiteId,
                        Tramite = x.HER_Tramite.HER_Nombre
                    })
                    .OrderByDescending(x => x.FechaEnvio)
                    .AsQueryable();
            }
            else if (tramite != null && tipo == null && estado == null && string.IsNullOrEmpty(busqueda) && categoria == null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                enviadosQuery = _context.HER_Envio
                    .Where(a => a.HER_De.HER_UserName == username
                             && a.HER_De.HER_Activo == true
                             && a.HER_EsOculto == false
                             && a.HER_CarpetaId == null
                             //--
                             && a.HER_TramiteId == (int)tramite
                    )
                    .AsNoTracking()
                    .Select(x => new DocumentoEnviadoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaEnvio = x.HER_FechaEnvio,
                        TipoEnvio = x.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        Folio = x.HER_Documento.HER_Folio,
                        Asunto = x.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_AnexoId != null) ? true : false,
                        Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                        Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                        Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                        //--
                        Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                        ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                        NoInterno = x.HER_Documento.HER_NoInterno,
                        TramiteId = x.HER_TramiteId,
                        Tramite = x.HER_Tramite.HER_Nombre
                    })
                    .OrderByDescending(x => x.FechaEnvio)
                    .AsQueryable();
            }

            else if (tramite == null && tipo != null && estado != null && !string.IsNullOrEmpty(busqueda) && categoria != null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);
                busqueda = busqueda.Replace('+', ' ');

                enviadosQuery = _context.HER_Envio
                        .Where(a => a.HER_De.HER_UserName == username
                                 && a.HER_De.HER_Activo == true
                                 && a.HER_EsOculto == false
                                 && a.HER_CarpetaId == null
                                 && (EF.Functions.Like(a.HER_Documento.HER_Folio, "%" + busqueda + "%")
                                    || EF.Functions.Like(a.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                                    || EF.Functions.Like(a.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                                    || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_NombreCompleto).FirstOrDefault(), "%" + busqueda + "%")
                                    || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(), "%" + busqueda + "%")
                                    )
                                 && a.HER_Documento.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                                 && (a.HER_FechaEnvio >= fechaInicioTemp && a.HER_FechaEnvio <= fechaFinTemp)
                                 && a.HER_EstadoEnvioId == (int)estado
                                 && a.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                                 && a.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                                 )
                        .AsNoTracking()
                        .Select(x => new DocumentoEnviadoViewModel
                        {
                            EnvioId = x.HER_EnvioId,
                            FechaEnvio = x.HER_FechaEnvio,
                            TipoEnvio = x.HER_TipoEnvioId,
                            TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                            Estado = x.HER_EstadoEnvio.HER_Nombre,
                            Folio = x.HER_Documento.HER_Folio,
                            Asunto = x.HER_Documento.HER_Asunto,
                            Adjuntos = (x.HER_AnexoId != null) ? true : false,
                            Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                            //--
                            Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                            Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                            Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                            //--
                            Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                            ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                            NoInterno = x.HER_Documento.HER_NoInterno,
                            TramiteId = x.HER_TramiteId,
                            Tramite = x.HER_Tramite.HER_Nombre
                        })
                        .OrderByDescending(x => x.FechaEnvio)
                        .AsQueryable();
            }
            else if (tramite == null && tipo != null && estado != null && !string.IsNullOrEmpty(busqueda) && categoria != null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                busqueda = busqueda.Replace('+', ' ');

                enviadosQuery = (_context.HER_Envio
                    .Where(a => a.HER_De.HER_UserName == username
                             && a.HER_De.HER_Activo == true
                             && a.HER_EsOculto == false
                             && a.HER_CarpetaId == null
                             && (EF.Functions.Like(a.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(a.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(a.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_NombreCompleto).FirstOrDefault(), "%" + busqueda + "%")
                             || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(), "%" + busqueda + "%")
                             )
                             && a.HER_Documento.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && a.HER_EstadoEnvioId == (int)estado
                             && a.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && a.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             )
                    .AsNoTracking()
                    .Select(x => new DocumentoEnviadoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaEnvio = x.HER_FechaEnvio,
                        TipoEnvio = x.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        Folio = x.HER_Documento.HER_Folio,
                        Asunto = x.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_AnexoId != null) ? true : false,
                        Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                        Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                        Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                        //--
                        Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                        ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                        NoInterno = x.HER_Documento.HER_NoInterno,
                        TramiteId = x.HER_TramiteId,
                        Tramite = x.HER_Tramite.HER_Nombre
                    })
                    .OrderByDescending(x => x.FechaEnvio)
                    .AsQueryable()
                );
            }
            else if (tramite == null && tipo != null && estado != null && !string.IsNullOrEmpty(busqueda) && categoria == null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);
                busqueda = busqueda.Replace('+', ' ');

                enviadosQuery = _context.HER_Envio
                    .Where(a => a.HER_De.HER_UserName == username
                             && a.HER_De.HER_Activo == true
                             && a.HER_EsOculto == false
                             && a.HER_CarpetaId == null
                             && (EF.Functions.Like(a.HER_Documento.HER_Folio, "%" + busqueda + "%")
                                || EF.Functions.Like(a.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                                || EF.Functions.Like(a.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                                || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_NombreCompleto).FirstOrDefault(), "%" + busqueda + "%")
                                || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(), "%" + busqueda + "%")
                                )
                             && (a.HER_FechaEnvio >= fechaInicioTemp && a.HER_FechaEnvio <= fechaFinTemp)
                             && a.HER_EstadoEnvioId == (int)estado
                             && a.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && a.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                           )
                    .AsNoTracking()
                    .Select(x => new DocumentoEnviadoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaEnvio = x.HER_FechaEnvio,
                        TipoEnvio = x.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        Folio = x.HER_Documento.HER_Folio,
                        Asunto = x.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_AnexoId != null) ? true : false,
                        Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                        Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                        Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                        //--
                        Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                        ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                        NoInterno = x.HER_Documento.HER_NoInterno,
                        TramiteId = x.HER_TramiteId,
                        Tramite = x.HER_Tramite.HER_Nombre
                    })
                    .OrderByDescending(x => x.FechaEnvio)
                    .AsQueryable();
            }
            else if (tramite == null && tipo != null && estado != null && !string.IsNullOrEmpty(busqueda) && categoria == null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                busqueda = busqueda.Replace('+', ' ');

                enviadosQuery = _context.HER_Envio
                    .Where(a => a.HER_De.HER_UserName == username
                             && a.HER_De.HER_Activo == true
                             && a.HER_EsOculto == false
                             && a.HER_CarpetaId == null
                             && (EF.Functions.Like(a.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(a.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(a.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_NombreCompleto).FirstOrDefault(), "%" + busqueda + "%")
                             || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(), "%" + busqueda + "%")
                             )
                             && a.HER_EstadoEnvioId == (int)estado
                             && a.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && a.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoEnviadoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaEnvio = x.HER_FechaEnvio,
                        TipoEnvio = x.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        Folio = x.HER_Documento.HER_Folio,
                        Asunto = x.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_AnexoId != null) ? true : false,
                        Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                        Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                        Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                        //--
                        Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                        ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                        NoInterno = x.HER_Documento.HER_NoInterno,
                        TramiteId = x.HER_TramiteId,
                        Tramite = x.HER_Tramite.HER_Nombre
                    })
                    .OrderByDescending(x => x.FechaEnvio)
                    .AsQueryable();
            }
            else if (tramite == null && tipo != null && estado != null && string.IsNullOrEmpty(busqueda) && categoria != null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                enviadosQuery = (_context.HER_Envio
                        .Where(a => a.HER_De.HER_UserName == username
                                    && a.HER_De.HER_Activo == true
                                    && a.HER_EsOculto == false
                                    && a.HER_CarpetaId == null
                                    && a.HER_Documento.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                                    && (a.HER_FechaEnvio >= fechaInicioTemp && a.HER_FechaEnvio <= fechaFinTemp)
                                    && a.HER_EstadoEnvioId == (int)estado
                                    && a.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                                    && a.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                                    )
                        .AsNoTracking()
                        .Select(x => new DocumentoEnviadoViewModel
                        {
                            EnvioId = x.HER_EnvioId,
                            FechaEnvio = x.HER_FechaEnvio,
                            TipoEnvio = x.HER_TipoEnvioId,
                            TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                            Estado = x.HER_EstadoEnvio.HER_Nombre,
                            Folio = x.HER_Documento.HER_Folio,
                            Asunto = x.HER_Documento.HER_Asunto,
                            Adjuntos = (x.HER_AnexoId != null) ? true : false,
                            Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                            //--
                            Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                            Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                            Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                            //--
                            Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                            ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                            NoInterno = x.HER_Documento.HER_NoInterno,
                            TramiteId = x.HER_TramiteId,
                            Tramite = x.HER_Tramite.HER_Nombre
                        })
                        .OrderByDescending(x => x.FechaEnvio)
                        .AsQueryable()
                   );
            }
            else if (tramite == null && tipo != null && estado != null && string.IsNullOrEmpty(busqueda) && categoria != null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                enviadosQuery = (
                            _context.HER_Envio
                            .Where(a => a.HER_De.HER_UserName == username
                                     && a.HER_De.HER_Activo == true
                                     && a.HER_EsOculto == false
                                     && a.HER_CarpetaId == null
                                     && a.HER_Documento.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                                     && a.HER_EstadoEnvioId == (int)estado
                                     && a.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                                     && a.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                                     )
                            .AsNoTracking()
                            .Select(x => new DocumentoEnviadoViewModel
                            {
                                EnvioId = x.HER_EnvioId,
                                FechaEnvio = x.HER_FechaEnvio,
                                TipoEnvio = x.HER_TipoEnvioId,
                                TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                                Estado = x.HER_EstadoEnvio.HER_Nombre,
                                Folio = x.HER_Documento.HER_Folio,
                                Asunto = x.HER_Documento.HER_Asunto,
                                Adjuntos = (x.HER_AnexoId != null) ? true : false,
                                Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                                //--
                                Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                                Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                                Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                                //--
                                Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                                ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                                NoInterno = x.HER_Documento.HER_NoInterno,
                                TramiteId = x.HER_TramiteId,
                                Tramite = x.HER_Tramite.HER_Nombre
                            })
                            .OrderByDescending(x => x.FechaEnvio)
                            .AsQueryable()
                    );
            }
            else if (tramite == null && tipo != null && estado != null && string.IsNullOrEmpty(busqueda) && categoria == null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                enviadosQuery = _context.HER_Envio
                    .Where(a => a.HER_De.HER_UserName == username
                             && a.HER_De.HER_Activo == true
                             && a.HER_EsOculto == false
                             && a.HER_CarpetaId == null
                             && (a.HER_FechaEnvio >= fechaInicioTemp && a.HER_FechaEnvio <= fechaFinTemp)
                             && a.HER_EstadoEnvioId == (int)estado
                             && a.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && a.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             )
                    .AsNoTracking()
                    .Select(x => new DocumentoEnviadoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaEnvio = x.HER_FechaEnvio,
                        TipoEnvio = x.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        Folio = x.HER_Documento.HER_Folio,
                        Asunto = x.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_AnexoId != null) ? true : false,
                        Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                        Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                        Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                        //--
                        Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                        ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                        NoInterno = x.HER_Documento.HER_NoInterno,
                        TramiteId = x.HER_TramiteId,
                        Tramite = x.HER_Tramite.HER_Nombre
                    })
                    .OrderByDescending(x => x.FechaEnvio)
                    .AsQueryable();
            }
            else if (tramite == null && tipo != null && estado != null && string.IsNullOrEmpty(busqueda) && categoria == null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                enviadosQuery = _context.HER_Envio
                    .Where(a => a.HER_De.HER_UserName == username
                             && a.HER_De.HER_Activo == true
                             && a.HER_EsOculto == false
                             && a.HER_CarpetaId == null
                             && a.HER_EstadoEnvioId == (int)estado
                             && a.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && a.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             )
                    .AsNoTracking()
                    .Select(x => new DocumentoEnviadoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaEnvio = x.HER_FechaEnvio,
                        TipoEnvio = x.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        Folio = x.HER_Documento.HER_Folio,
                        Asunto = x.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_AnexoId != null) ? true : false,
                        Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                        Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                        Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                        //--
                        Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                        ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                        NoInterno = x.HER_Documento.HER_NoInterno,
                        TramiteId = x.HER_TramiteId,
                        Tramite = x.HER_Tramite.HER_Nombre
                    })
                    .OrderByDescending(x => x.FechaEnvio)
                    .AsQueryable();
            }
            else if (tramite == null && tipo != null && estado == null && !string.IsNullOrEmpty(busqueda) && categoria != null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);
                busqueda = busqueda.Replace('+', ' ');

                enviadosQuery = (_context.HER_Envio
                        .Where(a => a.HER_De.HER_UserName == username
                                 && a.HER_De.HER_Activo == true
                                 && a.HER_EsOculto == false
                                 && a.HER_CarpetaId == null
                                 && (EF.Functions.Like(a.HER_Documento.HER_Folio, "%" + busqueda + "%")
                                    || EF.Functions.Like(a.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                                    || EF.Functions.Like(a.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                                    || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_NombreCompleto).FirstOrDefault(), "%" + busqueda + "%")
                                    || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(), "%" + busqueda + "%")
                                    )
                                 && a.HER_Documento.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                                 && (a.HER_FechaEnvio >= fechaInicioTemp && a.HER_FechaEnvio <= fechaFinTemp)
                                 && a.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                                 && a.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                                 )
                        .AsNoTracking()
                        .Select(x => new DocumentoEnviadoViewModel
                        {
                            EnvioId = x.HER_EnvioId,
                            FechaEnvio = x.HER_FechaEnvio,
                            TipoEnvio = x.HER_TipoEnvioId,
                            TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                            Estado = x.HER_EstadoEnvio.HER_Nombre,
                            Folio = x.HER_Documento.HER_Folio,
                            Asunto = x.HER_Documento.HER_Asunto,
                            Adjuntos = (x.HER_AnexoId != null) ? true : false,
                            Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                            //--
                            Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                            Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                            Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                            //--
                            Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                            ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                            NoInterno = x.HER_Documento.HER_NoInterno,
                            TramiteId = x.HER_TramiteId,
                            Tramite = x.HER_Tramite.HER_Nombre
                        })
                        .OrderByDescending(x => x.FechaEnvio)
                        .AsQueryable()
                    );
            }
            else if (tramite == null && tipo != null && estado == null && !string.IsNullOrEmpty(busqueda) && categoria != null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                busqueda = busqueda.Replace('+', ' ');

                enviadosQuery = (_context.HER_Envio
                    .Where(a => a.HER_De.HER_UserName == username
                             && a.HER_De.HER_Activo == true
                             && a.HER_EsOculto == false
                             && a.HER_CarpetaId == null
                             && (EF.Functions.Like(a.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(a.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(a.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_NombreCompleto).FirstOrDefault(), "%" + busqueda + "%")
                             || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(), "%" + busqueda + "%")
                             )
                             && a.HER_Documento.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && a.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && a.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             )
                    .AsNoTracking()
                    .Select(x => new DocumentoEnviadoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaEnvio = x.HER_FechaEnvio,
                        TipoEnvio = x.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        Folio = x.HER_Documento.HER_Folio,
                        Asunto = x.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_AnexoId != null) ? true : false,
                        Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                        Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                        Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                        //--
                        Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                        ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                        NoInterno = x.HER_Documento.HER_NoInterno,
                        TramiteId = x.HER_TramiteId,
                        Tramite = x.HER_Tramite.HER_Nombre
                    })
                    .OrderByDescending(x => x.FechaEnvio)
                    .AsQueryable()
                );
            }
            else if (tramite == null && tipo != null && estado == null && !string.IsNullOrEmpty(busqueda) && categoria == null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);
                busqueda = busqueda.Replace('+', ' ');

                enviadosQuery = _context.HER_Envio
                    .Where(a => a.HER_De.HER_UserName == username
                             && a.HER_De.HER_Activo == true
                             && a.HER_EsOculto == false
                             && a.HER_CarpetaId == null
                             && (EF.Functions.Like(a.HER_Documento.HER_Folio, "%" + busqueda + "%")
                                || EF.Functions.Like(a.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                                || EF.Functions.Like(a.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                                || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_NombreCompleto).FirstOrDefault(), "%" + busqueda + "%")
                                || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(), "%" + busqueda + "%")
                                )
                             && (a.HER_FechaEnvio >= fechaInicioTemp && a.HER_FechaEnvio <= fechaFinTemp)
                             && a.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && a.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             )
                    .AsNoTracking()
                    .Select(x => new DocumentoEnviadoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaEnvio = x.HER_FechaEnvio,
                        TipoEnvio = x.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        Folio = x.HER_Documento.HER_Folio,
                        Asunto = x.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_AnexoId != null) ? true : false,
                        Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                        Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                        Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                        //--
                        Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                        ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                        NoInterno = x.HER_Documento.HER_NoInterno,
                        TramiteId = x.HER_TramiteId,
                        Tramite = x.HER_Tramite.HER_Nombre
                    })
                    .OrderByDescending(x => x.FechaEnvio)
                    .AsQueryable();
            }
            else if (tramite == null && tipo != null && estado == null && !string.IsNullOrEmpty(busqueda) && categoria == null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                busqueda = busqueda.Replace('+', ' ');

                enviadosQuery = _context.HER_Envio
                    .Where(a => a.HER_De.HER_UserName == username
                             && a.HER_De.HER_Activo == true
                             && a.HER_EsOculto == false
                             && a.HER_CarpetaId == null
                             && (EF.Functions.Like(a.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(a.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(a.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_NombreCompleto).FirstOrDefault(), "%" + busqueda + "%")
                             || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(), "%" + busqueda + "%")
                             )
                             && a.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && a.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoEnviadoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaEnvio = x.HER_FechaEnvio,
                        TipoEnvio = x.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        Folio = x.HER_Documento.HER_Folio,
                        Asunto = x.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_AnexoId != null) ? true : false,
                        Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                        Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                        Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                        //--
                        Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                        ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                        NoInterno = x.HER_Documento.HER_NoInterno,
                        TramiteId = x.HER_TramiteId,
                        Tramite = x.HER_Tramite.HER_Nombre
                    })
                    .OrderByDescending(x => x.FechaEnvio)
                    .AsQueryable();
            }
            else if (tramite == null && tipo != null && estado == null && string.IsNullOrEmpty(busqueda) && categoria != null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                enviadosQuery = (_context.HER_Envio
                        .Where(a => a.HER_De.HER_UserName == username
                                    && a.HER_De.HER_Activo == true
                                    && a.HER_EsOculto == false
                                    && a.HER_CarpetaId == null
                                    && a.HER_Documento.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                                    && (a.HER_FechaEnvio >= fechaInicioTemp && a.HER_FechaEnvio <= fechaFinTemp)
                                    && a.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                                    && a.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                                    )
                        .AsNoTracking()
                        .Select(x => new DocumentoEnviadoViewModel
                        {
                            EnvioId = x.HER_EnvioId,
                            FechaEnvio = x.HER_FechaEnvio,
                            TipoEnvio = x.HER_TipoEnvioId,
                            TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                            Estado = x.HER_EstadoEnvio.HER_Nombre,
                            Folio = x.HER_Documento.HER_Folio,
                            Asunto = x.HER_Documento.HER_Asunto,
                            Adjuntos = (x.HER_AnexoId != null) ? true : false,
                            Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                            //--
                            Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                            Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                            Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                            //--
                            Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                            ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                            NoInterno = x.HER_Documento.HER_NoInterno,
                            TramiteId = x.HER_TramiteId,
                            Tramite = x.HER_Tramite.HER_Nombre
                        })
                        .OrderByDescending(x => x.FechaEnvio)
                        .AsQueryable()
                   );
            }
            else if (tramite == null && tipo != null && estado == null && string.IsNullOrEmpty(busqueda) && categoria != null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                enviadosQuery = (
                            _context.HER_Envio
                            .Where(a => a.HER_De.HER_UserName == username
                                       && a.HER_De.HER_Activo == true
                                 && a.HER_EsOculto == false
                                     && a.HER_CarpetaId == null
                                     && a.HER_Documento.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                                     && a.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                                     && a.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                                     )
                            .AsNoTracking()
                            .Select(x => new DocumentoEnviadoViewModel
                            {
                                EnvioId = x.HER_EnvioId,
                                FechaEnvio = x.HER_FechaEnvio,
                                TipoEnvio = x.HER_TipoEnvioId,
                                TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                                Estado = x.HER_EstadoEnvio.HER_Nombre,
                                Folio = x.HER_Documento.HER_Folio,
                                Asunto = x.HER_Documento.HER_Asunto,
                                Adjuntos = (x.HER_AnexoId != null) ? true : false,
                                Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                                //--
                                Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                                Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                                Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                                //--
                                Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                                ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                                NoInterno = x.HER_Documento.HER_NoInterno,
                                TramiteId = x.HER_TramiteId,
                                Tramite = x.HER_Tramite.HER_Nombre
                            })
                            .OrderByDescending(x => x.FechaEnvio)
                            .AsQueryable()
                    );
            }
            else if (tramite == null && tipo != null && estado == null && string.IsNullOrEmpty(busqueda) && categoria == null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                enviadosQuery = _context.HER_Envio
                    .Where(a => a.HER_De.HER_UserName == username
                             && a.HER_De.HER_Activo == true
                             && a.HER_EsOculto == false
                             && a.HER_CarpetaId == null
                             && (a.HER_FechaEnvio >= fechaInicioTemp && a.HER_FechaEnvio <= fechaFinTemp)
                             && a.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && a.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             )
                    .AsNoTracking()
                    .Select(x => new DocumentoEnviadoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaEnvio = x.HER_FechaEnvio,
                        TipoEnvio = x.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        Folio = x.HER_Documento.HER_Folio,
                        Asunto = x.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_AnexoId != null) ? true : false,
                        Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                        Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                        Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                        //--
                        Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                        ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                        NoInterno = x.HER_Documento.HER_NoInterno,
                        TramiteId = x.HER_TramiteId,
                        Tramite = x.HER_Tramite.HER_Nombre
                    })
                    .OrderByDescending(x => x.FechaEnvio)
                    .AsQueryable();
            }
            else if (tramite == null && tipo != null && estado == null && string.IsNullOrEmpty(busqueda) && categoria == null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                enviadosQuery = _context.HER_Envio
                    .Where(a => a.HER_De.HER_UserName == username
                             && a.HER_De.HER_Activo == true
                             && a.HER_EsOculto == false
                             && a.HER_CarpetaId == null
                             && a.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                             && a.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                             )
                    .AsNoTracking()
                    .Select(x => new DocumentoEnviadoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaEnvio = x.HER_FechaEnvio,
                        TipoEnvio = x.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        Folio = x.HER_Documento.HER_Folio,
                        Asunto = x.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_AnexoId != null) ? true : false,
                        Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                        Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                        Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                        //--
                        Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                        ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                        NoInterno = x.HER_Documento.HER_NoInterno,
                        TramiteId = x.HER_TramiteId,
                        Tramite = x.HER_Tramite.HER_Nombre
                    })
                    .OrderByDescending(x => x.FechaEnvio)
                    .AsQueryable();
            }
            else if (tramite == null && tipo == null && estado != null && !string.IsNullOrEmpty(busqueda) && categoria != null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);
                busqueda = busqueda.Replace('+', ' ');

                enviadosQuery = (_context.HER_Envio
                        .Where(a => a.HER_De.HER_UserName == username
                                && a.HER_De.HER_Activo == true
                                 && a.HER_EsOculto == false
                                 && a.HER_CarpetaId == null
                                 && (EF.Functions.Like(a.HER_Documento.HER_Folio, "%" + busqueda + "%")
                                    || EF.Functions.Like(a.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                                    || EF.Functions.Like(a.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                                    || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_NombreCompleto).FirstOrDefault(), "%" + busqueda + "%")
                                    || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(), "%" + busqueda + "%")
                                    )
                                 && a.HER_Documento.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                                 && (a.HER_FechaEnvio >= fechaInicioTemp && a.HER_FechaEnvio <= fechaFinTemp)
                                 && a.HER_EstadoEnvioId == (int)estado)
                        .AsNoTracking()
                        .Select(x => new DocumentoEnviadoViewModel
                        {
                            EnvioId = x.HER_EnvioId,
                            FechaEnvio = x.HER_FechaEnvio,
                            TipoEnvio = x.HER_TipoEnvioId,
                            TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                            Estado = x.HER_EstadoEnvio.HER_Nombre,
                            Folio = x.HER_Documento.HER_Folio,
                            Asunto = x.HER_Documento.HER_Asunto,
                            Adjuntos = (x.HER_AnexoId != null) ? true : false,
                            Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                            //--
                            Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                            Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                            Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                            //--
                            Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                            ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                            NoInterno = x.HER_Documento.HER_NoInterno,
                            TramiteId = x.HER_TramiteId,
                            Tramite = x.HER_Tramite.HER_Nombre
                        })
                        .OrderByDescending(x => x.FechaEnvio)
                        .AsQueryable()
                    );
            }
            else if (tramite == null && tipo == null && estado != null && !string.IsNullOrEmpty(busqueda) && categoria != null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                busqueda = busqueda.Replace('+', ' ');

                enviadosQuery = (_context.HER_Envio
                    .Where(a => a.HER_De.HER_UserName == username
                             && a.HER_De.HER_Activo == true
                             && a.HER_EsOculto == false
                             && a.HER_CarpetaId == null
                             && (EF.Functions.Like(a.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(a.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(a.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_NombreCompleto).FirstOrDefault(), "%" + busqueda + "%")
                             || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(), "%" + busqueda + "%")
                             )
                             && a.HER_Documento.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             && a.HER_EstadoEnvioId == (int)estado)
                    .AsNoTracking()
                    .Select(x => new DocumentoEnviadoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaEnvio = x.HER_FechaEnvio,
                        TipoEnvio = x.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        Folio = x.HER_Documento.HER_Folio,
                        Asunto = x.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_AnexoId != null) ? true : false,
                        Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                        Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                        Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                        //--
                        Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                        ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                        NoInterno = x.HER_Documento.HER_NoInterno,
                        TramiteId = x.HER_TramiteId,
                        Tramite = x.HER_Tramite.HER_Nombre
                    })
                    .OrderByDescending(x => x.FechaEnvio)
                    .AsQueryable()
                );
            }
            else if (tramite == null && tipo == null && estado != null && !string.IsNullOrEmpty(busqueda) && categoria == null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);
                busqueda = busqueda.Replace('+', ' ');

                enviadosQuery = _context.HER_Envio
                    .Where(a => a.HER_De.HER_UserName == username
                             && a.HER_De.HER_Activo == true
                             && a.HER_EsOculto == false
                             && a.HER_CarpetaId == null
                             && (EF.Functions.Like(a.HER_Documento.HER_Folio, "%" + busqueda + "%")
                                || EF.Functions.Like(a.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                                || EF.Functions.Like(a.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                                || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_NombreCompleto).FirstOrDefault(), "%" + busqueda + "%")
                                || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(), "%" + busqueda + "%")
                                )
                             && (a.HER_FechaEnvio >= fechaInicioTemp && a.HER_FechaEnvio <= fechaFinTemp)
                             && a.HER_EstadoEnvioId == (int)estado)
                    .AsNoTracking()
                    .Select(x => new DocumentoEnviadoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaEnvio = x.HER_FechaEnvio,
                        TipoEnvio = x.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        Folio = x.HER_Documento.HER_Folio,
                        Asunto = x.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_AnexoId != null) ? true : false,
                        Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                        Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                        Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                        //--
                        Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                        ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                        NoInterno = x.HER_Documento.HER_NoInterno,
                        TramiteId = x.HER_TramiteId,
                        Tramite = x.HER_Tramite.HER_Nombre
                    })
                    .OrderByDescending(x => x.FechaEnvio)
                    .AsQueryable();
            }
            else if (tramite == null && tipo == null && estado != null && !string.IsNullOrEmpty(busqueda) && categoria == null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                busqueda = busqueda.Replace('+', ' ');

                enviadosQuery = _context.HER_Envio
                    .Where(a => a.HER_De.HER_UserName == username
                             && a.HER_De.HER_Activo == true
                             && a.HER_EsOculto == false
                             && a.HER_CarpetaId == null
                             && (EF.Functions.Like(a.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(a.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(a.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_NombreCompleto).FirstOrDefault(), "%" + busqueda + "%")
                             || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(), "%" + busqueda + "%")
                             )
                             && a.HER_EstadoEnvioId == (int)estado
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoEnviadoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaEnvio = x.HER_FechaEnvio,
                        TipoEnvio = x.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        Folio = x.HER_Documento.HER_Folio,
                        Asunto = x.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_AnexoId != null) ? true : false,
                        Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                        Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                        Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                        //--
                        Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                        ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                        NoInterno = x.HER_Documento.HER_NoInterno,
                        TramiteId = x.HER_TramiteId,
                        Tramite = x.HER_Tramite.HER_Nombre
                    })
                    .OrderByDescending(x => x.FechaEnvio)
                    .AsQueryable();
            }
            else if (tramite == null && tipo == null && estado != null && string.IsNullOrEmpty(busqueda) && categoria != null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                enviadosQuery = (_context.HER_Envio
                        .Where(a => a.HER_De.HER_UserName == username
                                    && a.HER_De.HER_Activo == true
                                    && a.HER_EsOculto == false
                                    && a.HER_CarpetaId == null
                                    && a.HER_Documento.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                                    && (a.HER_FechaEnvio >= fechaInicioTemp && a.HER_FechaEnvio <= fechaFinTemp)
                                    && a.HER_EstadoEnvioId == (int)estado)
                        .AsNoTracking()
                        .Select(x => new DocumentoEnviadoViewModel
                        {
                            EnvioId = x.HER_EnvioId,
                            FechaEnvio = x.HER_FechaEnvio,
                            TipoEnvio = x.HER_TipoEnvioId,
                            TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                            Estado = x.HER_EstadoEnvio.HER_Nombre,
                            Folio = x.HER_Documento.HER_Folio,
                            Asunto = x.HER_Documento.HER_Asunto,
                            Adjuntos = (x.HER_AnexoId != null) ? true : false,
                            Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                            //--
                            Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                            Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                            Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                            //--
                            Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                            ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                            NoInterno = x.HER_Documento.HER_NoInterno,
                            TramiteId = x.HER_TramiteId,
                            Tramite = x.HER_Tramite.HER_Nombre
                        })
                        .OrderByDescending(x => x.FechaEnvio)
                        .AsQueryable()
                   );
            }
            else if (tramite == null && tipo == null && estado != null && string.IsNullOrEmpty(busqueda) && categoria != null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                enviadosQuery = (
                            _context.HER_Envio
                            .Where(a => a.HER_De.HER_UserName == username
                                     && a.HER_De.HER_Activo == true
                                     && a.HER_EsOculto == false
                                     && a.HER_CarpetaId == null
                                     && a.HER_Documento.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                                     && a.HER_EstadoEnvioId == (int)estado)
                            .AsNoTracking()
                            .Select(x => new DocumentoEnviadoViewModel
                            {
                                EnvioId = x.HER_EnvioId,
                                FechaEnvio = x.HER_FechaEnvio,
                                TipoEnvio = x.HER_TipoEnvioId,
                                TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                                Estado = x.HER_EstadoEnvio.HER_Nombre,
                                Folio = x.HER_Documento.HER_Folio,
                                Asunto = x.HER_Documento.HER_Asunto,
                                Adjuntos = (x.HER_AnexoId != null) ? true : false,
                                Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                                //--
                                Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                                Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                                Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                                //--
                                Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                                ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                                NoInterno = x.HER_Documento.HER_NoInterno,
                                TramiteId = x.HER_TramiteId,
                                Tramite = x.HER_Tramite.HER_Nombre
                            })
                            .OrderByDescending(x => x.FechaEnvio)
                            .AsQueryable()
                    );
            }
            else if (tramite == null && tipo == null && estado != null && string.IsNullOrEmpty(busqueda) && categoria == null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                enviadosQuery = _context.HER_Envio
                    .Where(a => a.HER_De.HER_UserName == username
                             && a.HER_De.HER_Activo == true
                             && a.HER_EsOculto == false
                             && a.HER_CarpetaId == null
                             && (a.HER_FechaEnvio >= fechaInicioTemp && a.HER_FechaEnvio <= fechaFinTemp)
                             && a.HER_EstadoEnvioId == (int)estado)
                    .AsNoTracking()
                    .Select(x => new DocumentoEnviadoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaEnvio = x.HER_FechaEnvio,
                        TipoEnvio = x.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        Folio = x.HER_Documento.HER_Folio,
                        Asunto = x.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_AnexoId != null) ? true : false,
                        Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                        Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                        Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                        //--
                        Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                        ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                        NoInterno = x.HER_Documento.HER_NoInterno,
                        TramiteId = x.HER_TramiteId,
                        Tramite = x.HER_Tramite.HER_Nombre
                    })
                    .OrderByDescending(x => x.FechaEnvio)
                    .AsQueryable();
            }
            else if (tramite == null && tipo == null && estado != null && string.IsNullOrEmpty(busqueda) && categoria == null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                enviadosQuery = _context.HER_Envio
                    .Where(a => a.HER_De.HER_UserName == username
                             && a.HER_De.HER_Activo == true
                             && a.HER_EsOculto == false
                             && a.HER_CarpetaId == null
                             && a.HER_EstadoEnvioId == (int)estado)
                    .AsNoTracking()
                    .Select(x => new DocumentoEnviadoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaEnvio = x.HER_FechaEnvio,
                        TipoEnvio = x.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        Folio = x.HER_Documento.HER_Folio,
                        Asunto = x.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_AnexoId != null) ? true : false,
                        Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                        Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                        Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                        //--
                        Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                        ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                        NoInterno = x.HER_Documento.HER_NoInterno,
                        TramiteId = x.HER_TramiteId,
                        Tramite = x.HER_Tramite.HER_Nombre
                    })
                    .OrderByDescending(x => x.FechaEnvio)
                    .AsQueryable();
            }
            else if (tramite == null && tipo == null && estado == null && !string.IsNullOrEmpty(busqueda) && categoria != null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);
                busqueda = busqueda.Replace('+', ' ');

                enviadosQuery = (_context.HER_Envio
                        .Where(a => a.HER_De.HER_UserName == username
                                 && a.HER_De.HER_Activo == true
                                 && a.HER_EsOculto == false
                                 && a.HER_CarpetaId == null
                                 && (EF.Functions.Like(a.HER_Documento.HER_Folio, "%" + busqueda + "%")
                                    || EF.Functions.Like(a.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                                    || EF.Functions.Like(a.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                                    || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_NombreCompleto).FirstOrDefault(), "%" + busqueda + "%")
                                    || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(), "%" + busqueda + "%")
                                    )
                                 && a.HER_Documento.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                                 && (a.HER_FechaEnvio >= fechaInicioTemp && a.HER_FechaEnvio <= fechaFinTemp)
                                 )
                        .AsNoTracking()
                        .Select(x => new DocumentoEnviadoViewModel
                        {
                            EnvioId = x.HER_EnvioId,
                            FechaEnvio = x.HER_FechaEnvio,
                            TipoEnvio = x.HER_TipoEnvioId,
                            TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                            Estado = x.HER_EstadoEnvio.HER_Nombre,
                            Folio = x.HER_Documento.HER_Folio,
                            Asunto = x.HER_Documento.HER_Asunto,
                            Adjuntos = (x.HER_AnexoId != null) ? true : false,
                            Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                            //--
                            Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                            Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                            Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                            //--
                            Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                            ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                            NoInterno = x.HER_Documento.HER_NoInterno,
                            TramiteId = x.HER_TramiteId,
                            Tramite = x.HER_Tramite.HER_Nombre
                        })
                        .OrderByDescending(x => x.FechaEnvio)
                        .AsQueryable()
                    );
            }
            else if (tramite == null && tipo == null && estado == null && !string.IsNullOrEmpty(busqueda) && categoria != null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                busqueda = busqueda.Replace('+', ' ');

                enviadosQuery = (_context.HER_Envio
                    .Where(a => a.HER_De.HER_UserName == username
                             && a.HER_De.HER_Activo == true
                             && a.HER_EsOculto == false
                             && a.HER_CarpetaId == null
                             && (EF.Functions.Like(a.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(a.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(a.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_NombreCompleto).FirstOrDefault(), "%" + busqueda + "%")
                             || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(), "%" + busqueda + "%")
                             )
                             && a.HER_Documento.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                             )
                    .AsNoTracking()
                    .Select(x => new DocumentoEnviadoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaEnvio = x.HER_FechaEnvio,
                        TipoEnvio = x.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        Folio = x.HER_Documento.HER_Folio,
                        Asunto = x.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_AnexoId != null) ? true : false,
                        Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                        Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                        Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                        //--
                        Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                        ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                        NoInterno = x.HER_Documento.HER_NoInterno,
                        TramiteId = x.HER_TramiteId,
                        Tramite = x.HER_Tramite.HER_Nombre
                    })
                    .OrderByDescending(x => x.FechaEnvio)
                    .AsQueryable()
                );
            }
            else if (tramite == null && tipo == null && estado == null && !string.IsNullOrEmpty(busqueda) && categoria == null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);
                busqueda = busqueda.Replace('+', ' ');

                enviadosQuery = _context.HER_Envio
                    .Where(a => a.HER_De.HER_UserName == username
                             && a.HER_De.HER_Activo == true
                             && a.HER_EsOculto == false
                             && a.HER_CarpetaId == null
                             && (EF.Functions.Like(a.HER_Documento.HER_Folio, "%" + busqueda + "%")
                                || EF.Functions.Like(a.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                                || EF.Functions.Like(a.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                                || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_NombreCompleto).FirstOrDefault(), "%" + busqueda + "%")
                                || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(), "%" + busqueda + "%")
                              )
                             && (a.HER_FechaEnvio >= fechaInicioTemp && a.HER_FechaEnvio <= fechaFinTemp))
                    .AsNoTracking()
                    .Select(x => new DocumentoEnviadoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaEnvio = x.HER_FechaEnvio,
                        TipoEnvio = x.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        Folio = x.HER_Documento.HER_Folio,
                        Asunto = x.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_AnexoId != null) ? true : false,
                        Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                        Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                        Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                        //--
                        Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                        ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                        NoInterno = x.HER_Documento.HER_NoInterno,
                        TramiteId = x.HER_TramiteId,
                        Tramite = x.HER_Tramite.HER_Nombre
                    })
                    .OrderByDescending(x => x.FechaEnvio)
                    .AsQueryable();
            }
            else if (tramite == null && tipo == null && estado == null && !string.IsNullOrEmpty(busqueda) && categoria == null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                busqueda = busqueda.Replace('+', ' ');

                enviadosQuery = _context.HER_Envio
                    .Where(a => a.HER_De.HER_UserName == username
                             && a.HER_De.HER_Activo == true
                             && a.HER_EsOculto == false
                             && a.HER_CarpetaId == null
                             && (EF.Functions.Like(a.HER_Documento.HER_Folio, "%" + busqueda + "%")
                             || EF.Functions.Like(a.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                             || EF.Functions.Like(a.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                             || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_NombreCompleto).FirstOrDefault(), "%" + busqueda + "%")
                             || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(), "%" + busqueda + "%")
                             )
                     )
                    .AsNoTracking()
                    .Select(x => new DocumentoEnviadoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaEnvio = x.HER_FechaEnvio,
                        TipoEnvio = x.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        Folio = x.HER_Documento.HER_Folio,
                        Asunto = x.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_AnexoId != null) ? true : false,
                        Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                        Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                        Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                        //--
                        Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                        ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                        NoInterno = x.HER_Documento.HER_NoInterno,
                        TramiteId = x.HER_TramiteId,
                        Tramite = x.HER_Tramite.HER_Nombre
                    })
                    .OrderByDescending(x => x.FechaEnvio)
                    .AsQueryable();
            }
            else if (tramite == null && tipo == null && estado == null && string.IsNullOrEmpty(busqueda) && categoria != null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                enviadosQuery = (_context.HER_Envio
                        .Where(a => a.HER_De.HER_UserName == username
                                    && a.HER_De.HER_Activo == true
                                    && a.HER_EsOculto == false
                                    && a.HER_CarpetaId == null
                                    && a.HER_Documento.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                                    && (a.HER_FechaEnvio >= fechaInicioTemp && a.HER_FechaEnvio <= fechaFinTemp)
                                )
                        .AsNoTracking()
                        .Select(x => new DocumentoEnviadoViewModel
                        {
                            EnvioId = x.HER_EnvioId,
                            FechaEnvio = x.HER_FechaEnvio,
                            TipoEnvio = x.HER_TipoEnvioId,
                            TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                            Estado = x.HER_EstadoEnvio.HER_Nombre,
                            Folio = x.HER_Documento.HER_Folio,
                            Asunto = x.HER_Documento.HER_Asunto,
                            Adjuntos = (x.HER_AnexoId != null) ? true : false,
                            Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                            //--
                            Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                            Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                            Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                            //--
                            Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                            ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                            NoInterno = x.HER_Documento.HER_NoInterno,
                            TramiteId = x.HER_TramiteId,
                            Tramite = x.HER_Tramite.HER_Nombre
                        })
                        .OrderByDescending(x => x.FechaEnvio)
                        .AsQueryable()
                   );
            }
            else if (tramite == null && tipo == null && estado == null && string.IsNullOrEmpty(busqueda) && categoria != null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                enviadosQuery = (
                            _context.HER_Envio
                            .Where(a => a.HER_De.HER_UserName == username
                                     && a.HER_De.HER_Activo == true
                                     && a.HER_EsOculto == false
                                     && a.HER_CarpetaId == null
                                     && a.HER_Documento.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria))
                            .AsNoTracking()
                            .Select(x => new DocumentoEnviadoViewModel
                            {
                                EnvioId = x.HER_EnvioId,
                                FechaEnvio = x.HER_FechaEnvio,
                                TipoEnvio = x.HER_TipoEnvioId,
                                TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                                Estado = x.HER_EstadoEnvio.HER_Nombre,
                                Folio = x.HER_Documento.HER_Folio,
                                Asunto = x.HER_Documento.HER_Asunto,
                                Adjuntos = (x.HER_AnexoId != null) ? true : false,
                                Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                                //--
                                Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                                Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                                Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                                //--
                                Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                                ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                                NoInterno = x.HER_Documento.HER_NoInterno,
                                TramiteId = x.HER_TramiteId,
                                Tramite = x.HER_Tramite.HER_Nombre
                            })
                            .OrderByDescending(x => x.FechaEnvio)
                            .AsQueryable()
                    );
            }
            else if (tramite == null && tipo == null && estado == null && string.IsNullOrEmpty(busqueda) && categoria == null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                enviadosQuery = _context.HER_Envio
                    .Where(a => a.HER_De.HER_UserName == username
                             && a.HER_De.HER_Activo == true
                             && a.HER_EsOculto == false
                             && a.HER_CarpetaId == null
                             && (a.HER_FechaEnvio >= fechaInicioTemp && a.HER_FechaEnvio <= fechaFinTemp))
                    .AsNoTracking()
                    .Select(x => new DocumentoEnviadoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaEnvio = x.HER_FechaEnvio,
                        TipoEnvio = x.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        Folio = x.HER_Documento.HER_Folio,
                        Asunto = x.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_AnexoId != null) ? true : false,
                        Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                        Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                        Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                        //--
                        Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                        ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                        NoInterno = x.HER_Documento.HER_NoInterno,
                        TramiteId = x.HER_TramiteId,
                        Tramite = x.HER_Tramite.HER_Nombre
                    })
                    .OrderByDescending(x => x.FechaEnvio)
                    .AsQueryable();
            }
            else
            {
                enviadosQuery = _context.HER_Envio
                    .Where(a => a.HER_De.HER_UserName == username
                             && a.HER_De.HER_Activo == true
                             && a.HER_EsOculto == false
                             && a.HER_CarpetaId == null)
                    .AsNoTracking()
                    .Select(x => new DocumentoEnviadoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaEnvio = x.HER_FechaEnvio,
                        TipoEnvio = x.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        Folio = x.HER_Documento.HER_Folio,
                        Asunto = x.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_AnexoId != null) ? true : false,
                        Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                        Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                        Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                        //--
                        Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                        ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                        NoInterno = x.HER_Documento.HER_NoInterno,
                        TramiteId = x.HER_TramiteId,
                        Tramite = x.HER_Tramite.HER_Nombre
                    })
                    .OrderByDescending(x => x.FechaEnvio)
                    .AsQueryable();
            }

            return enviadosQuery;
        }        //Enviados en Carpetas
        public IQueryable<DocumentoEnviadoViewModel> ListadoDocumentosEnviadosEnCarpetas(string username, string busqueda, int? categoria, string fechaini, string fechafin, int? estado, int? tipo, int? tramite)
        {
            IQueryable<DocumentoEnviadoViewModel> enviadosQuery;
            //--
            DateTime fechaInicioTemp;
            DateTime fechaFinTemp;

            if (tramite != null && tipo != null && estado != null && !string.IsNullOrEmpty(busqueda) && categoria != null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);
                busqueda = busqueda.Replace('+', ' ');

                enviadosQuery = _context.HER_Envio
                        .Where(a => a.HER_De.HER_UserName == username
                                    && a.HER_De.HER_Activo == true
                                    && a.HER_EsOculto == false
                                    && (EF.Functions.Like(a.HER_Documento.HER_Folio, "%" + busqueda + "%")
                                    || EF.Functions.Like(a.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                                    || EF.Functions.Like(a.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                                    || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_NombreCompleto).FirstOrDefault(), "%" + busqueda + "%")
                                    || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(), "%" + busqueda + "%")
                                    )
                                    && a.HER_Documento.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                                    && (a.HER_FechaEnvio >= fechaInicioTemp && a.HER_FechaEnvio <= fechaFinTemp)
                                    && a.HER_EstadoEnvioId == (int)estado
                                    && a.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                                    && a.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                                    //--
                                    && a.HER_TramiteId == (int)tramite
                                    )
                        .AsNoTracking()
                        .Select(x => new DocumentoEnviadoViewModel
                        {
                            EnvioId = x.HER_EnvioId,
                            FechaEnvio = x.HER_FechaEnvio,
                            TipoEnvio = x.HER_TipoEnvioId,
                            TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                            Estado = x.HER_EstadoEnvio.HER_Nombre,
                            Folio = x.HER_Documento.HER_Folio,
                            Asunto = x.HER_Documento.HER_Asunto,
                            Adjuntos = (x.HER_AnexoId != null) ? true : false,
                            Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                            //--
                            Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                            Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                            Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                            //--
                            Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                            ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                            NoInterno = x.HER_Documento.HER_NoInterno,
                            TramiteId = x.HER_TramiteId,
                            Tramite = x.HER_Tramite.HER_Nombre,
                            Carpeta = x.HER_Carpeta.HER_Nombre
                        })
                        .OrderByDescending(x => x.FechaEnvio)
                        .AsQueryable();
            }
            else if (tramite != null && tipo != null && estado != null && !string.IsNullOrEmpty(busqueda) && categoria != null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                busqueda = busqueda.Replace('+', ' ');

                enviadosQuery = (_context.HER_Envio
                    .Where(a => a.HER_De.HER_UserName == username
                                && a.HER_De.HER_Activo == true
                                && a.HER_EsOculto == false
                                && (EF.Functions.Like(a.HER_Documento.HER_Folio, "%" + busqueda + "%")
                                || EF.Functions.Like(a.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                                || EF.Functions.Like(a.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                                || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_NombreCompleto).FirstOrDefault(), "%" + busqueda + "%")
                                || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(), "%" + busqueda + "%")
                                )
                                && a.HER_Documento.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                                && a.HER_EstadoEnvioId == (int)estado
                                && a.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                                && a.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                                //--
                                && a.HER_TramiteId == (int)tramite
                                )
                    .AsNoTracking()
                    .Select(x => new DocumentoEnviadoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaEnvio = x.HER_FechaEnvio,
                        TipoEnvio = x.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        Folio = x.HER_Documento.HER_Folio,
                        Asunto = x.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_AnexoId != null) ? true : false,
                        Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                        Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                        Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                        //--
                        Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                        ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                        NoInterno = x.HER_Documento.HER_NoInterno,
                        TramiteId = x.HER_TramiteId,
                        Tramite = x.HER_Tramite.HER_Nombre,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderByDescending(x => x.FechaEnvio)
                    .AsQueryable()
                );
            }
            else if (tramite != null && tipo != null && estado != null && !string.IsNullOrEmpty(busqueda) && categoria == null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);
                busqueda = busqueda.Replace('+', ' ');

                enviadosQuery = _context.HER_Envio
                    .Where(a => a.HER_De.HER_UserName == username
                                && a.HER_De.HER_Activo == true
                                && a.HER_EsOculto == false
                                && (EF.Functions.Like(a.HER_Documento.HER_Folio, "%" + busqueda + "%")
                                || EF.Functions.Like(a.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                                || EF.Functions.Like(a.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                                || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_NombreCompleto).FirstOrDefault(), "%" + busqueda + "%")
                                || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(), "%" + busqueda + "%")
                                )
                                && (a.HER_FechaEnvio >= fechaInicioTemp && a.HER_FechaEnvio <= fechaFinTemp)
                                && a.HER_EstadoEnvioId == (int)estado
                                && a.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                                && a.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                                //--
                                && a.HER_TramiteId == (int)tramite
                            )
                    .AsNoTracking()
                    .Select(x => new DocumentoEnviadoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaEnvio = x.HER_FechaEnvio,
                        TipoEnvio = x.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        Folio = x.HER_Documento.HER_Folio,
                        Asunto = x.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_AnexoId != null) ? true : false,
                        Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                        Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                        Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                        //--
                        Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                        ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                        NoInterno = x.HER_Documento.HER_NoInterno,
                        TramiteId = x.HER_TramiteId,
                        Tramite = x.HER_Tramite.HER_Nombre,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderByDescending(x => x.FechaEnvio)
                    .AsQueryable();
            }
            else if (tramite != null && tipo != null && estado != null && !string.IsNullOrEmpty(busqueda) && categoria == null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                busqueda = busqueda.Replace('+', ' ');

                enviadosQuery = _context.HER_Envio
                    .Where(a => a.HER_De.HER_UserName == username
                                && a.HER_De.HER_Activo == true
                                && a.HER_EsOculto == false
                                && (EF.Functions.Like(a.HER_Documento.HER_Folio, "%" + busqueda + "%")
                                || EF.Functions.Like(a.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                                || EF.Functions.Like(a.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                                || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_NombreCompleto).FirstOrDefault(), "%" + busqueda + "%")
                                || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(), "%" + busqueda + "%")
                                )
                                && a.HER_EstadoEnvioId == (int)estado
                                && a.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                                && a.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                                //--
                                && a.HER_TramiteId == (int)tramite
                        )
                    .AsNoTracking()
                    .Select(x => new DocumentoEnviadoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaEnvio = x.HER_FechaEnvio,
                        TipoEnvio = x.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        Folio = x.HER_Documento.HER_Folio,
                        Asunto = x.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_AnexoId != null) ? true : false,
                        Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                        Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                        Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                        //--
                        Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                        ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                        NoInterno = x.HER_Documento.HER_NoInterno,
                        TramiteId = x.HER_TramiteId,
                        Tramite = x.HER_Tramite.HER_Nombre,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderByDescending(x => x.FechaEnvio)
                    .AsQueryable();
            }
            else if (tramite != null && tipo != null && estado != null && string.IsNullOrEmpty(busqueda) && categoria != null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                enviadosQuery = (_context.HER_Envio
                        .Where(a => a.HER_De.HER_UserName == username
                                    && a.HER_De.HER_Activo == true
                                    && a.HER_EsOculto == false
                                    && a.HER_Documento.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                                    && (a.HER_FechaEnvio >= fechaInicioTemp && a.HER_FechaEnvio <= fechaFinTemp)
                                    && a.HER_EstadoEnvioId == (int)estado
                                    && a.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                                    && a.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                                    //--
                                    && a.HER_TramiteId == (int)tramite
                                    )
                        .AsNoTracking()
                        .Select(x => new DocumentoEnviadoViewModel
                        {
                            EnvioId = x.HER_EnvioId,
                            FechaEnvio = x.HER_FechaEnvio,
                            TipoEnvio = x.HER_TipoEnvioId,
                            TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                            Estado = x.HER_EstadoEnvio.HER_Nombre,
                            Folio = x.HER_Documento.HER_Folio,
                            Asunto = x.HER_Documento.HER_Asunto,
                            Adjuntos = (x.HER_AnexoId != null) ? true : false,
                            Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                            //--
                            Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                            Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                            Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                            //--
                            Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                            ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                            NoInterno = x.HER_Documento.HER_NoInterno,
                            TramiteId = x.HER_TramiteId,
                            Tramite = x.HER_Tramite.HER_Nombre,
                            Carpeta = x.HER_Carpeta.HER_Nombre
                        })
                        .OrderByDescending(x => x.FechaEnvio)
                        .AsQueryable()
                    );
            }
            else if (tramite != null && tipo != null && estado != null && string.IsNullOrEmpty(busqueda) && categoria != null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                enviadosQuery = (
                            _context.HER_Envio
                            .Where(a => a.HER_De.HER_UserName == username
                                        && a.HER_De.HER_Activo == true
                                        && a.HER_EsOculto == false
                                        && a.HER_Documento.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                                        && a.HER_EstadoEnvioId == (int)estado
                                        && a.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                                        && a.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                                        //--
                                        && a.HER_TramiteId == (int)tramite
                                        )
                            .AsNoTracking()
                            .Select(x => new DocumentoEnviadoViewModel
                            {
                                EnvioId = x.HER_EnvioId,
                                FechaEnvio = x.HER_FechaEnvio,
                                TipoEnvio = x.HER_TipoEnvioId,
                                TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                                Estado = x.HER_EstadoEnvio.HER_Nombre,
                                Folio = x.HER_Documento.HER_Folio,
                                Asunto = x.HER_Documento.HER_Asunto,
                                Adjuntos = (x.HER_AnexoId != null) ? true : false,
                                Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                                //--
                                Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                                Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                                Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                                //--
                                Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                                ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                                NoInterno = x.HER_Documento.HER_NoInterno,
                                TramiteId = x.HER_TramiteId,
                                Tramite = x.HER_Tramite.HER_Nombre,
                                Carpeta = x.HER_Carpeta.HER_Nombre
                            })
                            .OrderByDescending(x => x.FechaEnvio)
                            .AsQueryable()
                    );
            }
            else if (tramite != null && tipo != null && estado != null && string.IsNullOrEmpty(busqueda) && categoria == null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                enviadosQuery = _context.HER_Envio
                    .Where(a => a.HER_De.HER_UserName == username
                                && a.HER_De.HER_Activo == true
                               && a.HER_EsOculto == false
                                && (a.HER_FechaEnvio >= fechaInicioTemp && a.HER_FechaEnvio <= fechaFinTemp)
                                && a.HER_EstadoEnvioId == (int)estado
                                && a.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                                && a.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                                //--
                                && a.HER_TramiteId == (int)tramite
                                )
                    .AsNoTracking()
                    .Select(x => new DocumentoEnviadoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaEnvio = x.HER_FechaEnvio,
                        TipoEnvio = x.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        Folio = x.HER_Documento.HER_Folio,
                        Asunto = x.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_AnexoId != null) ? true : false,
                        Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                        Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                        Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                        //--
                        Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                        ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                        NoInterno = x.HER_Documento.HER_NoInterno,
                        TramiteId = x.HER_TramiteId,
                        Tramite = x.HER_Tramite.HER_Nombre,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderByDescending(x => x.FechaEnvio)
                    .AsQueryable();
            }
            else if (tramite != null && tipo != null && estado != null && string.IsNullOrEmpty(busqueda) && categoria == null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                enviadosQuery = _context.HER_Envio
                    .Where(a => a.HER_De.HER_UserName == username
                                && a.HER_De.HER_Activo == true
                                && a.HER_EsOculto == false
                                && a.HER_EstadoEnvioId == (int)estado
                                && a.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                                && a.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                                //--
                                && a.HER_TramiteId == (int)tramite
                                )
                    .AsNoTracking()
                    .Select(x => new DocumentoEnviadoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaEnvio = x.HER_FechaEnvio,
                        TipoEnvio = x.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        Folio = x.HER_Documento.HER_Folio,
                        Asunto = x.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_AnexoId != null) ? true : false,
                        Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                        Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                        Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                        //--
                        Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                        ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                        NoInterno = x.HER_Documento.HER_NoInterno,
                        TramiteId = x.HER_TramiteId,
                        Tramite = x.HER_Tramite.HER_Nombre,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderByDescending(x => x.FechaEnvio)
                    .AsQueryable();
            }
            else if (tramite != null && tipo != null && estado == null && !string.IsNullOrEmpty(busqueda) && categoria != null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);
                busqueda = busqueda.Replace('+', ' ');

                enviadosQuery = (_context.HER_Envio
                        .Where(a => a.HER_De.HER_UserName == username
                                    && a.HER_De.HER_Activo == true
                                    && a.HER_EsOculto == false
                                    && (EF.Functions.Like(a.HER_Documento.HER_Folio, "%" + busqueda + "%")
                                    || EF.Functions.Like(a.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                                    || EF.Functions.Like(a.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                                    || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_NombreCompleto).FirstOrDefault(), "%" + busqueda + "%")
                                    || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(), "%" + busqueda + "%")
                                    )
                                    && a.HER_Documento.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                                    && (a.HER_FechaEnvio >= fechaInicioTemp && a.HER_FechaEnvio <= fechaFinTemp)
                                    && a.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                                    && a.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                                    //--
                                    && a.HER_TramiteId == (int)tramite
                                    )
                        .AsNoTracking()
                        .Select(x => new DocumentoEnviadoViewModel
                        {
                            EnvioId = x.HER_EnvioId,
                            FechaEnvio = x.HER_FechaEnvio,
                            TipoEnvio = x.HER_TipoEnvioId,
                            TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                            Estado = x.HER_EstadoEnvio.HER_Nombre,
                            Folio = x.HER_Documento.HER_Folio,
                            Asunto = x.HER_Documento.HER_Asunto,
                            Adjuntos = (x.HER_AnexoId != null) ? true : false,
                            Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                            //--
                            Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                            Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                            Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                            //--
                            Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                            ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                            NoInterno = x.HER_Documento.HER_NoInterno,
                            TramiteId = x.HER_TramiteId,
                            Tramite = x.HER_Tramite.HER_Nombre,
                            Carpeta = x.HER_Carpeta.HER_Nombre
                        })
                        .OrderByDescending(x => x.FechaEnvio)
                        .AsQueryable()
                    );
            }
            else if (tramite != null && tipo != null && estado == null && !string.IsNullOrEmpty(busqueda) && categoria != null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                busqueda = busqueda.Replace('+', ' ');

                enviadosQuery = (_context.HER_Envio
                    .Where(a => a.HER_De.HER_UserName == username
                                && a.HER_De.HER_Activo == true
                                && a.HER_EsOculto == false
                                && (EF.Functions.Like(a.HER_Documento.HER_Folio, "%" + busqueda + "%")
                                || EF.Functions.Like(a.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                                || EF.Functions.Like(a.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                                || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_NombreCompleto).FirstOrDefault(), "%" + busqueda + "%")
                                || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(), "%" + busqueda + "%")
                                )
                                && a.HER_Documento.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                                && a.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                                && a.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                                //--
                                && a.HER_TramiteId == (int)tramite
                                )
                    .AsNoTracking()
                    .Select(x => new DocumentoEnviadoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaEnvio = x.HER_FechaEnvio,
                        TipoEnvio = x.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        Folio = x.HER_Documento.HER_Folio,
                        Asunto = x.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_AnexoId != null) ? true : false,
                        Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                        Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                        Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                        //--
                        Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                        ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                        NoInterno = x.HER_Documento.HER_NoInterno,
                        TramiteId = x.HER_TramiteId,
                        Tramite = x.HER_Tramite.HER_Nombre,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderByDescending(x => x.FechaEnvio)
                    .AsQueryable()
                );
            }
            else if (tramite != null && tipo != null && estado == null && !string.IsNullOrEmpty(busqueda) && categoria == null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);
                busqueda = busqueda.Replace('+', ' ');

                enviadosQuery = _context.HER_Envio
                    .Where(a => a.HER_De.HER_UserName == username
                                && a.HER_De.HER_Activo == true
                                && a.HER_EsOculto == false
                                && (EF.Functions.Like(a.HER_Documento.HER_Folio, "%" + busqueda + "%")
                                || EF.Functions.Like(a.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                                || EF.Functions.Like(a.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                                || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_NombreCompleto).FirstOrDefault(), "%" + busqueda + "%")
                                || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(), "%" + busqueda + "%")
                                )
                                && (a.HER_FechaEnvio >= fechaInicioTemp && a.HER_FechaEnvio <= fechaFinTemp)
                                && a.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                                && a.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                                //--
                                && a.HER_TramiteId == (int)tramite
                                )
                    .AsNoTracking()
                    .Select(x => new DocumentoEnviadoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaEnvio = x.HER_FechaEnvio,
                        TipoEnvio = x.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        Folio = x.HER_Documento.HER_Folio,
                        Asunto = x.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_AnexoId != null) ? true : false,
                        Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                        Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                        Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                        //--
                        Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                        ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                        NoInterno = x.HER_Documento.HER_NoInterno,
                        TramiteId = x.HER_TramiteId,
                        Tramite = x.HER_Tramite.HER_Nombre,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderByDescending(x => x.FechaEnvio)
                    .AsQueryable();
            }
            else if (tramite != null && tipo != null && estado == null && !string.IsNullOrEmpty(busqueda) && categoria == null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                busqueda = busqueda.Replace('+', ' ');

                enviadosQuery = _context.HER_Envio
                    .Where(a => a.HER_De.HER_UserName == username
                                && a.HER_De.HER_Activo == true
                                && a.HER_EsOculto == false
                                && (EF.Functions.Like(a.HER_Documento.HER_Folio, "%" + busqueda + "%")
                                || EF.Functions.Like(a.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                                || EF.Functions.Like(a.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                                || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_NombreCompleto).FirstOrDefault(), "%" + busqueda + "%")
                                || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(), "%" + busqueda + "%")
                                )
                                && a.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                                && a.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                                //--
                                && a.HER_TramiteId == (int)tramite
                        )
                    .AsNoTracking()
                    .Select(x => new DocumentoEnviadoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaEnvio = x.HER_FechaEnvio,
                        TipoEnvio = x.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        Folio = x.HER_Documento.HER_Folio,
                        Asunto = x.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_AnexoId != null) ? true : false,
                        Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                        Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                        Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                        //--
                        Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                        ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                        NoInterno = x.HER_Documento.HER_NoInterno,
                        TramiteId = x.HER_TramiteId,
                        Tramite = x.HER_Tramite.HER_Nombre,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderByDescending(x => x.FechaEnvio)
                    .AsQueryable();
            }
            else if (tramite != null && tipo != null && estado == null && string.IsNullOrEmpty(busqueda) && categoria != null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);
                enviadosQuery = (_context.HER_Envio
                        .Where(a => a.HER_De.HER_UserName == username
                                    && a.HER_De.HER_Activo == true
                                    && a.HER_EsOculto == false
                                    && a.HER_Documento.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                                    && (a.HER_FechaEnvio >= fechaInicioTemp && a.HER_FechaEnvio <= fechaFinTemp)
                                    && a.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                                    && a.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                                    //--
                                    && a.HER_TramiteId == (int)tramite
                                    )
                        .AsNoTracking()
                        .Select(x => new DocumentoEnviadoViewModel
                        {
                            EnvioId = x.HER_EnvioId,
                            FechaEnvio = x.HER_FechaEnvio,
                            TipoEnvio = x.HER_TipoEnvioId,
                            TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                            Estado = x.HER_EstadoEnvio.HER_Nombre,
                            Folio = x.HER_Documento.HER_Folio,
                            Asunto = x.HER_Documento.HER_Asunto,
                            Adjuntos = (x.HER_AnexoId != null) ? true : false,
                            Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                            //--
                            Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                            Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                            Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                            //--
                            Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                            ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                            NoInterno = x.HER_Documento.HER_NoInterno,
                            TramiteId = x.HER_TramiteId,
                            Tramite = x.HER_Tramite.HER_Nombre,
                            Carpeta = x.HER_Carpeta.HER_Nombre
                        })
                        .OrderByDescending(x => x.FechaEnvio)
                        .AsQueryable()
                    );
            }
            else if (tramite != null && tipo != null && estado == null && string.IsNullOrEmpty(busqueda) && categoria != null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                enviadosQuery = (
                            _context.HER_Envio
                            .Where(a => a.HER_De.HER_UserName == username
                                        && a.HER_De.HER_Activo == true
                                        && a.HER_EsOculto == false
                                        && a.HER_Documento.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                                        && a.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                                        && a.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                                        //--
                                        && a.HER_TramiteId == (int)tramite
                                        )
                            .AsNoTracking()
                            .Select(x => new DocumentoEnviadoViewModel
                            {
                                EnvioId = x.HER_EnvioId,
                                FechaEnvio = x.HER_FechaEnvio,
                                TipoEnvio = x.HER_TipoEnvioId,
                                TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                                Estado = x.HER_EstadoEnvio.HER_Nombre,
                                Folio = x.HER_Documento.HER_Folio,
                                Asunto = x.HER_Documento.HER_Asunto,
                                Adjuntos = (x.HER_AnexoId != null) ? true : false,
                                Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                                //--
                                Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                                Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                                Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                                //--
                                Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                                ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                                NoInterno = x.HER_Documento.HER_NoInterno,
                                TramiteId = x.HER_TramiteId,
                                Tramite = x.HER_Tramite.HER_Nombre,
                                Carpeta = x.HER_Carpeta.HER_Nombre
                            })
                            .OrderByDescending(x => x.FechaEnvio)
                            .AsQueryable()
                    );
            }
            else if (tramite != null && tipo != null && estado == null && string.IsNullOrEmpty(busqueda) && categoria == null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                enviadosQuery = _context.HER_Envio
                    .Where(a => a.HER_De.HER_UserName == username
                                && a.HER_De.HER_Activo == true
                                && a.HER_EsOculto == false
                                && (a.HER_FechaEnvio >= fechaInicioTemp && a.HER_FechaEnvio <= fechaFinTemp)
                                && a.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                                && a.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                                //--
                                && a.HER_TramiteId == (int)tramite
                                )
                    .AsNoTracking()
                    .Select(x => new DocumentoEnviadoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaEnvio = x.HER_FechaEnvio,
                        TipoEnvio = x.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        Folio = x.HER_Documento.HER_Folio,
                        Asunto = x.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_AnexoId != null) ? true : false,
                        Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                        Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                        Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                        //--
                        Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                        ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                        NoInterno = x.HER_Documento.HER_NoInterno,
                        TramiteId = x.HER_TramiteId,
                        Tramite = x.HER_Tramite.HER_Nombre,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderByDescending(x => x.FechaEnvio)
                    .AsQueryable();
            }
            else if (tramite != null && tipo != null && estado == null && string.IsNullOrEmpty(busqueda) && categoria == null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                enviadosQuery = _context.HER_Envio
                    .Where(a => a.HER_De.HER_UserName == username
                                && a.HER_De.HER_Activo == true
                                && a.HER_EsOculto == false
                                && a.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                                && a.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                                //--
                                && a.HER_TramiteId == (int)tramite
                                )
                    .AsNoTracking()
                    .Select(x => new DocumentoEnviadoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaEnvio = x.HER_FechaEnvio,
                        TipoEnvio = x.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        Folio = x.HER_Documento.HER_Folio,
                        Asunto = x.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_AnexoId != null) ? true : false,
                        Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                        Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                        Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                        //--
                        Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                        ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                        NoInterno = x.HER_Documento.HER_NoInterno,
                        TramiteId = x.HER_TramiteId,
                        Tramite = x.HER_Tramite.HER_Nombre,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderByDescending(x => x.FechaEnvio)
                    .AsQueryable();
            }
            else if (tramite != null && tipo == null && estado != null && !string.IsNullOrEmpty(busqueda) && categoria != null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);
                busqueda = busqueda.Replace('+', ' ');

                enviadosQuery = (_context.HER_Envio
                        .Where(a => a.HER_De.HER_UserName == username
                                    && a.HER_De.HER_Activo == true
                                    && a.HER_EsOculto == false
                                    && (EF.Functions.Like(a.HER_Documento.HER_Folio, "%" + busqueda + "%")
                                    || EF.Functions.Like(a.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                                    || EF.Functions.Like(a.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                                    || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_NombreCompleto).FirstOrDefault(), "%" + busqueda + "%")
                                    || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(), "%" + busqueda + "%")
                                    )
                                    && a.HER_Documento.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                                    && (a.HER_FechaEnvio >= fechaInicioTemp && a.HER_FechaEnvio <= fechaFinTemp)
                                    && a.HER_EstadoEnvioId == (int)estado
                                    //--
                                    && a.HER_TramiteId == (int)tramite
                            )
                        .AsNoTracking()
                        .Select(x => new DocumentoEnviadoViewModel
                        {
                            EnvioId = x.HER_EnvioId,
                            FechaEnvio = x.HER_FechaEnvio,
                            TipoEnvio = x.HER_TipoEnvioId,
                            TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                            Estado = x.HER_EstadoEnvio.HER_Nombre,
                            Folio = x.HER_Documento.HER_Folio,
                            Asunto = x.HER_Documento.HER_Asunto,
                            Adjuntos = (x.HER_AnexoId != null) ? true : false,
                            Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                            //--
                            Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                            Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                            Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                            //--
                            Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                            ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                            NoInterno = x.HER_Documento.HER_NoInterno,
                            TramiteId = x.HER_TramiteId,
                            Tramite = x.HER_Tramite.HER_Nombre,
                            Carpeta = x.HER_Carpeta.HER_Nombre
                        })
                        .OrderByDescending(x => x.FechaEnvio)
                        .AsQueryable()
                    );
            }
            else if (tramite != null && tipo == null && estado != null && !string.IsNullOrEmpty(busqueda) && categoria != null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                busqueda = busqueda.Replace('+', ' ');

                enviadosQuery = (_context.HER_Envio
                    .Where(a => a.HER_De.HER_UserName == username
                                && a.HER_De.HER_Activo == true
                                && a.HER_EsOculto == false
                                && (EF.Functions.Like(a.HER_Documento.HER_Folio, "%" + busqueda + "%")
                                || EF.Functions.Like(a.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                                || EF.Functions.Like(a.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                                || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_NombreCompleto).FirstOrDefault(), "%" + busqueda + "%")
                                || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(), "%" + busqueda + "%")
                                )
                                && a.HER_Documento.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                                && a.HER_EstadoEnvioId == (int)estado
                                //--
                                && a.HER_TramiteId == (int)tramite
                        )
                    .AsNoTracking()
                    .Select(x => new DocumentoEnviadoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaEnvio = x.HER_FechaEnvio,
                        TipoEnvio = x.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        Folio = x.HER_Documento.HER_Folio,
                        Asunto = x.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_AnexoId != null) ? true : false,
                        Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                        Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                        Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                        //--
                        Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                        ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                        NoInterno = x.HER_Documento.HER_NoInterno,
                        TramiteId = x.HER_TramiteId,
                        Tramite = x.HER_Tramite.HER_Nombre,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderByDescending(x => x.FechaEnvio)
                    .AsQueryable()
                );
            }
            else if (tramite != null && tipo == null && estado != null && !string.IsNullOrEmpty(busqueda) && categoria == null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);
                busqueda = busqueda.Replace('+', ' ');

                enviadosQuery = _context.HER_Envio
                    .Where(a => a.HER_De.HER_UserName == username
                                && a.HER_De.HER_Activo == true
                                && a.HER_EsOculto == false
                                && (EF.Functions.Like(a.HER_Documento.HER_Folio, "%" + busqueda + "%")
                                || EF.Functions.Like(a.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                                || EF.Functions.Like(a.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                                || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_NombreCompleto).FirstOrDefault(), "%" + busqueda + "%")
                                || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(), "%" + busqueda + "%")
                                )
                                && (a.HER_FechaEnvio >= fechaInicioTemp && a.HER_FechaEnvio <= fechaFinTemp)
                                && a.HER_EstadoEnvioId == (int)estado
                            //--
                            && a.HER_TramiteId == (int)tramite
                        )
                    .AsNoTracking()
                    .Select(x => new DocumentoEnviadoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaEnvio = x.HER_FechaEnvio,
                        TipoEnvio = x.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        Folio = x.HER_Documento.HER_Folio,
                        Asunto = x.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_AnexoId != null) ? true : false,
                        Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                        Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                        Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                        //--
                        Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                        ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                        NoInterno = x.HER_Documento.HER_NoInterno,
                        TramiteId = x.HER_TramiteId,
                        Tramite = x.HER_Tramite.HER_Nombre,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderByDescending(x => x.FechaEnvio)
                    .AsQueryable();
            }
            else if (tramite != null && tipo == null && estado != null && !string.IsNullOrEmpty(busqueda) && categoria == null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                busqueda = busqueda.Replace('+', ' ');

                enviadosQuery = _context.HER_Envio
                    .Where(a => a.HER_De.HER_UserName == username
                                && a.HER_De.HER_Activo == true
                                && a.HER_EsOculto == false
                                && (EF.Functions.Like(a.HER_Documento.HER_Folio, "%" + busqueda + "%")
                                || EF.Functions.Like(a.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                                || EF.Functions.Like(a.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                                || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_NombreCompleto).FirstOrDefault(), "%" + busqueda + "%")
                                || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(), "%" + busqueda + "%")
                                )
                                && a.HER_EstadoEnvioId == (int)estado
                                //--
                                && a.HER_TramiteId == (int)tramite
                        )
                    .AsNoTracking()
                    .Select(x => new DocumentoEnviadoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaEnvio = x.HER_FechaEnvio,
                        TipoEnvio = x.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        Folio = x.HER_Documento.HER_Folio,
                        Asunto = x.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_AnexoId != null) ? true : false,
                        Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                        Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                        Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                        //--
                        Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                        ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                        NoInterno = x.HER_Documento.HER_NoInterno,
                        TramiteId = x.HER_TramiteId,
                        Tramite = x.HER_Tramite.HER_Nombre,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderByDescending(x => x.FechaEnvio)
                    .AsQueryable();
            }
            else if (tramite != null && tipo == null && estado != null && string.IsNullOrEmpty(busqueda) && categoria != null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                enviadosQuery = (_context.HER_Envio
                        .Where(a => a.HER_De.HER_UserName == username
                                    && a.HER_De.HER_Activo == true
                                    && a.HER_EsOculto == false
                                    && a.HER_Documento.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                                    && (a.HER_FechaEnvio >= fechaInicioTemp && a.HER_FechaEnvio <= fechaFinTemp)
                                    && a.HER_EstadoEnvioId == (int)estado
                                    //--
                                    && a.HER_TramiteId == (int)tramite
                            )
                        .AsNoTracking()
                        .Select(x => new DocumentoEnviadoViewModel
                        {
                            EnvioId = x.HER_EnvioId,
                            FechaEnvio = x.HER_FechaEnvio,
                            TipoEnvio = x.HER_TipoEnvioId,
                            TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                            Estado = x.HER_EstadoEnvio.HER_Nombre,
                            Folio = x.HER_Documento.HER_Folio,
                            Asunto = x.HER_Documento.HER_Asunto,
                            Adjuntos = (x.HER_AnexoId != null) ? true : false,
                            Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                            //--
                            Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                            Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                            Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                            //--
                            Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                            ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                            NoInterno = x.HER_Documento.HER_NoInterno,
                            TramiteId = x.HER_TramiteId,
                            Tramite = x.HER_Tramite.HER_Nombre,
                            Carpeta = x.HER_Carpeta.HER_Nombre
                        })
                        .OrderByDescending(x => x.FechaEnvio)
                        .AsQueryable()
                    );
            }
            else if (tramite != null && tipo == null && estado != null && string.IsNullOrEmpty(busqueda) && categoria != null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                enviadosQuery = (
                            _context.HER_Envio
                            .Where(a => a.HER_De.HER_UserName == username
                                        && a.HER_De.HER_Activo == true
                                        && a.HER_EsOculto == false
                                        && a.HER_Documento.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                                        && a.HER_EstadoEnvioId == (int)estado
                                        //--
                                        && a.HER_TramiteId == (int)tramite
                                )
                            .AsNoTracking()
                            .Select(x => new DocumentoEnviadoViewModel
                            {
                                EnvioId = x.HER_EnvioId,
                                FechaEnvio = x.HER_FechaEnvio,
                                TipoEnvio = x.HER_TipoEnvioId,
                                TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                                Estado = x.HER_EstadoEnvio.HER_Nombre,
                                Folio = x.HER_Documento.HER_Folio,
                                Asunto = x.HER_Documento.HER_Asunto,
                                Adjuntos = (x.HER_AnexoId != null) ? true : false,
                                Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                                //--
                                Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                                Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                                Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                                //--
                                Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                                ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                                NoInterno = x.HER_Documento.HER_NoInterno,
                                TramiteId = x.HER_TramiteId,
                                Tramite = x.HER_Tramite.HER_Nombre,
                                Carpeta = x.HER_Carpeta.HER_Nombre
                            })
                            .OrderByDescending(x => x.FechaEnvio)
                            .AsQueryable()
                    );
            }
            else if (tramite != null && tipo == null && estado != null && string.IsNullOrEmpty(busqueda) && categoria == null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                enviadosQuery = _context.HER_Envio
                    .Where(a => a.HER_De.HER_UserName == username
                                && a.HER_De.HER_Activo == true
                                && a.HER_EsOculto == false
                                && (a.HER_FechaEnvio >= fechaInicioTemp && a.HER_FechaEnvio <= fechaFinTemp)
                                && a.HER_EstadoEnvioId == (int)estado
                                //--
                                && a.HER_TramiteId == (int)tramite
                        )
                    .AsNoTracking()
                    .Select(x => new DocumentoEnviadoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaEnvio = x.HER_FechaEnvio,
                        TipoEnvio = x.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        Folio = x.HER_Documento.HER_Folio,
                        Asunto = x.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_AnexoId != null) ? true : false,
                        Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                        Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                        Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                        //--
                        Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                        ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                        NoInterno = x.HER_Documento.HER_NoInterno,
                        TramiteId = x.HER_TramiteId,
                        Tramite = x.HER_Tramite.HER_Nombre,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderByDescending(x => x.FechaEnvio)
                    .AsQueryable();
            }
            else if (tramite != null && tipo == null && estado != null && string.IsNullOrEmpty(busqueda) && categoria == null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                enviadosQuery = _context.HER_Envio
                    .Where(a => a.HER_De.HER_UserName == username
                                && a.HER_De.HER_Activo == true
                                && a.HER_EsOculto == false
                                && a.HER_EstadoEnvioId == (int)estado
                                //--
                                && a.HER_TramiteId == (int)tramite
                        )
                    .AsNoTracking()
                    .Select(x => new DocumentoEnviadoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaEnvio = x.HER_FechaEnvio,
                        TipoEnvio = x.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        Folio = x.HER_Documento.HER_Folio,
                        Asunto = x.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_AnexoId != null) ? true : false,
                        Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                        Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                        Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                        //--
                        Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                        ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                        NoInterno = x.HER_Documento.HER_NoInterno,
                        TramiteId = x.HER_TramiteId,
                        Tramite = x.HER_Tramite.HER_Nombre,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderByDescending(x => x.FechaEnvio)
                    .AsQueryable();
            }
            else if (tramite != null && tipo == null && estado == null && !string.IsNullOrEmpty(busqueda) && categoria != null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);
                busqueda = busqueda.Replace('+', ' ');

                enviadosQuery = (_context.HER_Envio
                        .Where(a => a.HER_De.HER_UserName == username
                                    && a.HER_De.HER_Activo == true
                                    && a.HER_EsOculto == false
                                    && (EF.Functions.Like(a.HER_Documento.HER_Folio, "%" + busqueda + "%")
                                    || EF.Functions.Like(a.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                                    || EF.Functions.Like(a.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                                    || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_NombreCompleto).FirstOrDefault(), "%" + busqueda + "%")
                                    || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(), "%" + busqueda + "%")
                                    )
                                    && a.HER_Documento.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                                    && (a.HER_FechaEnvio >= fechaInicioTemp && a.HER_FechaEnvio <= fechaFinTemp)
                                    //--
                                    && a.HER_TramiteId == (int)tramite
                                    )
                        .AsNoTracking()
                        .Select(x => new DocumentoEnviadoViewModel
                        {
                            EnvioId = x.HER_EnvioId,
                            FechaEnvio = x.HER_FechaEnvio,
                            TipoEnvio = x.HER_TipoEnvioId,
                            TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                            Estado = x.HER_EstadoEnvio.HER_Nombre,
                            Folio = x.HER_Documento.HER_Folio,
                            Asunto = x.HER_Documento.HER_Asunto,
                            Adjuntos = (x.HER_AnexoId != null) ? true : false,
                            Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                            //--
                            Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                            Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                            Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                            //--
                            Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                            ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                            NoInterno = x.HER_Documento.HER_NoInterno,
                            TramiteId = x.HER_TramiteId,
                            Tramite = x.HER_Tramite.HER_Nombre,
                            Carpeta = x.HER_Carpeta.HER_Nombre
                        })
                        .OrderByDescending(x => x.FechaEnvio)
                        .AsQueryable()
                    );
            }
            else if (tramite != null && tipo == null && estado == null && !string.IsNullOrEmpty(busqueda) && categoria != null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                busqueda = busqueda.Replace('+', ' ');

                enviadosQuery = (_context.HER_Envio
                    .Where(a => a.HER_De.HER_UserName == username
                                && a.HER_De.HER_Activo == true
                                && a.HER_EsOculto == false
                                && (EF.Functions.Like(a.HER_Documento.HER_Folio, "%" + busqueda + "%")
                                || EF.Functions.Like(a.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                                || EF.Functions.Like(a.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                                || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_NombreCompleto).FirstOrDefault(), "%" + busqueda + "%")
                                || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(), "%" + busqueda + "%")
                                )
                                && a.HER_Documento.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                                //--
                                && a.HER_TramiteId == (int)tramite
                                )
                    .AsNoTracking()
                    .Select(x => new DocumentoEnviadoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaEnvio = x.HER_FechaEnvio,
                        TipoEnvio = x.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        Folio = x.HER_Documento.HER_Folio,
                        Asunto = x.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_AnexoId != null) ? true : false,
                        Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                        Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                        Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                        //--
                        Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                        ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                        NoInterno = x.HER_Documento.HER_NoInterno,
                        TramiteId = x.HER_TramiteId,
                        Tramite = x.HER_Tramite.HER_Nombre,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderByDescending(x => x.FechaEnvio)
                    .AsQueryable()
                );
            }
            else if (tramite != null && tipo == null && estado == null && !string.IsNullOrEmpty(busqueda) && categoria == null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);
                busqueda = busqueda.Replace('+', ' ');

                enviadosQuery = _context.HER_Envio
                    .Where(a => a.HER_De.HER_UserName == username
                                && a.HER_De.HER_Activo == true
                                && a.HER_EsOculto == false
                                && (EF.Functions.Like(a.HER_Documento.HER_Folio, "%" + busqueda + "%")
                                || EF.Functions.Like(a.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                                || EF.Functions.Like(a.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                                || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_NombreCompleto).FirstOrDefault(), "%" + busqueda + "%")
                                || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(), "%" + busqueda + "%")
                                )
                                && (a.HER_FechaEnvio >= fechaInicioTemp && a.HER_FechaEnvio <= fechaFinTemp)
                                //--
                                && a.HER_TramiteId == (int)tramite
                        )
                    .AsNoTracking()
                    .Select(x => new DocumentoEnviadoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaEnvio = x.HER_FechaEnvio,
                        TipoEnvio = x.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        Folio = x.HER_Documento.HER_Folio,
                        Asunto = x.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_AnexoId != null) ? true : false,
                        Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                        Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                        Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                        //--
                        Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                        ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                        NoInterno = x.HER_Documento.HER_NoInterno,
                        TramiteId = x.HER_TramiteId,
                        Tramite = x.HER_Tramite.HER_Nombre,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderByDescending(x => x.FechaEnvio)
                    .AsQueryable();
            }
            else if (tramite != null && tipo == null && estado == null && !string.IsNullOrEmpty(busqueda) && categoria == null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                busqueda = busqueda.Replace('+', ' ');

                enviadosQuery = _context.HER_Envio
                    .Where(a => a.HER_De.HER_UserName == username
                                && a.HER_De.HER_Activo == true
                                && a.HER_EsOculto == false
                                && (EF.Functions.Like(a.HER_Documento.HER_Folio, "%" + busqueda + "%")
                                || EF.Functions.Like(a.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                                || EF.Functions.Like(a.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                                || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_NombreCompleto).FirstOrDefault(), "%" + busqueda + "%")
                                || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(), "%" + busqueda + "%")
                                )
                            //--
                            && a.HER_TramiteId == (int)tramite
                        )
                    .AsNoTracking()
                    .Select(x => new DocumentoEnviadoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaEnvio = x.HER_FechaEnvio,
                        TipoEnvio = x.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        Folio = x.HER_Documento.HER_Folio,
                        Asunto = x.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_AnexoId != null) ? true : false,
                        Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                        Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                        Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                        //--
                        Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                        ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                        NoInterno = x.HER_Documento.HER_NoInterno,
                        TramiteId = x.HER_TramiteId,
                        Tramite = x.HER_Tramite.HER_Nombre,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderByDescending(x => x.FechaEnvio)
                    .AsQueryable();
            }
            else if (tramite != null && tipo == null && estado == null && string.IsNullOrEmpty(busqueda) && categoria != null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                enviadosQuery = (_context.HER_Envio
                        .Where(a => a.HER_De.HER_UserName == username
                                    && a.HER_De.HER_Activo == true
                                    && a.HER_EsOculto == false
                                    && a.HER_Documento.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                                    && (a.HER_FechaEnvio >= fechaInicioTemp && a.HER_FechaEnvio <= fechaFinTemp)
                                    //--
                                    && a.HER_TramiteId == (int)tramite
                                )
                        .AsNoTracking()
                        .Select(x => new DocumentoEnviadoViewModel
                        {
                            EnvioId = x.HER_EnvioId,
                            FechaEnvio = x.HER_FechaEnvio,
                            TipoEnvio = x.HER_TipoEnvioId,
                            TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                            Estado = x.HER_EstadoEnvio.HER_Nombre,
                            Folio = x.HER_Documento.HER_Folio,
                            Asunto = x.HER_Documento.HER_Asunto,
                            Adjuntos = (x.HER_AnexoId != null) ? true : false,
                            Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                            //--
                            Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                            Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                            Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                            //--
                            Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                            ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                            NoInterno = x.HER_Documento.HER_NoInterno,
                            TramiteId = x.HER_TramiteId,
                            Tramite = x.HER_Tramite.HER_Nombre,
                            Carpeta = x.HER_Carpeta.HER_Nombre
                        })
                        .OrderByDescending(x => x.FechaEnvio)
                        .AsQueryable()
                    );
            }
            else if (tramite != null && tipo == null && estado == null && string.IsNullOrEmpty(busqueda) && categoria != null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                enviadosQuery = (
                            _context.HER_Envio
                            .Where(a => a.HER_De.HER_UserName == username
                                    && a.HER_De.HER_Activo == true
                                    && a.HER_EsOculto == false
                                    && a.HER_Documento.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                                    //--
                                    && a.HER_TramiteId == (int)tramite
                                )
                            .AsNoTracking()
                            .Select(x => new DocumentoEnviadoViewModel
                            {
                                EnvioId = x.HER_EnvioId,
                                FechaEnvio = x.HER_FechaEnvio,
                                TipoEnvio = x.HER_TipoEnvioId,
                                TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                                Estado = x.HER_EstadoEnvio.HER_Nombre,
                                Folio = x.HER_Documento.HER_Folio,
                                Asunto = x.HER_Documento.HER_Asunto,
                                Adjuntos = (x.HER_AnexoId != null) ? true : false,
                                Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                                //--
                                Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                                Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                                Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                                //--
                                Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                                ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                                NoInterno = x.HER_Documento.HER_NoInterno,
                                TramiteId = x.HER_TramiteId,
                                Tramite = x.HER_Tramite.HER_Nombre,
                                Carpeta = x.HER_Carpeta.HER_Nombre
                            })
                            .OrderByDescending(x => x.FechaEnvio)
                            .AsQueryable()
                    );
            }
            else if (tramite != null && tipo == null && estado == null && string.IsNullOrEmpty(busqueda) && categoria == null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                enviadosQuery = _context.HER_Envio
                    .Where(a => a.HER_De.HER_UserName == username
                                && a.HER_De.HER_Activo == true
                                && a.HER_EsOculto == false
                                && (a.HER_FechaEnvio >= fechaInicioTemp && a.HER_FechaEnvio <= fechaFinTemp)
                                //--
                                && a.HER_TramiteId == (int)tramite
                        )
                    .AsNoTracking()
                    .Select(x => new DocumentoEnviadoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaEnvio = x.HER_FechaEnvio,
                        TipoEnvio = x.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        Folio = x.HER_Documento.HER_Folio,
                        Asunto = x.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_AnexoId != null) ? true : false,
                        Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                        Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                        Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                        //--
                        Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                        ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                        NoInterno = x.HER_Documento.HER_NoInterno,
                        TramiteId = x.HER_TramiteId,
                        Tramite = x.HER_Tramite.HER_Nombre,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderByDescending(x => x.FechaEnvio)
                    .AsQueryable();
            }
            else if (tramite != null && tipo == null && estado == null && string.IsNullOrEmpty(busqueda) && categoria == null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                enviadosQuery = _context.HER_Envio
                    .Where(a => a.HER_De.HER_UserName == username
                                && a.HER_De.HER_Activo == true
                                && a.HER_EsOculto == false
                                //--
                                && a.HER_TramiteId == (int)tramite
                    )
                    .AsNoTracking()
                    .Select(x => new DocumentoEnviadoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaEnvio = x.HER_FechaEnvio,
                        TipoEnvio = x.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        Folio = x.HER_Documento.HER_Folio,
                        Asunto = x.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_AnexoId != null) ? true : false,
                        Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                        Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                        Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                        //--
                        Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                        ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                        NoInterno = x.HER_Documento.HER_NoInterno,
                        TramiteId = x.HER_TramiteId,
                        Tramite = x.HER_Tramite.HER_Nombre,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderByDescending(x => x.FechaEnvio)
                    .AsQueryable();
            }

            else if (tramite == null && tipo != null && estado != null && !string.IsNullOrEmpty(busqueda) && categoria != null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);
                busqueda = busqueda.Replace('+', ' ');

                enviadosQuery = _context.HER_Envio
                        .Where(a => a.HER_De.HER_UserName == username
                                    && a.HER_De.HER_Activo == true
                                    && a.HER_EsOculto == false
                                    && (EF.Functions.Like(a.HER_Documento.HER_Folio, "%" + busqueda + "%")
                                    || EF.Functions.Like(a.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                                    || EF.Functions.Like(a.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                                    || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_NombreCompleto).FirstOrDefault(), "%" + busqueda + "%")
                                    || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(), "%" + busqueda + "%")
                                    )
                                    && a.HER_Documento.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                                    && (a.HER_FechaEnvio >= fechaInicioTemp && a.HER_FechaEnvio <= fechaFinTemp)
                                    && a.HER_EstadoEnvioId == (int)estado
                                    && a.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                                    && a.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                                    )
                        .AsNoTracking()
                        .Select(x => new DocumentoEnviadoViewModel
                        {
                            EnvioId = x.HER_EnvioId,
                            FechaEnvio = x.HER_FechaEnvio,
                            TipoEnvio = x.HER_TipoEnvioId,
                            TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                            Estado = x.HER_EstadoEnvio.HER_Nombre,
                            Folio = x.HER_Documento.HER_Folio,
                            Asunto = x.HER_Documento.HER_Asunto,
                            Adjuntos = (x.HER_AnexoId != null) ? true : false,
                            Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                            //--
                            Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                            Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                            Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                            //--
                            Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                            ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                            NoInterno = x.HER_Documento.HER_NoInterno,
                            TramiteId = x.HER_TramiteId,
                            Tramite = x.HER_Tramite.HER_Nombre,
                            Carpeta = x.HER_Carpeta.HER_Nombre
                        })
                        .OrderByDescending(x => x.FechaEnvio)
                        .AsQueryable();
            }
            else if (tramite == null && tipo != null && estado != null && !string.IsNullOrEmpty(busqueda) && categoria != null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                busqueda = busqueda.Replace('+', ' ');

                enviadosQuery = (_context.HER_Envio
                    .Where(a => a.HER_De.HER_UserName == username
                                && a.HER_De.HER_Activo == true
                                && a.HER_EsOculto == false
                                && (EF.Functions.Like(a.HER_Documento.HER_Folio, "%" + busqueda + "%")
                                || EF.Functions.Like(a.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                                || EF.Functions.Like(a.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                                || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_NombreCompleto).FirstOrDefault(), "%" + busqueda + "%")
                                || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(), "%" + busqueda + "%")
                                )
                                && a.HER_Documento.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                                && a.HER_EstadoEnvioId == (int)estado
                                && a.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                                && a.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                                )
                    .AsNoTracking()
                    .Select(x => new DocumentoEnviadoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaEnvio = x.HER_FechaEnvio,
                        TipoEnvio = x.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        Folio = x.HER_Documento.HER_Folio,
                        Asunto = x.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_AnexoId != null) ? true : false,
                        Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                        Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                        Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                        //--
                        Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                        ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                        NoInterno = x.HER_Documento.HER_NoInterno,
                        TramiteId = x.HER_TramiteId,
                        Tramite = x.HER_Tramite.HER_Nombre,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderByDescending(x => x.FechaEnvio)
                    .AsQueryable()
                );
            }
            else if (tramite == null && tipo != null && estado != null && !string.IsNullOrEmpty(busqueda) && categoria == null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);
                busqueda = busqueda.Replace('+', ' ');

                enviadosQuery = _context.HER_Envio
                    .Where(a => a.HER_De.HER_UserName == username
                                && a.HER_De.HER_Activo == true
                                && a.HER_EsOculto == false
                                && (EF.Functions.Like(a.HER_Documento.HER_Folio, "%" + busqueda + "%")
                                || EF.Functions.Like(a.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                                || EF.Functions.Like(a.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                                || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_NombreCompleto).FirstOrDefault(), "%" + busqueda + "%")
                                || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(), "%" + busqueda + "%")
                                )
                                && (a.HER_FechaEnvio >= fechaInicioTemp && a.HER_FechaEnvio <= fechaFinTemp)
                                && a.HER_EstadoEnvioId == (int)estado
                                && a.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                                && a.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                            )
                    .AsNoTracking()
                    .Select(x => new DocumentoEnviadoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaEnvio = x.HER_FechaEnvio,
                        TipoEnvio = x.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        Folio = x.HER_Documento.HER_Folio,
                        Asunto = x.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_AnexoId != null) ? true : false,
                        Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                        Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                        Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                        //--
                        Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                        ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                        NoInterno = x.HER_Documento.HER_NoInterno,
                        TramiteId = x.HER_TramiteId,
                        Tramite = x.HER_Tramite.HER_Nombre,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderByDescending(x => x.FechaEnvio)
                    .AsQueryable();
            }
            else if (tramite == null && tipo != null && estado != null && !string.IsNullOrEmpty(busqueda) && categoria == null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                busqueda = busqueda.Replace('+', ' ');

                enviadosQuery = _context.HER_Envio
                    .Where(a => a.HER_De.HER_UserName == username
                                && a.HER_De.HER_Activo == true
                                && a.HER_EsOculto == false
                                && (EF.Functions.Like(a.HER_Documento.HER_Folio, "%" + busqueda + "%")
                                || EF.Functions.Like(a.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                                || EF.Functions.Like(a.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                                || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_NombreCompleto).FirstOrDefault(), "%" + busqueda + "%")
                                || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(), "%" + busqueda + "%")
                                )
                                && a.HER_EstadoEnvioId == (int)estado
                                && a.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                                && a.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                        )
                    .AsNoTracking()
                    .Select(x => new DocumentoEnviadoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaEnvio = x.HER_FechaEnvio,
                        TipoEnvio = x.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        Folio = x.HER_Documento.HER_Folio,
                        Asunto = x.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_AnexoId != null) ? true : false,
                        Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                        Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                        Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                        //--
                        Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                        ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                        NoInterno = x.HER_Documento.HER_NoInterno,
                        TramiteId = x.HER_TramiteId,
                        Tramite = x.HER_Tramite.HER_Nombre,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderByDescending(x => x.FechaEnvio)
                    .AsQueryable();
            }
            else if (tramite == null && tipo != null && estado != null && string.IsNullOrEmpty(busqueda) && categoria != null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                enviadosQuery = (_context.HER_Envio
                        .Where(a => a.HER_De.HER_UserName == username
                                    && a.HER_De.HER_Activo == true
                                    && a.HER_EsOculto == false
                                    && a.HER_Documento.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                                    && (a.HER_FechaEnvio >= fechaInicioTemp && a.HER_FechaEnvio <= fechaFinTemp)
                                    && a.HER_EstadoEnvioId == (int)estado
                                    && a.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                                    && a.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                                    )
                        .AsNoTracking()
                        .Select(x => new DocumentoEnviadoViewModel
                        {
                            EnvioId = x.HER_EnvioId,
                            FechaEnvio = x.HER_FechaEnvio,
                            TipoEnvio = x.HER_TipoEnvioId,
                            TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                            Estado = x.HER_EstadoEnvio.HER_Nombre,
                            Folio = x.HER_Documento.HER_Folio,
                            Asunto = x.HER_Documento.HER_Asunto,
                            Adjuntos = (x.HER_AnexoId != null) ? true : false,
                            Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                            //--
                            Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                            Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                            Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                            //--
                            Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                            ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                            NoInterno = x.HER_Documento.HER_NoInterno,
                            TramiteId = x.HER_TramiteId,
                            Tramite = x.HER_Tramite.HER_Nombre,
                            Carpeta = x.HER_Carpeta.HER_Nombre
                        })
                        .OrderByDescending(x => x.FechaEnvio)
                        .AsQueryable()
                    );
            }
            else if (tramite == null && tipo != null && estado != null && string.IsNullOrEmpty(busqueda) && categoria != null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                enviadosQuery = (
                            _context.HER_Envio
                            .Where(a => a.HER_De.HER_UserName == username
                                        && a.HER_De.HER_Activo == true
                                        && a.HER_EsOculto == false
                                        && a.HER_Documento.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                                        && a.HER_EstadoEnvioId == (int)estado
                                        && a.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                                        && a.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                                        )
                            .AsNoTracking()
                            .Select(x => new DocumentoEnviadoViewModel
                            {
                                EnvioId = x.HER_EnvioId,
                                FechaEnvio = x.HER_FechaEnvio,
                                TipoEnvio = x.HER_TipoEnvioId,
                                TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                                Estado = x.HER_EstadoEnvio.HER_Nombre,
                                Folio = x.HER_Documento.HER_Folio,
                                Asunto = x.HER_Documento.HER_Asunto,
                                Adjuntos = (x.HER_AnexoId != null) ? true : false,
                                Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                                //--
                                Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                                Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                                Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                                //--
                                Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                                ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                                NoInterno = x.HER_Documento.HER_NoInterno,
                                TramiteId = x.HER_TramiteId,
                                Tramite = x.HER_Tramite.HER_Nombre,
                                Carpeta = x.HER_Carpeta.HER_Nombre
                            })
                            .OrderByDescending(x => x.FechaEnvio)
                            .AsQueryable()
                    );
            }
            else if (tramite == null && tipo != null && estado != null && string.IsNullOrEmpty(busqueda) && categoria == null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                enviadosQuery = _context.HER_Envio
                    .Where(a => a.HER_De.HER_UserName == username
                                && a.HER_De.HER_Activo == true
                                && a.HER_EsOculto == false
                                && (a.HER_FechaEnvio >= fechaInicioTemp && a.HER_FechaEnvio <= fechaFinTemp)
                                && a.HER_EstadoEnvioId == (int)estado
                                && a.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                                && a.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                                )
                    .AsNoTracking()
                    .Select(x => new DocumentoEnviadoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaEnvio = x.HER_FechaEnvio,
                        TipoEnvio = x.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        Folio = x.HER_Documento.HER_Folio,
                        Asunto = x.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_AnexoId != null) ? true : false,
                        Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                        Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                        Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                        //--
                        Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                        ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                        NoInterno = x.HER_Documento.HER_NoInterno,
                        TramiteId = x.HER_TramiteId,
                        Tramite = x.HER_Tramite.HER_Nombre,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderByDescending(x => x.FechaEnvio)
                    .AsQueryable();
            }
            else if (tramite == null && tipo != null && estado != null && string.IsNullOrEmpty(busqueda) && categoria == null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                enviadosQuery = _context.HER_Envio
                    .Where(a => a.HER_De.HER_UserName == username
                                && a.HER_De.HER_Activo == true
                                && a.HER_EsOculto == false
                                && a.HER_EstadoEnvioId == (int)estado
                                && a.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                                && a.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                                )
                    .AsNoTracking()
                    .Select(x => new DocumentoEnviadoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaEnvio = x.HER_FechaEnvio,
                        TipoEnvio = x.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        Folio = x.HER_Documento.HER_Folio,
                        Asunto = x.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_AnexoId != null) ? true : false,
                        Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                        Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                        Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                        //--
                        Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                        ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                        NoInterno = x.HER_Documento.HER_NoInterno,
                        TramiteId = x.HER_TramiteId,
                        Tramite = x.HER_Tramite.HER_Nombre,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderByDescending(x => x.FechaEnvio)
                    .AsQueryable();
            }
            else if (tramite == null && tipo != null && estado == null && !string.IsNullOrEmpty(busqueda) && categoria != null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);
                busqueda = busqueda.Replace('+', ' ');

                enviadosQuery = (_context.HER_Envio
                        .Where(a => a.HER_De.HER_UserName == username
                                    && a.HER_De.HER_Activo == true
                                    && a.HER_EsOculto == false
                                    && (EF.Functions.Like(a.HER_Documento.HER_Folio, "%" + busqueda + "%")
                                    || EF.Functions.Like(a.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                                    || EF.Functions.Like(a.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                                    || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_NombreCompleto).FirstOrDefault(), "%" + busqueda + "%")
                                    || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(), "%" + busqueda + "%")
                                    )
                                    && a.HER_Documento.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                                    && (a.HER_FechaEnvio >= fechaInicioTemp && a.HER_FechaEnvio <= fechaFinTemp)
                                    && a.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                                    && a.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                                    )
                        .AsNoTracking()
                        .Select(x => new DocumentoEnviadoViewModel
                        {
                            EnvioId = x.HER_EnvioId,
                            FechaEnvio = x.HER_FechaEnvio,
                            TipoEnvio = x.HER_TipoEnvioId,
                            TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                            Estado = x.HER_EstadoEnvio.HER_Nombre,
                            Folio = x.HER_Documento.HER_Folio,
                            Asunto = x.HER_Documento.HER_Asunto,
                            Adjuntos = (x.HER_AnexoId != null) ? true : false,
                            Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                            //--
                            Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                            Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                            Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                            //--
                            Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                            ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                            NoInterno = x.HER_Documento.HER_NoInterno,
                            TramiteId = x.HER_TramiteId,
                            Tramite = x.HER_Tramite.HER_Nombre,
                            Carpeta = x.HER_Carpeta.HER_Nombre
                        })
                        .OrderByDescending(x => x.FechaEnvio)
                        .AsQueryable()
                    );
            }
            else if (tramite == null && tipo != null && estado == null && !string.IsNullOrEmpty(busqueda) && categoria != null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                busqueda = busqueda.Replace('+', ' ');

                enviadosQuery = (_context.HER_Envio
                    .Where(a => a.HER_De.HER_UserName == username
                                && a.HER_De.HER_Activo == true
                                && a.HER_EsOculto == false
                                && (EF.Functions.Like(a.HER_Documento.HER_Folio, "%" + busqueda + "%")
                                || EF.Functions.Like(a.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                                || EF.Functions.Like(a.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                                || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_NombreCompleto).FirstOrDefault(), "%" + busqueda + "%")
                                || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(), "%" + busqueda + "%")
                                )
                                && a.HER_Documento.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                                && a.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                                && a.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                                )
                    .AsNoTracking()
                    .Select(x => new DocumentoEnviadoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaEnvio = x.HER_FechaEnvio,
                        TipoEnvio = x.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        Folio = x.HER_Documento.HER_Folio,
                        Asunto = x.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_AnexoId != null) ? true : false,
                        Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                        Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                        Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                        //--
                        Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                        ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                        NoInterno = x.HER_Documento.HER_NoInterno,
                        TramiteId = x.HER_TramiteId,
                        Tramite = x.HER_Tramite.HER_Nombre,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderByDescending(x => x.FechaEnvio)
                    .AsQueryable()
                );
            }
            else if (tramite == null && tipo != null && estado == null && !string.IsNullOrEmpty(busqueda) && categoria == null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);
                busqueda = busqueda.Replace('+', ' ');

                enviadosQuery = _context.HER_Envio
                    .Where(a => a.HER_De.HER_UserName == username
                                && a.HER_De.HER_Activo == true
                                && a.HER_EsOculto == false
                                && (EF.Functions.Like(a.HER_Documento.HER_Folio, "%" + busqueda + "%")
                                || EF.Functions.Like(a.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                                || EF.Functions.Like(a.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                                || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_NombreCompleto).FirstOrDefault(), "%" + busqueda + "%")
                                || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(), "%" + busqueda + "%")
                                )
                                && (a.HER_FechaEnvio >= fechaInicioTemp && a.HER_FechaEnvio <= fechaFinTemp)
                                && a.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                                && a.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                                )
                    .AsNoTracking()
                    .Select(x => new DocumentoEnviadoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaEnvio = x.HER_FechaEnvio,
                        TipoEnvio = x.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        Folio = x.HER_Documento.HER_Folio,
                        Asunto = x.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_AnexoId != null) ? true : false,
                        Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                        Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                        Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                        //--
                        Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                        ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                        NoInterno = x.HER_Documento.HER_NoInterno,
                        TramiteId = x.HER_TramiteId,
                        Tramite = x.HER_Tramite.HER_Nombre,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderByDescending(x => x.FechaEnvio)
                    .AsQueryable();
            }
            else if (tramite == null && tipo != null && estado == null && !string.IsNullOrEmpty(busqueda) && categoria == null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                busqueda = busqueda.Replace('+', ' ');

                enviadosQuery = _context.HER_Envio
                    .Where(a => a.HER_De.HER_UserName == username
                                && a.HER_De.HER_Activo == true
                                && a.HER_EsOculto == false
                                && (EF.Functions.Like(a.HER_Documento.HER_Folio, "%" + busqueda + "%")
                                || EF.Functions.Like(a.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                                || EF.Functions.Like(a.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                                || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_NombreCompleto).FirstOrDefault(), "%" + busqueda + "%")
                                || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(), "%" + busqueda + "%")
                                )
                                && a.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                                && a.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                        )
                    .AsNoTracking()
                    .Select(x => new DocumentoEnviadoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaEnvio = x.HER_FechaEnvio,
                        TipoEnvio = x.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        Folio = x.HER_Documento.HER_Folio,
                        Asunto = x.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_AnexoId != null) ? true : false,
                        Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                        Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                        Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                        //--
                        Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                        ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                        NoInterno = x.HER_Documento.HER_NoInterno,
                        TramiteId = x.HER_TramiteId,
                        Tramite = x.HER_Tramite.HER_Nombre,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderByDescending(x => x.FechaEnvio)
                    .AsQueryable();
            }
            else if (tramite == null && tipo != null && estado == null && string.IsNullOrEmpty(busqueda) && categoria != null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                enviadosQuery = (_context.HER_Envio
                        .Where(a => a.HER_De.HER_UserName == username
                                    && a.HER_De.HER_Activo == true
                                    && a.HER_EsOculto == false
                                    && a.HER_Documento.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                                    && (a.HER_FechaEnvio >= fechaInicioTemp && a.HER_FechaEnvio <= fechaFinTemp)
                                    && a.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                                    && a.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                                    )
                        .AsNoTracking()
                        .Select(x => new DocumentoEnviadoViewModel
                        {
                            EnvioId = x.HER_EnvioId,
                            FechaEnvio = x.HER_FechaEnvio,
                            TipoEnvio = x.HER_TipoEnvioId,
                            TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                            Estado = x.HER_EstadoEnvio.HER_Nombre,
                            Folio = x.HER_Documento.HER_Folio,
                            Asunto = x.HER_Documento.HER_Asunto,
                            Adjuntos = (x.HER_AnexoId != null) ? true : false,
                            Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                            //--
                            Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                            Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                            Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                            //--
                            Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                            ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                            NoInterno = x.HER_Documento.HER_NoInterno,
                            TramiteId = x.HER_TramiteId,
                            Tramite = x.HER_Tramite.HER_Nombre,
                            Carpeta = x.HER_Carpeta.HER_Nombre
                        })
                        .OrderByDescending(x => x.FechaEnvio)
                        .AsQueryable()
                    );
            }
            else if (tramite == null && tipo != null && estado == null && string.IsNullOrEmpty(busqueda) && categoria != null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                enviadosQuery = (
                            _context.HER_Envio
                            .Where(a => a.HER_De.HER_UserName == username
                                        && a.HER_De.HER_Activo == true
                                        && a.HER_EsOculto == false
                                        && a.HER_Documento.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                                        && a.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                                        && a.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                                        )
                            .AsNoTracking()
                            .Select(x => new DocumentoEnviadoViewModel
                            {
                                EnvioId = x.HER_EnvioId,
                                FechaEnvio = x.HER_FechaEnvio,
                                TipoEnvio = x.HER_TipoEnvioId,
                                TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                                Estado = x.HER_EstadoEnvio.HER_Nombre,
                                Folio = x.HER_Documento.HER_Folio,
                                Asunto = x.HER_Documento.HER_Asunto,
                                Adjuntos = (x.HER_AnexoId != null) ? true : false,
                                Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                                //--
                                Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                                Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                                Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                                //--
                                Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                                ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                                NoInterno = x.HER_Documento.HER_NoInterno,
                                TramiteId = x.HER_TramiteId,
                                Tramite = x.HER_Tramite.HER_Nombre,
                                Carpeta = x.HER_Carpeta.HER_Nombre
                            })
                            .OrderByDescending(x => x.FechaEnvio)
                            .AsQueryable()
                    );
            }
            else if (tramite == null && tipo != null && estado == null && string.IsNullOrEmpty(busqueda) && categoria == null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                enviadosQuery = _context.HER_Envio
                    .Where(a => a.HER_De.HER_UserName == username
                                && a.HER_De.HER_Activo == true
                                && a.HER_EsOculto == false
                                && (a.HER_FechaEnvio >= fechaInicioTemp && a.HER_FechaEnvio <= fechaFinTemp)
                                && a.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                                && a.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                                )
                    .AsNoTracking()
                    .Select(x => new DocumentoEnviadoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaEnvio = x.HER_FechaEnvio,
                        TipoEnvio = x.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        Folio = x.HER_Documento.HER_Folio,
                        Asunto = x.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_AnexoId != null) ? true : false,
                        Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                        Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                        Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                        //--
                        Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                        ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                        NoInterno = x.HER_Documento.HER_NoInterno,
                        TramiteId = x.HER_TramiteId,
                        Tramite = x.HER_Tramite.HER_Nombre,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderByDescending(x => x.FechaEnvio)
                    .AsQueryable();
            }
            else if (tramite == null && tipo != null && estado == null && string.IsNullOrEmpty(busqueda) && categoria == null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                enviadosQuery = _context.HER_Envio
                    .Where(a => a.HER_De.HER_UserName == username
                                && a.HER_De.HER_Activo == true
                                && a.HER_EsOculto == false
                                && a.HER_TipoEnvioId == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? ConstTipoEnvio.TipoEnvioN1 : (int)tipo)
                                && a.HER_EsReenvio == ((int)tipo == ConstTipoEnvio.TipoEnvioN5 ? true : false)
                                )
                    .AsNoTracking()
                    .Select(x => new DocumentoEnviadoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaEnvio = x.HER_FechaEnvio,
                        TipoEnvio = x.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        Folio = x.HER_Documento.HER_Folio,
                        Asunto = x.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_AnexoId != null) ? true : false,
                        Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                        Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                        Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                        //--
                        Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                        ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                        NoInterno = x.HER_Documento.HER_NoInterno,
                        TramiteId = x.HER_TramiteId,
                        Tramite = x.HER_Tramite.HER_Nombre,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderByDescending(x => x.FechaEnvio)
                    .AsQueryable();
            }
            else if (tramite == null && tipo == null && estado != null && !string.IsNullOrEmpty(busqueda) && categoria != null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);
                busqueda = busqueda.Replace('+', ' ');

                enviadosQuery = (_context.HER_Envio
                        .Where(a => a.HER_De.HER_UserName == username
                            && a.HER_De.HER_Activo == true
                            && a.HER_EsOculto == false
                            && (EF.Functions.Like(a.HER_Documento.HER_Folio, "%" + busqueda + "%")
                            || EF.Functions.Like(a.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                            || EF.Functions.Like(a.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                            || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_NombreCompleto).FirstOrDefault(), "%" + busqueda + "%")
                            || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(), "%" + busqueda + "%")
                            )
                            && a.HER_Documento.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                            && (a.HER_FechaEnvio >= fechaInicioTemp && a.HER_FechaEnvio <= fechaFinTemp)
                            && a.HER_EstadoEnvioId == (int)estado)
                        .AsNoTracking()
                        .Select(x => new DocumentoEnviadoViewModel
                        {
                            EnvioId = x.HER_EnvioId,
                            FechaEnvio = x.HER_FechaEnvio,
                            TipoEnvio = x.HER_TipoEnvioId,
                            TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                            Estado = x.HER_EstadoEnvio.HER_Nombre,
                            Folio = x.HER_Documento.HER_Folio,
                            Asunto = x.HER_Documento.HER_Asunto,
                            Adjuntos = (x.HER_AnexoId != null) ? true : false,
                            Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                            //--
                            Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                            Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                            Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                            //--
                            Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                            ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                            NoInterno = x.HER_Documento.HER_NoInterno,
                            TramiteId = x.HER_TramiteId,
                            Tramite = x.HER_Tramite.HER_Nombre,
                            Carpeta = x.HER_Carpeta.HER_Nombre
                        })
                        .OrderByDescending(x => x.FechaEnvio)
                        .AsQueryable()
                    );
            }
            else if (tramite == null && tipo == null && estado != null && !string.IsNullOrEmpty(busqueda) && categoria != null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                busqueda = busqueda.Replace('+', ' ');

                enviadosQuery = (_context.HER_Envio
                    .Where(a => a.HER_De.HER_UserName == username
                                && a.HER_De.HER_Activo == true
                                && a.HER_EsOculto == false
                                && (EF.Functions.Like(a.HER_Documento.HER_Folio, "%" + busqueda + "%")
                                || EF.Functions.Like(a.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                                || EF.Functions.Like(a.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                                || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_NombreCompleto).FirstOrDefault(), "%" + busqueda + "%")
                                || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(), "%" + busqueda + "%")
                                )
                                && a.HER_Documento.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                                && a.HER_EstadoEnvioId == (int)estado)
                    .AsNoTracking()
                    .Select(x => new DocumentoEnviadoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaEnvio = x.HER_FechaEnvio,
                        TipoEnvio = x.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        Folio = x.HER_Documento.HER_Folio,
                        Asunto = x.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_AnexoId != null) ? true : false,
                        Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                        Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                        Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                        //--
                        Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                        ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                        NoInterno = x.HER_Documento.HER_NoInterno,
                        TramiteId = x.HER_TramiteId,
                        Tramite = x.HER_Tramite.HER_Nombre,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderByDescending(x => x.FechaEnvio)
                    .AsQueryable()
                );
            }
            else if (tramite == null && tipo == null && estado != null && !string.IsNullOrEmpty(busqueda) && categoria == null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);
                busqueda = busqueda.Replace('+', ' ');

                enviadosQuery = _context.HER_Envio
                    .Where(a => a.HER_De.HER_UserName == username
                                && a.HER_De.HER_Activo == true
                                && a.HER_EsOculto == false
                                && (EF.Functions.Like(a.HER_Documento.HER_Folio, "%" + busqueda + "%")
                                || EF.Functions.Like(a.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                                || EF.Functions.Like(a.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                                || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_NombreCompleto).FirstOrDefault(), "%" + busqueda + "%")
                                || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(), "%" + busqueda + "%")
                                )
                                && (a.HER_FechaEnvio >= fechaInicioTemp && a.HER_FechaEnvio <= fechaFinTemp)
                                && a.HER_EstadoEnvioId == (int)estado)
                    .AsNoTracking()
                    .Select(x => new DocumentoEnviadoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaEnvio = x.HER_FechaEnvio,
                        TipoEnvio = x.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        Folio = x.HER_Documento.HER_Folio,
                        Asunto = x.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_AnexoId != null) ? true : false,
                        Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                        Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                        Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                        //--
                        Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                        ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                        NoInterno = x.HER_Documento.HER_NoInterno,
                        TramiteId = x.HER_TramiteId,
                        Tramite = x.HER_Tramite.HER_Nombre,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderByDescending(x => x.FechaEnvio)
                    .AsQueryable();
            }
            else if (tramite == null && tipo == null && estado != null && !string.IsNullOrEmpty(busqueda) && categoria == null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                busqueda = busqueda.Replace('+', ' ');

                enviadosQuery = _context.HER_Envio
                    .Where(a => a.HER_De.HER_UserName == username
                                && a.HER_De.HER_Activo == true
                                && a.HER_EsOculto == false
                                && (EF.Functions.Like(a.HER_Documento.HER_Folio, "%" + busqueda + "%")
                                || EF.Functions.Like(a.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                                || EF.Functions.Like(a.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                                || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_NombreCompleto).FirstOrDefault(), "%" + busqueda + "%")
                                || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(), "%" + busqueda + "%")
                                )
                                && a.HER_EstadoEnvioId == (int)estado
                        )
                    .AsNoTracking()
                    .Select(x => new DocumentoEnviadoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaEnvio = x.HER_FechaEnvio,
                        TipoEnvio = x.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        Folio = x.HER_Documento.HER_Folio,
                        Asunto = x.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_AnexoId != null) ? true : false,
                        Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                        Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                        Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                        //--
                        Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                        ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                        NoInterno = x.HER_Documento.HER_NoInterno,
                        TramiteId = x.HER_TramiteId,
                        Tramite = x.HER_Tramite.HER_Nombre,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderByDescending(x => x.FechaEnvio)
                    .AsQueryable();
            }
            else if (tramite == null && tipo == null && estado != null && string.IsNullOrEmpty(busqueda) && categoria != null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                enviadosQuery = (_context.HER_Envio
                        .Where(a => a.HER_De.HER_UserName == username
                            && a.HER_De.HER_Activo == true
                            && a.HER_EsOculto == false
                            && a.HER_Documento.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                            && (a.HER_FechaEnvio >= fechaInicioTemp && a.HER_FechaEnvio <= fechaFinTemp)
                            && a.HER_EstadoEnvioId == (int)estado)
                        .AsNoTracking()
                        .Select(x => new DocumentoEnviadoViewModel
                        {
                            EnvioId = x.HER_EnvioId,
                            FechaEnvio = x.HER_FechaEnvio,
                            TipoEnvio = x.HER_TipoEnvioId,
                            TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                            Estado = x.HER_EstadoEnvio.HER_Nombre,
                            Folio = x.HER_Documento.HER_Folio,
                            Asunto = x.HER_Documento.HER_Asunto,
                            Adjuntos = (x.HER_AnexoId != null) ? true : false,
                            Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                            //--
                            Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                            Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                            Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                            //--
                            Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                            ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                            NoInterno = x.HER_Documento.HER_NoInterno,
                            TramiteId = x.HER_TramiteId,
                            Tramite = x.HER_Tramite.HER_Nombre,
                            Carpeta = x.HER_Carpeta.HER_Nombre
                        })
                        .OrderByDescending(x => x.FechaEnvio)
                        .AsQueryable()
                    );
            }
            else if (tramite == null && tipo == null && estado != null && string.IsNullOrEmpty(busqueda) && categoria != null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                enviadosQuery = (
                            _context.HER_Envio
                            .Where(a => a.HER_De.HER_UserName == username
                                        && a.HER_De.HER_Activo == true
                                        && a.HER_EsOculto == false
                                        && a.HER_Documento.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                                        && a.HER_EstadoEnvioId == (int)estado)
                            .AsNoTracking()
                            .Select(x => new DocumentoEnviadoViewModel
                            {
                                EnvioId = x.HER_EnvioId,
                                FechaEnvio = x.HER_FechaEnvio,
                                TipoEnvio = x.HER_TipoEnvioId,
                                TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                                Estado = x.HER_EstadoEnvio.HER_Nombre,
                                Folio = x.HER_Documento.HER_Folio,
                                Asunto = x.HER_Documento.HER_Asunto,
                                Adjuntos = (x.HER_AnexoId != null) ? true : false,
                                Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                                //--
                                Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                                Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                                Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                                //--
                                Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                                ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                                NoInterno = x.HER_Documento.HER_NoInterno,
                                TramiteId = x.HER_TramiteId,
                                Tramite = x.HER_Tramite.HER_Nombre,
                                Carpeta = x.HER_Carpeta.HER_Nombre
                            })
                            .OrderByDescending(x => x.FechaEnvio)
                            .AsQueryable()
                    );
            }
            else if (tramite == null && tipo == null && estado != null && string.IsNullOrEmpty(busqueda) && categoria == null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                enviadosQuery = _context.HER_Envio
                    .Where(a => a.HER_De.HER_UserName == username
                                && a.HER_De.HER_Activo == true
                                && a.HER_EsOculto == false
                                && (a.HER_FechaEnvio >= fechaInicioTemp && a.HER_FechaEnvio <= fechaFinTemp)
                                && a.HER_EstadoEnvioId == (int)estado)
                    .AsNoTracking()
                    .Select(x => new DocumentoEnviadoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaEnvio = x.HER_FechaEnvio,
                        TipoEnvio = x.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        Folio = x.HER_Documento.HER_Folio,
                        Asunto = x.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_AnexoId != null) ? true : false,
                        Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                        Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                        Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                        //--
                        Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                        ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                        NoInterno = x.HER_Documento.HER_NoInterno,
                        TramiteId = x.HER_TramiteId,
                        Tramite = x.HER_Tramite.HER_Nombre,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderByDescending(x => x.FechaEnvio)
                    .AsQueryable();
            }
            else if (tramite == null && tipo == null && estado != null && string.IsNullOrEmpty(busqueda) && categoria == null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                enviadosQuery = _context.HER_Envio
                    .Where(a => a.HER_De.HER_UserName == username
                                && a.HER_De.HER_Activo == true
                                && a.HER_EsOculto == false
                                && a.HER_EstadoEnvioId == (int)estado)
                    .AsNoTracking()
                    .Select(x => new DocumentoEnviadoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaEnvio = x.HER_FechaEnvio,
                        TipoEnvio = x.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        Folio = x.HER_Documento.HER_Folio,
                        Asunto = x.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_AnexoId != null) ? true : false,
                        Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                        Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                        Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                        //--
                        Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                        ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                        NoInterno = x.HER_Documento.HER_NoInterno,
                        TramiteId = x.HER_TramiteId,
                        Tramite = x.HER_Tramite.HER_Nombre,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderByDescending(x => x.FechaEnvio)
                    .AsQueryable();
            }
            else if (tramite == null && tipo == null && estado == null && !string.IsNullOrEmpty(busqueda) && categoria != null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);
                busqueda = busqueda.Replace('+', ' ');

                enviadosQuery = (_context.HER_Envio
                        .Where(a => a.HER_De.HER_UserName == username
                                    && a.HER_De.HER_Activo == true
                                    && a.HER_EsOculto == false
                                    && (EF.Functions.Like(a.HER_Documento.HER_Folio, "%" + busqueda + "%")
                                    || EF.Functions.Like(a.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                                    || EF.Functions.Like(a.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                                    || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_NombreCompleto).FirstOrDefault(), "%" + busqueda + "%")
                                    || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(), "%" + busqueda + "%")
                                    )
                                    && a.HER_Documento.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                                    && (a.HER_FechaEnvio >= fechaInicioTemp && a.HER_FechaEnvio <= fechaFinTemp)
                                    )
                        .AsNoTracking()
                        .Select(x => new DocumentoEnviadoViewModel
                        {
                            EnvioId = x.HER_EnvioId,
                            FechaEnvio = x.HER_FechaEnvio,
                            TipoEnvio = x.HER_TipoEnvioId,
                            TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                            Estado = x.HER_EstadoEnvio.HER_Nombre,
                            Folio = x.HER_Documento.HER_Folio,
                            Asunto = x.HER_Documento.HER_Asunto,
                            Adjuntos = (x.HER_AnexoId != null) ? true : false,
                            Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                            //--
                            Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                            Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                            Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                            //--
                            Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                            ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                            NoInterno = x.HER_Documento.HER_NoInterno,
                            TramiteId = x.HER_TramiteId,
                            Tramite = x.HER_Tramite.HER_Nombre,
                            Carpeta = x.HER_Carpeta.HER_Nombre
                        })
                        .OrderByDescending(x => x.FechaEnvio)
                        .AsQueryable()
                    );
            }
            else if (tramite == null && tipo == null && estado == null && !string.IsNullOrEmpty(busqueda) && categoria != null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                busqueda = busqueda.Replace('+', ' ');

                enviadosQuery = (_context.HER_Envio
                    .Where(a => a.HER_De.HER_UserName == username
                                && a.HER_De.HER_Activo == true
                                && a.HER_EsOculto == false
                                && (EF.Functions.Like(a.HER_Documento.HER_Folio, "%" + busqueda + "%")
                                || EF.Functions.Like(a.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                                || EF.Functions.Like(a.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                                || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_NombreCompleto).FirstOrDefault(), "%" + busqueda + "%")
                                || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(), "%" + busqueda + "%")
                                )
                                && a.HER_Documento.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                                )
                    .AsNoTracking()
                    .Select(x => new DocumentoEnviadoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaEnvio = x.HER_FechaEnvio,
                        TipoEnvio = x.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        Folio = x.HER_Documento.HER_Folio,
                        Asunto = x.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_AnexoId != null) ? true : false,
                        Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                        Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                        Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                        //--
                        Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                        ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                        NoInterno = x.HER_Documento.HER_NoInterno,
                        TramiteId = x.HER_TramiteId,
                        Tramite = x.HER_Tramite.HER_Nombre,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderByDescending(x => x.FechaEnvio)
                    .AsQueryable()
                );
            }
            else if (tramite == null && tipo == null && estado == null && !string.IsNullOrEmpty(busqueda) && categoria == null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);
                busqueda = busqueda.Replace('+', ' ');

                enviadosQuery = _context.HER_Envio
                    .Where(a => a.HER_De.HER_UserName == username
                                && a.HER_De.HER_Activo == true
                                && a.HER_EsOculto == false
                                && (EF.Functions.Like(a.HER_Documento.HER_Folio, "%" + busqueda + "%")
                                || EF.Functions.Like(a.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                                || EF.Functions.Like(a.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                                || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_NombreCompleto).FirstOrDefault(), "%" + busqueda + "%")
                                || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(), "%" + busqueda + "%")
                                )
                                && (a.HER_FechaEnvio >= fechaInicioTemp && a.HER_FechaEnvio <= fechaFinTemp))
                    .AsNoTracking()
                    .Select(x => new DocumentoEnviadoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaEnvio = x.HER_FechaEnvio,
                        TipoEnvio = x.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        Folio = x.HER_Documento.HER_Folio,
                        Asunto = x.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_AnexoId != null) ? true : false,
                        Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                        Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                        Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                        //--
                        Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                        ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                        NoInterno = x.HER_Documento.HER_NoInterno,
                        TramiteId = x.HER_TramiteId,
                        Tramite = x.HER_Tramite.HER_Nombre,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderByDescending(x => x.FechaEnvio)
                    .AsQueryable();
            }
            else if (tramite == null && tipo == null && estado == null && !string.IsNullOrEmpty(busqueda) && categoria == null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                busqueda = busqueda.Replace('+', ' ');

                enviadosQuery = _context.HER_Envio
                    .Where(a => a.HER_De.HER_UserName == username
                                && a.HER_De.HER_Activo == true
                                && a.HER_EsOculto == false
                                && (EF.Functions.Like(a.HER_Documento.HER_Folio, "%" + busqueda + "%")
                                || EF.Functions.Like(a.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                                || EF.Functions.Like(a.HER_Documento.HER_NoInterno, "%" + busqueda + "%")
                                || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_NombreCompleto).FirstOrDefault(), "%" + busqueda + "%")
                                || EF.Functions.Like((from s in a.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(), "%" + busqueda + "%")
                                )
                        )
                    .AsNoTracking()
                    .Select(x => new DocumentoEnviadoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaEnvio = x.HER_FechaEnvio,
                        TipoEnvio = x.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        Folio = x.HER_Documento.HER_Folio,
                        Asunto = x.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_AnexoId != null) ? true : false,
                        Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                        Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                        Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                        //--
                        Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                        ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                        NoInterno = x.HER_Documento.HER_NoInterno,
                        TramiteId = x.HER_TramiteId,
                        Tramite = x.HER_Tramite.HER_Nombre,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderByDescending(x => x.FechaEnvio)
                    .AsQueryable();
            }
            else if (tramite == null && tipo == null && estado == null && string.IsNullOrEmpty(busqueda) && categoria != null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                enviadosQuery = (_context.HER_Envio
                        .Where(a => a.HER_De.HER_UserName == username
                                    && a.HER_De.HER_Activo == true
                                    && a.HER_EsOculto == false
                                    && a.HER_Documento.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                                    && (a.HER_FechaEnvio >= fechaInicioTemp && a.HER_FechaEnvio <= fechaFinTemp)
                                )
                        .AsNoTracking()
                        .Select(x => new DocumentoEnviadoViewModel
                        {
                            EnvioId = x.HER_EnvioId,
                            FechaEnvio = x.HER_FechaEnvio,
                            TipoEnvio = x.HER_TipoEnvioId,
                            TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                            Estado = x.HER_EstadoEnvio.HER_Nombre,
                            Folio = x.HER_Documento.HER_Folio,
                            Asunto = x.HER_Documento.HER_Asunto,
                            Adjuntos = (x.HER_AnexoId != null) ? true : false,
                            Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                            //--
                            Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                            Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                            Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                            //--
                            Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                            ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                            NoInterno = x.HER_Documento.HER_NoInterno,
                            TramiteId = x.HER_TramiteId,
                            Tramite = x.HER_Tramite.HER_Nombre,
                            Carpeta = x.HER_Carpeta.HER_Nombre
                        })
                        .OrderByDescending(x => x.FechaEnvio)
                        .AsQueryable()
                    );
            }
            else if (tramite == null && tipo == null && estado == null && string.IsNullOrEmpty(busqueda) && categoria != null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                enviadosQuery = (
                            _context.HER_Envio
                            .Where(a => a.HER_De.HER_UserName == username
                                        && a.HER_De.HER_Activo == true
                                        && a.HER_EsOculto == false
                                        && a.HER_Documento.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria))
                            .AsNoTracking()
                            .Select(x => new DocumentoEnviadoViewModel
                            {
                                EnvioId = x.HER_EnvioId,
                                FechaEnvio = x.HER_FechaEnvio,
                                TipoEnvio = x.HER_TipoEnvioId,
                                TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                                Estado = x.HER_EstadoEnvio.HER_Nombre,
                                Folio = x.HER_Documento.HER_Folio,
                                Asunto = x.HER_Documento.HER_Asunto,
                                Adjuntos = (x.HER_AnexoId != null) ? true : false,
                                Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                                //--
                                Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                                Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                                Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                                //--
                                Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                                ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                                NoInterno = x.HER_Documento.HER_NoInterno,
                                TramiteId = x.HER_TramiteId,
                                Tramite = x.HER_Tramite.HER_Nombre,
                                Carpeta = x.HER_Carpeta.HER_Nombre
                            })
                            .OrderByDescending(x => x.FechaEnvio)
                            .AsQueryable()
                    );
            }
            else if (tramite == null && tipo == null && estado == null && string.IsNullOrEmpty(busqueda) && categoria == null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                enviadosQuery = _context.HER_Envio
                    .Where(a => a.HER_De.HER_UserName == username
                                && a.HER_De.HER_Activo == true
                                && a.HER_EsOculto == false
                                && (a.HER_FechaEnvio >= fechaInicioTemp && a.HER_FechaEnvio <= fechaFinTemp))
                    .AsNoTracking()
                    .Select(x => new DocumentoEnviadoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaEnvio = x.HER_FechaEnvio,
                        TipoEnvio = x.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        Folio = x.HER_Documento.HER_Folio,
                        Asunto = x.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_AnexoId != null) ? true : false,
                        Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                        Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                        Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                        //--
                        Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                        ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                        NoInterno = x.HER_Documento.HER_NoInterno,
                        TramiteId = x.HER_TramiteId,
                        Tramite = x.HER_Tramite.HER_Nombre,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderByDescending(x => x.FechaEnvio)
                    .AsQueryable();
            }
            else
            {
                enviadosQuery = _context.HER_Envio
                    .Where(a => a.HER_De.HER_UserName == username
                                 && a.HER_De.HER_Activo == true
                                 && a.HER_EsOculto == false
                                 && a.HER_EsOculto == false
                    )
                    .AsNoTracking()
                    .Select(x => new DocumentoEnviadoViewModel
                    {
                        EnvioId = x.HER_EnvioId,
                        FechaEnvio = x.HER_FechaEnvio,
                        TipoEnvio = x.HER_TipoEnvioId,
                        TipoEnvioParaIcono = (x.HER_EnvioPadre != null && x.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && x.HER_EsReenvio) ? ConstTipoEnvio.TipoEnvioN2 : x.HER_TipoEnvioId,
                        Estado = x.HER_EstadoEnvio.HER_Nombre,
                        Folio = x.HER_Documento.HER_Folio,
                        Asunto = x.HER_Documento.HER_Asunto,
                        Adjuntos = (x.HER_AnexoId != null) ? true : false,
                        Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                        //--
                        Destinatario = (from s in x.HER_Recepciones where s.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1 select s.HER_Para.HER_NombreCompleto).FirstOrDefault(),
                        Area = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Nombre).FirstOrDefault(),
                        Region = (from s in x.HER_Recepciones select s.HER_Para.HER_Area.HER_Region.HER_Nombre).FirstOrDefault(),
                        //--
                        Destinatarios_Extras = (x.HER_Recepciones.Count() - 1),
                        ConFechaCompromiso = (x.HER_Recepciones.Any(a => a.HER_Compromiso.Any(b => b.HER_Estado == ConstCompromiso.EstadoN1 && b.HER_Tipo == ConstCompromiso.TipoN2))),
                        NoInterno = x.HER_Documento.HER_NoInterno,
                        TramiteId = x.HER_TramiteId,
                        Tramite = x.HER_Tramite.HER_Nombre,
                        Carpeta = x.HER_Carpeta.HER_Nombre
                    })
                    .OrderByDescending(x => x.FechaEnvio)
                    .AsQueryable();
            }

            return enviadosQuery;
        }        //Visualización de documento
        public async Task<DocumentoEnviadoVisualizacionViewModel> ObtenerDocumentoEnviadoSoloVisualizacionAsync(int envioId, string usuario)
        {
            var documentoEnviado = new DocumentoEnviadoVisualizacionViewModel();
            bool lectorEsRemitente = false;
            bool lectorEsDestinatario = false;
            //---
            bool requiereDestinatario = false;

            var envioActualQuery = _context.HER_Envio
                .Where(x => x.HER_EnvioId == envioId
                    && x.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1)
                //--
                .Include(x => x.HER_EnvioPadre) //Para detectar los anexos originales
                                                //--
                .Include(x => x.HER_EstadoEnvio)
                .Include(x => x.HER_Importancia)
                .Include(x => x.HER_Visibilidad)
                .Include(x => x.HER_Tramite)
                .Include(x => x.HER_TipoEnvio)
                //--
                .Include(x => x.HER_Documento)
                    .ThenInclude(x => x.HER_Tipo)
                .Include(x => x.HER_Documento)
                    .ThenInclude(x => x.HER_DocumentoCreador)
                .Include(x => x.HER_Documento)
                    .ThenInclude(x => x.HER_DocumentoTitular)
                 //--
                 .Include(x => x.HER_De)
                    .ThenInclude(x => x.HER_Area)
                        .ThenInclude(x => x.HER_Region)
                .Include(x => x.HER_De)
                    .ThenInclude(x => x.HER_Area)
                        .ThenInclude(x => x.HER_Area_Padre)
                //--
                .AsNoTracking()
                .AsQueryable();

            var recepcionesActualQuery = _context.HER_Recepcion
                .Where(x => x.HER_Envio.HER_EnvioId == envioId
                    && x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1)
                .Include(x => x.HER_EstadoEnvio)
                .Include(x => x.HER_Para)
                    .ThenInclude(x => x.HER_Area)
                .Include(x => x.HER_Para)
                .Include(x => x.HER_Compromiso)
                .AsNoTracking()
                .AsQueryable();

            var envioActual = await envioActualQuery.FirstOrDefaultAsync();

            if (envioActual != null)
            {
                //De
                lectorEsRemitente = (envioActual.HER_De.HER_UserName == usuario);

                if (lectorEsRemitente)
                {
                    //[Actual]
                    //Remitente
                    //Visualización
                    documentoEnviado.Actual_Visualizacion_Tipo = ConstVisualizacionEnvio.Envio;
                    documentoEnviado.Actual_FechaPropuesta = (envioActual.HER_RequiereRespuesta) ? envioActual.HER_FechaPropuesta.ToString("dd/MM/yyyy", _cultureEs) : string.Empty;
                    documentoEnviado.Actual_FechaCompromiso = string.Empty;
                    documentoEnviado.Actual_TieneRespuesta = false;
                    documentoEnviado.Actual_EstadoId = envioActual.HER_EstadoEnvioId;
                    documentoEnviado.Actual_Estado = envioActual.HER_EstadoEnvio.HER_Nombre;
                    documentoEnviado.Actual_Fecha = envioActual.HER_FechaEnvio.ToString("dd/MM/yyyy HH:mm", _cultureEs);
                    documentoEnviado.Actual_RequiereRespuesta = envioActual.HER_RequiereRespuesta;

                    //[Origen]
                    documentoEnviado.Origen_UsuarioPara_NombreCompleto = string.Empty;
                    documentoEnviado.Origen_UsuarioPara_AreaNombre = string.Empty;
                    documentoEnviado.Origen_UsuarioPara_PuestoNombre = string.Empty;
                    documentoEnviado.Actual_UsuarioLee_Tipo = ConstTipoEmisor.TipoEmisorN3;
                    documentoEnviado.Origen_RequiereRespuesta = envioActual.HER_RequiereRespuesta;
                }
                else
                {
                    //Para
                    lectorEsDestinatario = await recepcionesActualQuery
                        .Where(x => x.HER_Para.HER_UserName == usuario)
                        .AnyAsync();

                    if (lectorEsDestinatario)
                    {
                        var recepcionActual = await recepcionesActualQuery
                            .Where(x => x.HER_Para.HER_UserName == usuario)
                            .FirstOrDefaultAsync();

                        requiereDestinatario = (recepcionActual.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? envioActual.HER_RequiereRespuesta : false;

                        //[Actual]
                        //Destinatario
                        //Visualización
                        documentoEnviado.Actual_Visualizacion_Tipo = ConstVisualizacionEnvio.Recepcion;
                        documentoEnviado.Actual_FechaPropuesta = string.Empty;
                        documentoEnviado.Actual_FechaCompromiso = (requiereDestinatario) ? recepcionActual.HER_Compromiso
                            .Where(x => x.HER_Estado == ConstCompromiso.EstadoN1)
                            .Select(x => x.HER_Fecha)
                            .First().ToString("dd/MM/yyyy", _cultureEs)
                         :
                            string.Empty;
                        documentoEnviado.Actual_TieneRespuesta = recepcionActual.HER_TieneRespuesta;
                        documentoEnviado.Actual_EstadoId = recepcionActual.HER_EstadoEnvioId;
                        documentoEnviado.Actual_Estado = recepcionActual.HER_EstadoEnvio.HER_Nombre;
                        documentoEnviado.Actual_Fecha = recepcionActual.HER_FechaRecepcion.ToString("dd/MM/yyyy HH:mm", _cultureEs);
                        documentoEnviado.Actual_RequiereRespuesta = (recepcionActual.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? envioActual.HER_RequiereRespuesta : false;

                        //[Origen]
                        if (envioActual.HER_EsReenvio && envioActual.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4)
                        {
                            var recepcionesActualOrigenQuery = _context.HER_Recepcion
                               .Where(x => x.HER_Envio.HER_EnvioId == envioActual.HER_EnvioPadre.HER_EnvioId
                                       && x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4)
                               .Include(x => x.HER_EstadoEnvio)
                               .Include(x => x.HER_Para)
                                   .ThenInclude(x => x.HER_Area)
                               //--
                               .Include(x => x.HER_Compromiso)
                               .AsNoTracking()
                               .AsQueryable();

                            var recepcionActualOrigen = await recepcionesActualOrigenQuery.FirstOrDefaultAsync();

                            documentoEnviado.Origen_UsuarioPara_NombreCompleto = recepcionActualOrigen.HER_Para.HER_NombreCompleto.ToUpper();
                            documentoEnviado.Origen_UsuarioPara_AreaNombre = recepcionActualOrigen.HER_Para.HER_Area.HER_Nombre.ToUpper();
                            documentoEnviado.Origen_UsuarioPara_PuestoNombre = recepcionActualOrigen.HER_Para.HER_Puesto.ToUpper();
                            documentoEnviado.Origen_UsuarioPara_Tipo = recepcionActualOrigen.HER_TipoPara;
                        }
                        else
                        {
                            documentoEnviado.Origen_UsuarioPara_NombreCompleto = recepcionActual.HER_Para.HER_NombreCompleto.ToUpper();
                            documentoEnviado.Origen_UsuarioPara_AreaNombre = recepcionActual.HER_Para.HER_Area.HER_Nombre.ToUpper();
                            documentoEnviado.Origen_UsuarioPara_PuestoNombre = recepcionActual.HER_Para.HER_Puesto.ToUpper();
                            documentoEnviado.Origen_UsuarioPara_Tipo = recepcionActual.HER_TipoPara;
                        }

                        //Tipo de usuario que lee (Para o CCP)
                        documentoEnviado.Actual_UsuarioLee_Tipo = recepcionActual.HER_TipoPara;
                        documentoEnviado.Origen_RequiereRespuesta = requiereDestinatario;
                    }
                }

                if (lectorEsRemitente || lectorEsDestinatario)
                {
                    var nombreUsuariosPara = recepcionesActualQuery
                        .Where(x => x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1)
                        .OrderBy(x => x.HER_RecepcionId)
                        .Select(y => y.HER_Para.HER_NombreCompleto)
                        .AsQueryable();

                    var nombreUsuariosCCP = recepcionesActualQuery
                        .Where(x => x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN2)
                        .OrderBy(x => x.HER_RecepcionId)
                        .Select(y => y.HER_Para.HER_NombreCompleto)
                        .AsQueryable();

                    var correoUsuariosCCP = recepcionesActualQuery
                        .Where(x => x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN2)
                        .OrderBy(x => x.HER_RecepcionId)
                        .Select(y => y.HER_Para.HER_Correo)
                        .AsQueryable();

                    //[Actual]
                    //Envio
                    documentoEnviado.Actual_AsuntoEnvio = envioActual.HER_Documento.HER_Asunto;
                    documentoEnviado.Actual_EnvioId = envioActual.HER_EnvioId;
                    documentoEnviado.Actual_TipoEnvioId = envioActual.HER_TipoEnvioId;
                    documentoEnviado.Actual_EsReenvio = envioActual.HER_EsReenvio;
                    documentoEnviado.Actual_TipoEnvio = envioActual.HER_TipoEnvio.HER_Nombre;
                    documentoEnviado.Actual_SupleTurnado = (envioActual.HER_EnvioPadre != null && envioActual.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && envioActual.HER_EsReenvio) ? true : false;
                    //--
                    documentoEnviado.Actual_ExisteAdjuntos = (envioActual.HER_EsReenvio) ?
                                                                (envioActual.HER_AnexoId != null || envioActual.HER_EnvioPadre.HER_AnexoId != null) ? true : false
                                                             :
                                                                (envioActual.HER_AnexoId != null) ? true : false;
                    documentoEnviado.Actual_EsTurnado = false;
                    documentoEnviado.Actual_Indicaciones = (envioActual.HER_EsReenvio) ? envioActual.HER_Indicaciones : string.Empty;
                    //Usuario Envia De
                    documentoEnviado.Actual_UsuarioDe_Correo = envioActual.HER_De.HER_Correo;
                    documentoEnviado.Actual_UsuarioDe_NombreCompleto = envioActual.HER_De.HER_NombreCompleto;
                    //Usuario Envia Para
                    documentoEnviado.Actual_UsuariosPara = string.Join(", ", nombreUsuariosPara.ToArray());
                    documentoEnviado.Actual_UsuariosCCP = string.Join(", ", nombreUsuariosCCP.ToArray());
                    documentoEnviado.Actual_TramiteId = envioActual.HER_TramiteId;
                    documentoEnviado.Actual_Tramite = (envioActual.HER_TramiteId != null) ? envioActual.HER_Tramite.HER_Nombre : string.Empty;
                    documentoEnviado.Actual_Importancia = envioActual.HER_Importancia.HER_Nombre;
                    documentoEnviado.Actual_Visibilidad = envioActual.HER_Visibilidad.HER_Nombre;

                    //[Origen]
                    //Documento Origen
                    documentoEnviado.Origen_EnvioId = envioActual.HER_EnvioId;
                    documentoEnviado.Origen_Folio = envioActual.HER_Documento.HER_Folio;
                    documentoEnviado.Origen_Asunto = envioActual.HER_Documento.HER_Asunto;
                    documentoEnviado.Origen_NoInterno = envioActual.HER_Documento.HER_NoInterno;
                    documentoEnviado.Origen_Cuerpo = envioActual.HER_Documento.HER_Cuerpo;
                    documentoEnviado.Origen_TipoDocumento = envioActual.HER_Documento.HER_Tipo.HER_Nombre;
                    documentoEnviado.Origen_TipoDocumentoId = envioActual.HER_Documento.HER_TipoId;
                    documentoEnviado.Origen_TipoEnvioId = envioActual.HER_TipoEnvioId;
                    documentoEnviado.Origen_TipoEnvio = envioActual.HER_TipoEnvio.HER_Nombre;
                    documentoEnviado.Origen_NombreCreador = envioActual.HER_Documento.HER_DocumentoCreador.HER_NombreCompleto;
                    documentoEnviado.Origen_UsuarioCreador = envioActual.HER_Documento.HER_DocumentoCreador.HER_UserName;
                    documentoEnviado.Origen_NombreTitular = envioActual.HER_Documento.HER_DocumentoTitular.HER_NombreCompleto;
                    documentoEnviado.Origen_UsuarioTitular = envioActual.HER_Documento.HER_DocumentoTitular.HER_UserName;
                    documentoEnviado.Origen_Fecha = envioActual.HER_FechaEnvio.ToString("D", _cultureEs);
                    documentoEnviado.Origen_TramiteId = envioActual.HER_TramiteId;
                    documentoEnviado.Origen_Tramite = (envioActual.HER_TramiteId != null) ? envioActual.HER_Tramite.HER_Nombre : string.Empty;
                    documentoEnviado.Origen_Importancia = envioActual.HER_Importancia.HER_Nombre;
                    documentoEnviado.Origen_Visibilidad = envioActual.HER_Visibilidad.HER_Nombre;
                    documentoEnviado.Origen_ExisteAdjuntos = (envioActual.HER_AnexoId != null) ? true : false;
                    if (envioActual.HER_EsReenvio && envioActual.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4)
                    {
                        var recepcionesActualOrigenQuery = _context.HER_Recepcion
                               .Where(x => x.HER_Envio.HER_EnvioId == envioActual.HER_EnvioPadre.HER_EnvioId
                                       && x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4)
                               .Include(x => x.HER_EstadoEnvio)
                               .Include(x => x.HER_Para)
                                   .ThenInclude(x => x.HER_Area)
                               //--
                               .Include(x => x.HER_Compromiso)
                               .AsNoTracking()
                               .AsQueryable();

                        var recepcionActualOrigen = await recepcionesActualOrigenQuery.FirstOrDefaultAsync();

                        var nombreUsuariosOrigenCCP = recepcionesActualOrigenQuery
                        .Where(x => x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN2)
                        .OrderBy(x => x.HER_RecepcionId)
                        .Select(y => y.HER_Para.HER_NombreCompleto)
                        .AsQueryable();

                        var correoUsuariosOrigenCCP = recepcionesActualOrigenQuery
                            .Where(x => x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN2)
                            .OrderBy(x => x.HER_RecepcionId)
                            .Select(y => y.HER_Para.HER_NombreCompleto)
                            .AsQueryable();

                        documentoEnviado.Origen_ListadoCcp = nombreUsuariosOrigenCCP.ToList();
                        documentoEnviado.Origen_ListadoCcpCorreo = correoUsuariosOrigenCCP.ToList();
                    }
                    else
                    {
                        documentoEnviado.Origen_ListadoCcp = nombreUsuariosCCP.ToList();
                        documentoEnviado.Origen_ListadoCcpCorreo = correoUsuariosCCP.ToList();
                    }
                    //Usuario Origen
                    if (envioActual.HER_EsReenvio && envioActual.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4)
                    {
                        var envioActualOrigenQuery = _context.HER_Envio
                           .Where(x => x.HER_EnvioId == envioActual.HER_EnvioPadre.HER_EnvioId)
                           //--
                           .Include(x => x.HER_Tramite)
                           .Include(x => x.HER_TipoEnvio)
                           .Include(x => x.HER_EnvioPadre)
                           .Include(x => x.HER_EstadoEnvio)
                           .Include(x => x.HER_Visibilidad)
                           .Include(x => x.HER_Importancia)
                           .Include(x => x.HER_Anexo)
                           .Include(x => x.HER_Carpeta)
                           //--
                           .Include(x => x.HER_Documento)
                               .ThenInclude(x => x.HER_Tipo)
                           .Include(x => x.HER_Documento)
                               .ThenInclude(x => x.HER_DocumentoCreador)
                           .Include(x => x.HER_Documento)
                               .ThenInclude(x => x.HER_DocumentoTitular)
                           //--
                           .Include(x => x.HER_De)
                               .ThenInclude(x => x.HER_Area)
                                   .ThenInclude(x => x.HER_Region)
                           .Include(x => x.HER_De)
                               .ThenInclude(x => x.HER_Area)
                                   .ThenInclude(x => x.HER_Area_Padre)
                           //--

                           .AsNoTracking()
                           .AsQueryable();

                        var envioActualOrigen = await envioActualOrigenQuery.FirstOrDefaultAsync();

                        documentoEnviado.Origen_UsuarioDe_Correo = envioActualOrigen.HER_De.HER_Correo;
                        documentoEnviado.Origen_UsuarioDe_NombreCompleto = envioActualOrigen.HER_De.HER_NombreCompleto;
                        documentoEnviado.Origen_UsuarioDe_AreaPadreNombre = (envioActualOrigen.HER_De.HER_Area.HER_Area_PadreId != null) ? envioActualOrigen.HER_De.HER_Area.HER_Area_Padre.HER_Nombre : string.Empty;
                        documentoEnviado.Origen_UsuarioDe_AreaNombre = envioActualOrigen.HER_De.HER_Area.HER_Nombre;
                        documentoEnviado.Origen_UsuarioDe_AreaId = envioActualOrigen.HER_De.HER_Area.HER_AreaId;
                        documentoEnviado.Origen_UsuarioDe_Direccion = envioActualOrigen.HER_DeDireccion;
                        documentoEnviado.Origen_UsuarioDe_Telefono = envioActualOrigen.HER_DeTelefono;
                        documentoEnviado.Origen_UsuarioDe_Region = envioActualOrigen.HER_De.HER_Area.HER_Region.HER_Nombre;
                        documentoEnviado.Origen_UsuarioDe_PuestoNombre = envioActualOrigen.HER_De.HER_Puesto;
                    }
                    else
                    {
                        documentoEnviado.Origen_UsuarioDe_Correo = envioActual.HER_De.HER_Correo;
                        documentoEnviado.Origen_UsuarioDe_NombreCompleto = envioActual.HER_De.HER_NombreCompleto;
                        documentoEnviado.Origen_UsuarioDe_AreaPadreNombre = (envioActual.HER_De.HER_Area.HER_Area_PadreId != null) ? envioActual.HER_De.HER_Area.HER_Area_Padre.HER_Nombre : string.Empty;
                        documentoEnviado.Origen_UsuarioDe_AreaNombre = envioActual.HER_De.HER_Area.HER_Nombre;
                        documentoEnviado.Origen_UsuarioDe_AreaId = envioActual.HER_De.HER_Area.HER_AreaId;
                        documentoEnviado.Origen_UsuarioDe_Direccion = envioActual.HER_DeDireccion;
                        documentoEnviado.Origen_UsuarioDe_Telefono = envioActual.HER_DeTelefono;
                        documentoEnviado.Origen_UsuarioDe_Region = envioActual.HER_De.HER_Area.HER_Region.HER_Nombre;
                        documentoEnviado.Origen_UsuarioDe_PuestoNombre = envioActual.HER_De.HER_Puesto;
                    }
                }
            }

            return documentoEnviado;
        }
        public async Task<DocumentoEnviadoVisualizacionViewModel> ObtenerDocumentoTurnadoSoloVisualizacionAsync(int envioId, string usuario)
        {
            var documentoEnviado = new DocumentoEnviadoVisualizacionViewModel();
            bool lectorEsRemitente = false;
            bool lectorEsDestinatario = false;
            //---
            bool requiereDestinatario = false;

            var envioActualQuery = _context.HER_Envio
                .Where(x => x.HER_EnvioId == envioId)
                //--
                .Include(x => x.HER_Tramite)
                .Include(x => x.HER_TipoEnvio)
                .Include(x => x.HER_EnvioPadre)
                .Include(x => x.HER_EstadoEnvio)
                .Include(x => x.HER_Visibilidad)
                .Include(x => x.HER_Importancia)
                .Include(x => x.HER_Anexo)
                .Include(x => x.HER_Carpeta)
                //--
                .Include(x => x.HER_Documento)
                    .ThenInclude(x => x.HER_Tipo)
                .Include(x => x.HER_Documento)
                    .ThenInclude(x => x.HER_DocumentoCreador)
                .Include(x => x.HER_Documento)
                    .ThenInclude(x => x.HER_DocumentoTitular)
                //--
                .Include(x => x.HER_De)
                .Include(x => x.HER_De)
                    .ThenInclude(x => x.HER_Area)
                        .ThenInclude(x => x.HER_Region)
                .Include(x => x.HER_De)
                    .ThenInclude(x => x.HER_Area)
                        .ThenInclude(x => x.HER_Area_Padre)
                //--
                .AsNoTracking()
                .AsQueryable();

            var recepcionesActualQuery = _context.HER_Recepcion
                .Where(x => x.HER_Envio.HER_EnvioId == envioId)
                .Include(x => x.HER_EstadoEnvio)
                .Include(x => x.HER_Para)
                    .ThenInclude(x => x.HER_Area)
                .Include(x => x.HER_Para)
                .Include(x => x.HER_Compromiso)
                .AsNoTracking()
                .AsQueryable();

            var envioActual = await envioActualQuery.FirstOrDefaultAsync();

            if (envioActual != null)
            {
                //De
                lectorEsRemitente = (envioActual.HER_De.HER_UserName == usuario);

                if (lectorEsRemitente)
                {
                    //[Actual]
                    //Remitente
                    //Visualización
                    documentoEnviado.Actual_Visualizacion_Tipo = ConstVisualizacionEnvio.Envio;
                    documentoEnviado.Actual_FechaPropuesta = (envioActual.HER_RequiereRespuesta) ? envioActual.HER_FechaPropuesta.ToString("dd/MM/yyyy", _cultureEs) : string.Empty;
                    documentoEnviado.Actual_FechaCompromiso = string.Empty;
                    documentoEnviado.Actual_TieneRespuesta = false;
                    documentoEnviado.Actual_EstadoId = envioActual.HER_EstadoEnvioId;
                    documentoEnviado.Actual_Estado = envioActual.HER_EstadoEnvio.HER_Nombre;
                    documentoEnviado.Actual_Fecha = envioActual.HER_FechaEnvio.ToString("dd/MM/yyyy HH:mm", _cultureEs);
                    documentoEnviado.Actual_RequiereRespuesta = envioActual.HER_RequiereRespuesta;

                    //Tipo de usuario que lee (Para o CCP)
                    documentoEnviado.Actual_UsuarioLee_Tipo = ConstTipoEmisor.TipoEmisorN3;
                }
                else
                {
                    //Para
                    lectorEsDestinatario = await recepcionesActualQuery
                        .Where(x => x.HER_Para.HER_UserName == usuario)
                        .AnyAsync();

                    if (lectorEsDestinatario)
                    {
                        var recepcionActual = await recepcionesActualQuery
                            .Where(x => x.HER_Para.HER_UserName == usuario)
                            .FirstOrDefaultAsync();

                        requiereDestinatario = (recepcionActual.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? envioActual.HER_RequiereRespuesta : false;

                        //[Actual]
                        //Destinatario
                        //Visualización
                        documentoEnviado.Actual_Visualizacion_Tipo = ConstVisualizacionEnvio.Recepcion;
                        documentoEnviado.Actual_FechaPropuesta = string.Empty;
                        documentoEnviado.Actual_FechaCompromiso = (requiereDestinatario) ? recepcionActual.HER_Compromiso
                            .Where(x => x.HER_Estado == ConstCompromiso.EstadoN1)
                            .Select(x => x.HER_Fecha)
                            .First().ToString("dd/MM/yyyy", _cultureEs)
                         :
                            string.Empty;
                        documentoEnviado.Actual_TieneRespuesta = recepcionActual.HER_TieneRespuesta;
                        documentoEnviado.Actual_EstadoId = recepcionActual.HER_EstadoEnvioId;
                        documentoEnviado.Actual_Estado = recepcionActual.HER_EstadoEnvio.HER_Nombre;
                        documentoEnviado.Actual_Fecha = recepcionActual.HER_FechaRecepcion.ToString("dd/MM/yyyy HH:mm", _cultureEs);
                        documentoEnviado.Actual_RequiereRespuesta = requiereDestinatario;

                        //Tipo de usuario que lee (Para o CCP)
                        documentoEnviado.Actual_UsuarioLee_Tipo = recepcionActual.HER_TipoPara;
                    }
                }

                if (lectorEsRemitente || lectorEsDestinatario)
                {
                    var nombreUsuariosPara = recepcionesActualQuery
                        .Where(x => x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1)
                        .OrderBy(x => x.HER_RecepcionId)
                        .Select(y => y.HER_Para.HER_NombreCompleto)
                        .AsQueryable();

                    var nombreUsuariosCCP = recepcionesActualQuery
                        .Where(x => x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN2)
                        .OrderBy(x => x.HER_RecepcionId)
                        .Select(y => y.HER_Para.HER_NombreCompleto)
                        .AsQueryable();

                    //[Actual]
                    //Envio 
                    documentoEnviado.Actual_AsuntoEnvio = string.Format("{0} {1}", "", envioActual.HER_Documento.HER_Asunto);
                    documentoEnviado.Actual_EnvioId = envioActual.HER_EnvioId;
                    documentoEnviado.Actual_TipoEnvioId = envioActual.HER_TipoEnvioId;
                    documentoEnviado.Actual_EsReenvio = envioActual.HER_EsReenvio;
                    documentoEnviado.Actual_TipoEnvio = envioActual.HER_TipoEnvio.HER_Nombre;
                    //--
                    documentoEnviado.Actual_ExisteAdjuntos = (envioActual.HER_AnexoId != null) ? true : false;
                    documentoEnviado.Actual_EsTurnado = true;
                    documentoEnviado.Actual_Indicaciones = envioActual.HER_Indicaciones;
                    //Usuario Envia De
                    documentoEnviado.Actual_UsuarioDe_Correo = envioActual.HER_De.HER_Correo;
                    documentoEnviado.Actual_UsuarioDe_NombreCompleto = envioActual.HER_De.HER_NombreCompleto;
                    //Usuario Envia Para
                    documentoEnviado.Actual_UsuariosPara = string.Join(", ", nombreUsuariosPara.ToArray());
                    documentoEnviado.Actual_UsuariosCCP = string.Join(", ", nombreUsuariosCCP.ToArray());
                    documentoEnviado.Actual_TramiteId = envioActual.HER_TramiteId;
                    documentoEnviado.Actual_Tramite = (envioActual.HER_TramiteId != null) ? envioActual.HER_Tramite.HER_Nombre : string.Empty;
                    documentoEnviado.Actual_Importancia = envioActual.HER_Importancia.HER_Nombre;
                    documentoEnviado.Actual_Visibilidad = envioActual.HER_Visibilidad.HER_Nombre;

                    //*********************************************************************************************************************************/
                    //---[Origen]---
                    HER_Envio envioOrigen = null;
                    //-------------------------------------
                    //Si es un turnado se busca recuperar la informacion origen
                    var envioOrigenQuery = _context.HER_Envio
                        .Where(x => x.HER_DocumentoId == envioActual.HER_DocumentoId && x.HER_GrupoEnvio == envioActual.HER_GrupoEnvio)
                        //--
                        .Include(x => x.HER_Tramite)
                        .Include(x => x.HER_TipoEnvio)
                        .Include(x => x.HER_EnvioPadre)
                        .Include(x => x.HER_EstadoEnvio)
                        .Include(x => x.HER_Visibilidad)
                        .Include(x => x.HER_Importancia)
                        .Include(x => x.HER_Anexo)
                        .Include(x => x.HER_Carpeta)
                        //--
                        .Include(x => x.HER_Documento)
                            .ThenInclude(x => x.HER_Tipo)
                        .Include(x => x.HER_Documento)
                            .ThenInclude(x => x.HER_DocumentoCreador)
                        .Include(x => x.HER_Documento)
                            .ThenInclude(x => x.HER_DocumentoTitular)
                        //--
                        .Include(x => x.HER_De)
                            .ThenInclude(x => x.HER_Area)
                                .ThenInclude(x => x.HER_Region)
                        .Include(x => x.HER_De)
                            .ThenInclude(x => x.HER_Area)
                                .ThenInclude(x => x.HER_Area_Padre)
                        //--
                        .OrderBy(x => x.HER_Orden)
                        .AsNoTracking()
                        .AsQueryable();

                    envioOrigen = await envioOrigenQuery.FirstOrDefaultAsync();

                    if (envioOrigen != null)
                    {
                        //Documento
                        documentoEnviado.Origen_EnvioId = envioOrigen.HER_EnvioId;
                        documentoEnviado.Origen_Folio = envioOrigen.HER_Documento.HER_Folio;
                        documentoEnviado.Origen_Asunto = envioOrigen.HER_Documento.HER_Asunto;
                        documentoEnviado.Origen_NoInterno = envioOrigen.HER_Documento.HER_NoInterno;
                        documentoEnviado.Origen_Cuerpo = envioOrigen.HER_Documento.HER_Cuerpo;
                        documentoEnviado.Origen_TipoDocumento = envioOrigen.HER_Documento.HER_Tipo.HER_Nombre;
                        documentoEnviado.Origen_TipoDocumentoId = envioOrigen.HER_Documento.HER_TipoId;
                        documentoEnviado.Origen_TipoEnvioId = envioOrigen.HER_TipoEnvioId;
                        documentoEnviado.Origen_TipoEnvio = envioOrigen.HER_TipoEnvio.HER_Nombre;
                        documentoEnviado.Origen_Fecha = envioOrigen.HER_FechaEnvio.ToString("D", _cultureEs);
                        documentoEnviado.Origen_TramiteId = envioOrigen.HER_TramiteId;
                        documentoEnviado.Origen_Tramite = (envioOrigen.HER_TramiteId != null) ? envioOrigen.HER_Tramite.HER_Nombre : string.Empty;
                        documentoEnviado.Origen_Importancia = envioOrigen.HER_Importancia.HER_Nombre;
                        documentoEnviado.Origen_Visibilidad = envioOrigen.HER_Visibilidad.HER_Nombre;
                        documentoEnviado.Origen_ExisteAdjuntos = (envioOrigen.HER_EsReenvio) ?
                                                                (envioOrigen.HER_AnexoId != null || envioOrigen.HER_EnvioPadre.HER_AnexoId != null) ? true : false
                                                            :
                                                                (envioOrigen.HER_AnexoId != null) ? true : false;
                        documentoEnviado.Origen_RequiereRespuesta = envioOrigen.HER_RequiereRespuesta;

                        //Usuario Origen
                        if (envioOrigen.HER_EsReenvio && envioOrigen.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4)
                        {
                            var envioOrigenPadreQuery = _context.HER_Envio
                               .Where(x => x.HER_DocumentoId == envioOrigen.HER_DocumentoId
                                    && x.HER_EnvioId == envioOrigen.HER_EnvioPadre.HER_EnvioId)
                               //--
                               .Include(x => x.HER_Tramite)
                               .Include(x => x.HER_TipoEnvio)
                               .Include(x => x.HER_EnvioPadre)
                               .Include(x => x.HER_EstadoEnvio)
                               .Include(x => x.HER_Visibilidad)
                               .Include(x => x.HER_Importancia)
                               .Include(x => x.HER_Anexo)
                               .Include(x => x.HER_Carpeta)
                               //--
                               .Include(x => x.HER_Documento)
                                   .ThenInclude(x => x.HER_Tipo)
                               .Include(x => x.HER_Documento)
                                   .ThenInclude(x => x.HER_DocumentoCreador)
                               .Include(x => x.HER_Documento)
                                   .ThenInclude(x => x.HER_DocumentoTitular)
                               //--
                               .Include(x => x.HER_De)
                                   .ThenInclude(x => x.HER_Area)
                                       .ThenInclude(x => x.HER_Region)
                               .Include(x => x.HER_De)
                                   .ThenInclude(x => x.HER_Area)
                                       .ThenInclude(x => x.HER_Area_Padre)
                               //--
                               .OrderBy(x => x.HER_Orden)
                               .AsNoTracking()
                               .AsQueryable();

                            var envioOrigenPadre = await envioOrigenPadreQuery.FirstOrDefaultAsync();

                            documentoEnviado.Origen_UsuarioDe_Correo = envioOrigenPadre.HER_De.HER_Correo;
                            documentoEnviado.Origen_UsuarioDe_NombreCompleto = envioOrigenPadre.HER_De.HER_NombreCompleto;
                            documentoEnviado.Origen_UsuarioDe_AreaPadreNombre = (envioOrigenPadre.HER_De.HER_Area.HER_Area_PadreId != null) ? envioOrigenPadre.HER_De.HER_Area.HER_Area_Padre.HER_Nombre : string.Empty;
                            documentoEnviado.Origen_UsuarioDe_AreaNombre = envioOrigenPadre.HER_De.HER_Area.HER_Nombre;
                            documentoEnviado.Origen_UsuarioDe_AreaId = envioOrigenPadre.HER_De.HER_Area.HER_AreaId;
                            documentoEnviado.Origen_UsuarioDe_Direccion = envioOrigenPadre.HER_DeDireccion;
                            documentoEnviado.Origen_UsuarioDe_Telefono = envioOrigenPadre.HER_DeTelefono;
                            documentoEnviado.Origen_UsuarioDe_Region = envioOrigenPadre.HER_De.HER_Area.HER_Region.HER_Nombre;
                            documentoEnviado.Origen_UsuarioDe_PuestoNombre = envioOrigenPadre.HER_De.HER_Puesto;

                        }
                        else
                        {
                            documentoEnviado.Origen_UsuarioDe_Correo = envioOrigen.HER_De.HER_Correo;
                            documentoEnviado.Origen_UsuarioDe_NombreCompleto = envioOrigen.HER_De.HER_NombreCompleto;
                            documentoEnviado.Origen_UsuarioDe_AreaPadreNombre = (envioOrigen.HER_De.HER_Area.HER_Area_PadreId != null) ? envioOrigen.HER_De.HER_Area.HER_Area_Padre.HER_Nombre : string.Empty;
                            documentoEnviado.Origen_UsuarioDe_AreaNombre = envioOrigen.HER_De.HER_Area.HER_Nombre;
                            documentoEnviado.Origen_UsuarioDe_AreaId = envioOrigen.HER_De.HER_Area.HER_AreaId;
                            documentoEnviado.Origen_UsuarioDe_Direccion = envioOrigen.HER_DeDireccion;
                            documentoEnviado.Origen_UsuarioDe_Telefono = envioOrigen.HER_DeTelefono;
                            documentoEnviado.Origen_UsuarioDe_Region = envioOrigen.HER_De.HER_Area.HER_Region.HER_Nombre;
                            documentoEnviado.Origen_UsuarioDe_PuestoNombre = envioOrigen.HER_De.HER_Puesto;
                        }

                        documentoEnviado.Origen_NombreCreador = envioOrigen.HER_Documento.HER_DocumentoCreador.HER_NombreCompleto;
                        documentoEnviado.Origen_UsuarioCreador = envioOrigen.HER_Documento.HER_DocumentoCreador.HER_UserName;
                        documentoEnviado.Origen_NombreTitular = envioOrigen.HER_Documento.HER_DocumentoTitular.HER_NombreCompleto;
                        documentoEnviado.Origen_UsuarioTitular = envioOrigen.HER_Documento.HER_DocumentoTitular.HER_UserName;

                        //Recepción
                        var recepcionesOrigenQuery = _context.HER_Recepcion
                            .Where(x => x.HER_Envio.HER_EnvioId == envioOrigen.HER_EnvioId)
                            .Include(x => x.HER_EstadoEnvio)
                            .Include(x => x.HER_Para)
                                .ThenInclude(x => x.HER_Area)
                            .AsNoTracking()
                            .AsQueryable();

                        var recepcionOrigen = await recepcionesOrigenQuery
                            .Where(x => x.HER_ParaId == envioActual.HER_UsuarioOrigenId)
                            .FirstOrDefaultAsync();

                        if (recepcionOrigen != null)
                        {
                            var nombreUsuariosCCPOrigen = recepcionesOrigenQuery
                                .Where(x => x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN2)
                                .OrderBy(x => x.HER_RecepcionId)
                                .Select(y => y.HER_Para.HER_NombreCompleto)
                                .AsQueryable();

                            if (envioOrigen.HER_EsReenvio && envioOrigen.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4)
                            {
                                var recepcionesOrigenPadreQuery = _context.HER_Recepcion
                                   .Where(x => x.HER_Envio.HER_EnvioId == envioOrigen.HER_EnvioPadre.HER_EnvioId
                                                    && x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4)
                                   .Include(x => x.HER_EstadoEnvio)
                                   .Include(x => x.HER_Para)
                                       .ThenInclude(x => x.HER_Area)
                                   .Include(x => x.HER_Compromiso)
                                   .AsNoTracking()
                                   .AsQueryable();

                                var nombreUsuariosCCPOrigenPadre = recepcionesOrigenPadreQuery
                                    .Where(x => x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN2)
                                    .OrderBy(x => x.HER_RecepcionId)
                                    .Select(y => y.HER_Para.HER_NombreCompleto)
                                    .AsQueryable();

                                documentoEnviado.Origen_ListadoCcp = nombreUsuariosCCPOrigenPadre.ToList();
                            }
                            else
                            {
                                documentoEnviado.Origen_ListadoCcp = nombreUsuariosCCPOrigen.ToList();
                            }

                            //Usuario Destino(para Actual)
                            if (envioOrigen.HER_EsReenvio && envioOrigen.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4)
                            {
                                var recepcionesOrigenPadreQuery = _context.HER_Recepcion
                                   .Where(x => x.HER_Envio.HER_EnvioId == envioOrigen.HER_EnvioPadre.HER_EnvioId
                                                    && x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4)
                                   .Include(x => x.HER_EstadoEnvio)
                                   .Include(x => x.HER_Para)
                                       .ThenInclude(x => x.HER_Area)
                                   .Include(x => x.HER_Compromiso)
                                   .AsNoTracking()
                                   .AsQueryable();

                                var recepcionOrigenPadre = await recepcionesOrigenPadreQuery
                                    .FirstOrDefaultAsync();

                                documentoEnviado.Origen_UsuarioPara_NombreCompleto = recepcionOrigenPadre.HER_Para.HER_NombreCompleto.ToUpper();
                                documentoEnviado.Origen_UsuarioPara_AreaNombre = recepcionOrigenPadre.HER_Para.HER_Area.HER_Nombre.ToUpper();
                                documentoEnviado.Origen_UsuarioPara_PuestoNombre = recepcionOrigenPadre.HER_Para.HER_Puesto.ToUpper();
                                documentoEnviado.Origen_UsuarioPara_Tipo = recepcionOrigenPadre.HER_TipoPara;
                            }
                            else
                            {
                                documentoEnviado.Origen_UsuarioPara_NombreCompleto = recepcionOrigen.HER_Para.HER_NombreCompleto.ToUpper();
                                documentoEnviado.Origen_UsuarioPara_AreaNombre = recepcionOrigen.HER_Para.HER_Area.HER_Nombre.ToUpper();
                                documentoEnviado.Origen_UsuarioPara_PuestoNombre = recepcionOrigen.HER_Para.HER_Puesto.ToUpper();
                                documentoEnviado.Origen_UsuarioPara_Tipo = recepcionOrigen.HER_TipoPara;
                            }
                        }
                    }
                }
            }

            return documentoEnviado;
        }
        public async Task<DocumentoEnviadoVisualizacionViewModel> ObtenerDocumentoRespuestaEnviadoSoloVisualizacionAsync(int envioId, string usuario)
        {
            var documentoEnviado = new DocumentoEnviadoVisualizacionViewModel();
            bool lectorEsRemitente = false;
            bool lectorEsDestinatario = false;

            //---[Actual]---
            //--------------------------------------
            var envioActualQuery = _context.HER_Envio
                .Where(x => x.HER_EnvioId == envioId)
                //--
                .Include(x => x.HER_Tramite)
                .Include(x => x.HER_TipoEnvio)
                .Include(x => x.HER_EnvioPadre)
                    .ThenInclude(x => x.HER_TipoEnvio)
                .Include(x => x.HER_EstadoEnvio)
                .Include(x => x.HER_Visibilidad)
                .Include(x => x.HER_Importancia)
                .Include(x => x.HER_Anexo)
                .Include(x => x.HER_Carpeta)
                //--
                .Include(x => x.HER_Documento)
                    .ThenInclude(x => x.HER_Tipo)
                .Include(x => x.HER_Documento)
                    .ThenInclude(x => x.HER_DocumentoCreador)
                .Include(x => x.HER_Documento)
                    .ThenInclude(x => x.HER_DocumentoTitular)
                //--
                .Include(x => x.HER_De)
                    .ThenInclude(x => x.HER_Area)
                        .ThenInclude(x => x.HER_Region)
                .Include(x => x.HER_De)
                    .ThenInclude(x => x.HER_Area)
                        .ThenInclude(x => x.HER_Area_Padre)
                //--
                .AsNoTracking()
                .AsQueryable();

            var recepcionesActualQuery = _context.HER_Recepcion
                .Where(x => x.HER_Envio.HER_EnvioId == envioId)
                .Include(x => x.HER_EstadoEnvio)
                .Include(x => x.HER_Para)
                    .ThenInclude(x => x.HER_Area)
                .AsNoTracking()
                .AsQueryable();

            var envioActual = await envioActualQuery.FirstOrDefaultAsync();

            if (envioActual != null)
            {
                var envioPadreQuery = _context.HER_Envio
                    .Where(x => x.HER_EnvioId == envioActual.HER_EnvioPadreId)
                    //--
                    .Include(x => x.HER_Tramite)
                    .Include(x => x.HER_TipoEnvio)
                    .Include(x => x.HER_EnvioPadre)
                        .ThenInclude(x => x.HER_TipoEnvio)
                    .Include(x => x.HER_EstadoEnvio)
                    .Include(x => x.HER_Visibilidad)
                    .Include(x => x.HER_Importancia)
                    .Include(x => x.HER_Anexo)
                    .Include(x => x.HER_Carpeta)
                    //--
                    .Include(x => x.HER_Documento)
                        .ThenInclude(x => x.HER_Tipo)
                    .Include(x => x.HER_Documento)
                        .ThenInclude(x => x.HER_DocumentoCreador)
                    .Include(x => x.HER_Documento)
                        .ThenInclude(x => x.HER_DocumentoTitular)
                    //--
                    .Include(x => x.HER_De)
                        .ThenInclude(x => x.HER_Area)
                            .ThenInclude(x => x.HER_Region)
                    .Include(x => x.HER_De)
                        .ThenInclude(x => x.HER_Area)
                            .ThenInclude(x => x.HER_Area_Padre)
                    //--
                    .AsNoTracking()
                    .AsQueryable();

                var recepcionesPadreQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Envio.HER_EnvioId == envioActual.HER_EnvioPadreId)
                    .Include(x => x.HER_EstadoEnvio)
                    .Include(x => x.HER_Para)
                        .ThenInclude(x => x.HER_Area)
                    //--
                    .Include(x => x.HER_Compromiso)
                    .AsNoTracking()
                    .AsQueryable();

                //De
                lectorEsRemitente = (envioActual.HER_De.HER_UserName == usuario);

                if (lectorEsRemitente)
                {
                    //[Actual]
                    //Remitente
                    var recepcion = await recepcionesActualQuery
                        .Where(x => x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1)
                        .FirstOrDefaultAsync();

                    if (envioActual.HER_EsReenvio)
                    {
                        var recepcionPadre = await recepcionesPadreQuery
                          .Where(x => x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1)
                          .FirstOrDefaultAsync();

                        //Usuario Destino(para Actual)
                        documentoEnviado.Origen_UsuarioPara_NombreCompleto = recepcionPadre.HER_Para.HER_NombreCompleto.ToUpper();
                        documentoEnviado.Origen_UsuarioPara_AreaNombre = recepcionPadre.HER_Para.HER_Area.HER_Nombre.ToUpper();
                        documentoEnviado.Origen_UsuarioPara_PuestoNombre = recepcionPadre.HER_Para.HER_Puesto.ToUpper();
                    }
                    else
                    {
                        //Usuario Destino(para Actual)
                        documentoEnviado.Origen_UsuarioPara_NombreCompleto = recepcion.HER_Para.HER_NombreCompleto.ToUpper();
                        documentoEnviado.Origen_UsuarioPara_AreaNombre = recepcion.HER_Para.HER_Area.HER_Nombre.ToUpper();
                        documentoEnviado.Origen_UsuarioPara_PuestoNombre = recepcion.HER_Para.HER_Puesto.ToUpper();
                    }

                    documentoEnviado.Actual_Fecha = envioActual.HER_FechaEnvio.ToString("dd/MM/yyyy HH:mm", _cultureEs);
                    //Visualización
                    documentoEnviado.Actual_Visualizacion_Tipo = ConstVisualizacionEnvio.Envio;
                    //Tipo de usuario que lee (Para o CCP)
                    documentoEnviado.Actual_UsuarioLee_Tipo = ConstTipoEmisor.TipoEmisorN3;

                    documentoEnviado.Actual_EstadoId = recepcion.HER_EstadoEnvioId;
                    documentoEnviado.Actual_Estado = recepcion.HER_EstadoEnvio.HER_Nombre;
                }
                else
                {
                    //Para
                    lectorEsDestinatario = await recepcionesActualQuery
                        .Where(x => x.HER_Para.HER_UserName == usuario)
                        .AnyAsync();

                    if (lectorEsDestinatario)
                    {
                        var recepcionActual = await recepcionesActualQuery
                            .Where(x => x.HER_Para.HER_UserName == usuario)
                            .FirstOrDefaultAsync();

                        if (envioActual.HER_EsReenvio)
                        {
                            var recepcionPadre = await recepcionesPadreQuery
                                        .Where(x => x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1)
                                        .FirstOrDefaultAsync();

                            //[Actual]
                            //Destinatario
                            //Usuario Destino(para Actual)
                            documentoEnviado.Origen_UsuarioPara_NombreCompleto = recepcionPadre.HER_Para.HER_NombreCompleto.ToUpper();
                            documentoEnviado.Origen_UsuarioPara_AreaNombre = recepcionPadre.HER_Para.HER_Area.HER_Nombre.ToUpper();
                            documentoEnviado.Origen_UsuarioPara_PuestoNombre = recepcionPadre.HER_Para.HER_Puesto.ToUpper();
                        }
                        else
                        {
                            //[Actual]
                            //Destinatario
                            //Usuario Destino(para Actual)
                            documentoEnviado.Origen_UsuarioPara_NombreCompleto = recepcionActual.HER_Para.HER_NombreCompleto.ToUpper();
                            documentoEnviado.Origen_UsuarioPara_AreaNombre = recepcionActual.HER_Para.HER_Area.HER_Nombre.ToUpper();
                            documentoEnviado.Origen_UsuarioPara_PuestoNombre = recepcionActual.HER_Para.HER_Puesto.ToUpper();
                        }

                        documentoEnviado.Actual_Fecha = recepcionActual.HER_FechaRecepcion.ToString("dd/MM/yyyy HH:mm", _cultureEs);
                        //Visualización
                        documentoEnviado.Actual_Visualizacion_Tipo = ConstVisualizacionEnvio.Recepcion;
                        //Tipo de usuario que lee (Para o CCP)
                        documentoEnviado.Actual_UsuarioLee_Tipo = recepcionActual.HER_TipoPara;

                        documentoEnviado.Actual_EstadoId = recepcionActual.HER_EstadoEnvioId;
                        documentoEnviado.Actual_Estado = recepcionActual.HER_EstadoEnvio.HER_Nombre;
                    }
                }

                if (lectorEsRemitente || lectorEsDestinatario)
                {
                    var nombreUsuariosPara = recepcionesActualQuery
                        .Where(x => x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1)
                        .OrderBy(x => x.HER_RecepcionId)
                        .Select(y => y.HER_Para.HER_NombreCompleto)
                        .AsQueryable();

                    var nombreUsuariosCCP = recepcionesActualQuery
                        .Where(x => x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN2)
                        .OrderBy(x => x.HER_RecepcionId)
                        .Select(y => y.HER_Para.HER_NombreCompleto)
                        .AsQueryable();

                    var correoUsuariosCCP = recepcionesActualQuery
                        .Where(x => x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN2)
                        .OrderBy(x => x.HER_RecepcionId)
                        .Select(y => y.HER_Para.HER_Correo)
                        .AsQueryable();

                    //Envio 
                    documentoEnviado.Actual_EnvioId = envioActual.HER_EnvioId;
                    documentoEnviado.Actual_RequiereRespuesta = false;
                    documentoEnviado.Actual_TramiteId = envioActual.HER_TramiteId;
                    documentoEnviado.Actual_Tramite = (envioActual.HER_TramiteId != null) ? envioActual.HER_Tramite.HER_Nombre : string.Empty;
                    documentoEnviado.Actual_Importancia = string.Empty;
                    documentoEnviado.Actual_Visibilidad = envioActual.HER_Visibilidad.HER_Nombre;
                    documentoEnviado.Actual_TipoEnvioId = envioActual.HER_TipoEnvioId;
                    documentoEnviado.Actual_EsReenvio = envioActual.HER_EsReenvio;
                    documentoEnviado.Actual_TipoEnvio = envioActual.HER_TipoEnvio.HER_Nombre;
                    //--
                    documentoEnviado.Actual_ExisteAdjuntos = (envioActual.HER_AnexoId != null) ? true : false;
                    documentoEnviado.Actual_EsTurnado = false;
                    documentoEnviado.Actual_Indicaciones = (!string.IsNullOrEmpty(envioActual.HER_Indicaciones)) ? envioActual.HER_Indicaciones : string.Empty;
                    //Usuario Envia De
                    documentoEnviado.Actual_UsuarioDe_Correo = envioActual.HER_De.HER_Correo;
                    documentoEnviado.Actual_UsuarioDe_NombreCompleto = envioActual.HER_De.HER_NombreCompleto;
                    //Usuario Envia Para
                    documentoEnviado.Actual_UsuariosPara = string.Join(", ", nombreUsuariosPara.ToArray());
                    documentoEnviado.Actual_UsuariosCCP = string.Join(", ", nombreUsuariosCCP.ToArray());
                    //Estado para la recepción
                    documentoEnviado.Actual_FechaCompromiso = string.Empty;
                    documentoEnviado.Actual_FechaPropuesta = string.Empty;

                    //Respuesta
                    documentoEnviado.Actual_TieneRespuesta = false;
                    //---------------------------------

                    if (envioActual.HER_EsReenvio)
                    {
                        var envioPadre = await envioPadreQuery.FirstOrDefaultAsync();

                        var nombreUsuariosCCPPadre = recepcionesPadreQuery
                            .Where(x => x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN2)
                            .OrderBy(x => x.HER_RecepcionId)
                            .Select(y => y.HER_Para.HER_NombreCompleto)
                            .AsQueryable();

                        var correoUsuariosCCPPadre = recepcionesPadreQuery
                            .Where(x => x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN2)
                            .OrderBy(x => x.HER_RecepcionId)
                            .Select(y => y.HER_Para.HER_Correo)
                            .AsQueryable();

                        //Documento Origen
                        documentoEnviado.Origen_EnvioId = envioPadre.HER_EnvioId;
                        documentoEnviado.Origen_Folio = envioPadre.HER_Documento.HER_Folio;
                        documentoEnviado.Origen_Asunto = envioPadre.HER_Documento.HER_Asunto;
                        documentoEnviado.Origen_NoInterno = envioPadre.HER_Documento.HER_NoInterno;
                        documentoEnviado.Origen_Fecha = envioPadre.HER_FechaEnvio.ToString("D", _cultureEs);
                        documentoEnviado.Origen_Cuerpo = envioPadre.HER_Documento.HER_Cuerpo;
                        //--
                        documentoEnviado.Origen_TramiteId = envioPadre.HER_TramiteId;
                        documentoEnviado.Origen_Tramite = (envioPadre.HER_TramiteId != null) ? envioPadre.HER_Tramite.HER_Nombre : string.Empty;
                        documentoEnviado.Origen_Importancia = string.Empty;
                        documentoEnviado.Origen_Visibilidad = envioPadre.HER_Visibilidad.HER_Nombre;
                        documentoEnviado.Origen_TipoDocumento = envioPadre.HER_Documento.HER_Tipo.HER_Nombre;
                        documentoEnviado.Origen_TipoDocumentoId = envioPadre.HER_Documento.HER_TipoId;
                        documentoEnviado.Origen_TipoEnvioId = envioPadre.HER_TipoEnvioId;
                        documentoEnviado.Origen_TipoEnvio = envioPadre.HER_TipoEnvio.HER_Nombre;
                        documentoEnviado.Origen_RequiereRespuesta = false;
                        documentoEnviado.Origen_ExisteAdjuntos = (envioPadre.HER_AnexoId != null) ? true : false;
                        //--
                        documentoEnviado.Origen_ListadoCcp = nombreUsuariosCCPPadre.ToList();
                        documentoEnviado.Origen_ListadoCcpCorreo = correoUsuariosCCPPadre.ToList();

                        documentoEnviado.Origen_NombreCreador = envioPadre.HER_Documento.HER_DocumentoCreador.HER_NombreCompleto;
                        documentoEnviado.Origen_UsuarioCreador = envioPadre.HER_Documento.HER_DocumentoCreador.HER_UserName;
                        documentoEnviado.Origen_NombreTitular = envioPadre.HER_Documento.HER_DocumentoTitular.HER_NombreCompleto;
                        documentoEnviado.Origen_UsuarioTitular = envioPadre.HER_Documento.HER_DocumentoTitular.HER_UserName;

                        //Usuario Origen
                        documentoEnviado.Origen_UsuarioDe_Correo = envioPadre.HER_De.HER_Correo;
                        documentoEnviado.Origen_UsuarioDe_NombreCompleto = envioPadre.HER_De.HER_NombreCompleto;
                        documentoEnviado.Origen_UsuarioDe_AreaPadreNombre = (envioPadre.HER_De.HER_Area.HER_Area_PadreId != null) ? envioPadre.HER_De.HER_Area.HER_Area_Padre.HER_Nombre : string.Empty;
                        documentoEnviado.Origen_UsuarioDe_AreaNombre = envioPadre.HER_De.HER_Area.HER_Nombre;
                        documentoEnviado.Origen_UsuarioDe_AreaId = envioPadre.HER_De.HER_Area.HER_AreaId;
                        documentoEnviado.Origen_UsuarioDe_Direccion = envioPadre.HER_DeDireccion;
                        documentoEnviado.Origen_UsuarioDe_Telefono = envioPadre.HER_DeTelefono;
                        documentoEnviado.Origen_UsuarioDe_Region = envioPadre.HER_De.HER_Area.HER_Region.HER_Nombre;
                        documentoEnviado.Origen_UsuarioDe_PuestoNombre = envioPadre.HER_De.HER_Puesto;
                    }
                    else
                    {
                        //Documento Origen
                        documentoEnviado.Origen_EnvioId = envioActual.HER_EnvioId;
                        documentoEnviado.Origen_Folio = envioActual.HER_Documento.HER_Folio;
                        documentoEnviado.Origen_Asunto = envioActual.HER_Documento.HER_Asunto;
                        documentoEnviado.Origen_NoInterno = envioActual.HER_Documento.HER_NoInterno;
                        documentoEnviado.Origen_Fecha = envioActual.HER_FechaEnvio.ToString("D", _cultureEs);
                        documentoEnviado.Origen_Cuerpo = envioActual.HER_Documento.HER_Cuerpo;
                        //--
                        documentoEnviado.Origen_TramiteId = envioActual.HER_TramiteId;
                        documentoEnviado.Origen_Tramite = (envioActual.HER_TramiteId != null) ? envioActual.HER_Tramite.HER_Nombre : string.Empty;
                        documentoEnviado.Origen_Importancia = string.Empty;
                        documentoEnviado.Origen_Visibilidad = envioActual.HER_Visibilidad.HER_Nombre;
                        documentoEnviado.Origen_TipoDocumento = envioActual.HER_Documento.HER_Tipo.HER_Nombre;
                        documentoEnviado.Origen_TipoDocumentoId = envioActual.HER_Documento.HER_TipoId;
                        documentoEnviado.Origen_TipoEnvioId = envioActual.HER_TipoEnvioId;
                        documentoEnviado.Origen_TipoEnvio = envioActual.HER_TipoEnvio.HER_Nombre;
                        documentoEnviado.Origen_RequiereRespuesta = false;
                        documentoEnviado.Origen_ExisteAdjuntos = (envioActual.HER_AnexoId != null) ? true : false;
                        //--
                        documentoEnviado.Origen_ListadoCcp = nombreUsuariosCCP.ToList();
                        documentoEnviado.Origen_ListadoCcpCorreo = correoUsuariosCCP.ToList();

                        documentoEnviado.Origen_NombreCreador = envioActual.HER_Documento.HER_DocumentoCreador.HER_NombreCompleto;
                        documentoEnviado.Origen_UsuarioCreador = envioActual.HER_Documento.HER_DocumentoCreador.HER_UserName;
                        documentoEnviado.Origen_NombreTitular = envioActual.HER_Documento.HER_DocumentoTitular.HER_NombreCompleto;
                        documentoEnviado.Origen_UsuarioTitular = envioActual.HER_Documento.HER_DocumentoTitular.HER_UserName;

                        //Usuario Origen
                        documentoEnviado.Origen_UsuarioDe_Correo = envioActual.HER_De.HER_Correo;
                        documentoEnviado.Origen_UsuarioDe_NombreCompleto = envioActual.HER_De.HER_NombreCompleto;
                        documentoEnviado.Origen_UsuarioDe_AreaPadreNombre = (envioActual.HER_De.HER_Area.HER_Area_PadreId != null) ? envioActual.HER_De.HER_Area.HER_Area_Padre.HER_Nombre : string.Empty;
                        documentoEnviado.Origen_UsuarioDe_AreaNombre = envioActual.HER_De.HER_Area.HER_Nombre;
                        documentoEnviado.Origen_UsuarioDe_AreaId = envioActual.HER_De.HER_Area.HER_AreaId;
                        documentoEnviado.Origen_UsuarioDe_Direccion = envioActual.HER_DeDireccion;
                        documentoEnviado.Origen_UsuarioDe_Telefono = envioActual.HER_DeTelefono;
                        documentoEnviado.Origen_UsuarioDe_Region = envioActual.HER_De.HER_Area.HER_Region.HER_Nombre;
                        documentoEnviado.Origen_UsuarioDe_PuestoNombre = envioActual.HER_De.HER_Puesto;
                    }

                    documentoEnviado.Actual_AsuntoEnvio = envioActual.HER_Documento.HER_Asunto;
                }
            }

            return documentoEnviado;
        }

        //Lectura Documento
        public async Task<DocumentoEnviadoLecturaViewModel> ObtenerDocumentoEnviadoSoloLecturaAsync(int envioId, string usuario)
        {
            var documentoEnviado = new DocumentoEnviadoLecturaViewModel();
            bool lectorEsRemitente = false;
            bool lectorEsDestinatario = false;
            //---
            bool requiereDestinatario = false;

            var envioActualQuery = _context.HER_Envio
                .Where(x => x.HER_EnvioId == envioId)
                //--
                .Include(x => x.HER_Tramite)
                .Include(x => x.HER_TipoEnvio)
                .Include(x => x.HER_EnvioPadre)
                .Include(x => x.HER_EstadoEnvio)
                .Include(x => x.HER_Visibilidad)
                .Include(x => x.HER_Importancia)
                .Include(x => x.HER_Anexo)
                .Include(x => x.HER_Carpeta)
                //--
                .Include(x => x.HER_Documento)
                    .ThenInclude(x => x.HER_Tipo)
                .Include(x => x.HER_Documento)
                    .ThenInclude(x => x.HER_DocumentoCreador)
                .Include(x => x.HER_Documento)
                    .ThenInclude(x => x.HER_DocumentoTitular)
                //--
                .Include(x => x.HER_De)
                    .ThenInclude(x => x.HER_Area)
                        .ThenInclude(x => x.HER_Region)
                .Include(x => x.HER_De)
                    .ThenInclude(x => x.HER_Area)
                        .ThenInclude(x => x.HER_Area_Padre)
                //--

                .AsNoTracking()
                .AsQueryable();

            var recepcionesActualQuery = _context.HER_Recepcion
                .Where(x => x.HER_Envio.HER_EnvioId == envioId
                        && x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1)
                .Include(x => x.HER_EstadoEnvio)
                .Include(x => x.HER_Para)
                    .ThenInclude(x => x.HER_Area)
                //--
                .Include(x => x.HER_Compromiso)
                .AsNoTracking()
                .AsQueryable();

            var envioActual = await envioActualQuery.FirstOrDefaultAsync();
            //Consultas para los enviados especiales

            //[Define el tipo de lector]
            if (envioActual != null)
            {
                //De
                lectorEsRemitente = (envioActual.HER_De.HER_UserName == usuario);

                if (lectorEsRemitente)
                {
                    //[Actual]
                    //Remitente
                    //Visualización
                    documentoEnviado.Actual_Visualizacion_Tipo = ConstVisualizacionEnvio.Envio;
                    //--
                    documentoEnviado.Actual_FechaPropuesta = (envioActual.HER_RequiereRespuesta) ? envioActual.HER_FechaPropuesta.ToString("dd/MM/yyyy", _cultureEs) : string.Empty;
                    documentoEnviado.Actual_FechaCompromiso = string.Empty;
                    documentoEnviado.Actual_EstaLeido = true;
                    documentoEnviado.Actual_TieneRespuesta = false;
                    documentoEnviado.Actual_EstadoId = envioActual.HER_EstadoEnvioId;
                    documentoEnviado.Actual_Estado = envioActual.HER_EstadoEnvio.HER_Nombre;
                    documentoEnviado.Actual_CarpetaId = envioActual.HER_CarpetaId;
                    documentoEnviado.Actual_Fecha = envioActual.HER_FechaEnvio.ToString("dd/MM/yyyy HH:mm", _cultureEs);
                    //Tipo de usuario que lee (Para o CCP)
                    documentoEnviado.Actual_UsuarioLee_Tipo = ConstTipoEmisor.TipoEmisorN3;
                    documentoEnviado.Actual_RequiereRespuesta = envioActual.HER_RequiereRespuesta;
                    //--
                    documentoEnviado.Actual_RecepcionId = 0;

                    //[Origen]
                    documentoEnviado.Origen_UsuarioPara_NombreCompleto = string.Empty;
                    documentoEnviado.Origen_UsuarioPara_AreaNombre = string.Empty;
                    documentoEnviado.Origen_UsuarioPara_PuestoNombre = string.Empty;
                    documentoEnviado.Origen_UsuarioPara_Tipo = 0;
                    documentoEnviado.Origen_FechaCompromiso = string.Empty;
                    documentoEnviado.Origen_FijoFechaCompromiso = false;
                    documentoEnviado.Origen_RequiereRespuesta = envioActual.HER_RequiereRespuesta;
                    //--
                }
                else
                {
                    //Para
                    lectorEsDestinatario = await recepcionesActualQuery
                        .Where(x => x.HER_Para.HER_UserName == usuario)
                        .AnyAsync();

                    if (lectorEsDestinatario)
                    {
                        var recepcionActual = await recepcionesActualQuery
                            .Where(x => x.HER_Para.HER_UserName == usuario)
                            .FirstOrDefaultAsync();

                        requiereDestinatario = (recepcionActual.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? envioActual.HER_RequiereRespuesta : false;

                        //[Actual]
                        //Destinatario
                        //Visualización
                        documentoEnviado.Actual_Visualizacion_Tipo = ConstVisualizacionEnvio.Recepcion;
                        //--
                        documentoEnviado.Actual_FechaPropuesta = (requiereDestinatario) ? recepcionActual.HER_Compromiso
                            .Where(x => x.HER_Tipo == ConstCompromiso.TipoN1)
                            .Select(x => x.HER_Fecha)
                            .First().ToString("dd/MM/yyyy", _cultureEs)
                         :
                            string.Empty;
                        documentoEnviado.Actual_FechaCompromiso = (requiereDestinatario) ? recepcionActual.HER_Compromiso
                            .Where(x => x.HER_Estado == ConstCompromiso.EstadoN1)
                            .Select(x => x.HER_Fecha)
                            .First().ToString("dd/MM/yyyy", _cultureEs)
                         :
                            string.Empty;
                        documentoEnviado.Actual_FijoFechaCompromiso = recepcionActual.HER_Compromiso
                            .Where(x => x.HER_Estado == ConstCompromiso.EstadoN1 && x.HER_Tipo == ConstCompromiso.TipoN2)
                            .Any();
                        documentoEnviado.Actual_EstaLeido = recepcionActual.HER_EstaLeido;
                        documentoEnviado.Actual_TieneRespuesta = recepcionActual.HER_TieneRespuesta;
                        documentoEnviado.Actual_EstadoId = recepcionActual.HER_EstadoEnvioId;
                        documentoEnviado.Actual_Estado = recepcionActual.HER_EstadoEnvio.HER_Nombre;
                        documentoEnviado.Actual_CarpetaId = recepcionActual.HER_CarpetaId;
                        documentoEnviado.Actual_Fecha = recepcionActual.HER_FechaRecepcion.ToString("dd/MM/yyyy HH:mm", _cultureEs);
                        //Tipo de usuario que lee (Para o CCP)
                        documentoEnviado.Actual_UsuarioLee_Tipo = recepcionActual.HER_TipoPara;
                        documentoEnviado.Actual_RequiereRespuesta = requiereDestinatario;
                        //--
                        documentoEnviado.Actual_RecepcionId = recepcionActual.HER_RecepcionId;

                        //[Origen]
                        //Usuario Para
                        if (envioActual.HER_EsReenvio && envioActual.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4)
                        {
                            var recepcionesActualOrigenQuery = _context.HER_Recepcion
                               .Where(x => x.HER_Envio.HER_EnvioId == envioActual.HER_EnvioPadre.HER_EnvioId
                                       && x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4)
                               .Include(x => x.HER_EstadoEnvio)
                               .Include(x => x.HER_Para)
                                   .ThenInclude(x => x.HER_Area)
                               //--
                               .Include(x => x.HER_Compromiso)
                               .AsNoTracking()
                               .AsQueryable();

                            var recepcionActualOrigen = await recepcionesActualOrigenQuery.FirstOrDefaultAsync();

                            documentoEnviado.Origen_UsuarioPara_NombreCompleto = recepcionActualOrigen.HER_Para.HER_NombreCompleto.ToUpper();
                            documentoEnviado.Origen_UsuarioPara_AreaNombre = recepcionActualOrigen.HER_Para.HER_Area.HER_Nombre.ToUpper();
                            documentoEnviado.Origen_UsuarioPara_PuestoNombre = recepcionActualOrigen.HER_Para.HER_Puesto.ToUpper();
                            documentoEnviado.Origen_UsuarioPara_Tipo = recepcionActualOrigen.HER_TipoPara;
                        }
                        else
                        {
                            documentoEnviado.Origen_UsuarioPara_NombreCompleto = recepcionActual.HER_Para.HER_NombreCompleto.ToUpper();
                            documentoEnviado.Origen_UsuarioPara_AreaNombre = recepcionActual.HER_Para.HER_Area.HER_Nombre.ToUpper();
                            documentoEnviado.Origen_UsuarioPara_PuestoNombre = recepcionActual.HER_Para.HER_Puesto.ToUpper();
                            documentoEnviado.Origen_UsuarioPara_Tipo = recepcionActual.HER_TipoPara;
                        }
                        //--
                        documentoEnviado.Origen_FechaCompromiso = (requiereDestinatario) ? recepcionActual.HER_Compromiso
                            .Where(x => x.HER_Estado == ConstCompromiso.EstadoN1)
                            .Select(x => x.HER_Fecha)
                            .First().ToString("dd/MM/yyyy", _cultureEs)
                         :
                            string.Empty;
                        documentoEnviado.Origen_FijoFechaCompromiso = recepcionActual.HER_Compromiso
                            .Where(x => x.HER_Estado == ConstCompromiso.EstadoN1 && x.HER_Tipo == ConstCompromiso.TipoN2)
                            .Any();
                        //--
                        documentoEnviado.Origen_RequiereRespuesta = (recepcionActual.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? envioActual.HER_RequiereRespuesta : false;
                    }
                }

                if (lectorEsRemitente || lectorEsDestinatario)
                {
                    var nombreUsuariosPara = recepcionesActualQuery
                        .Where(x => x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1)
                        .OrderBy(x => x.HER_RecepcionId)
                        .Select(y => y.HER_Para.HER_NombreCompleto)
                        .AsQueryable();

                    //Envio normal
                    var nombreUsuariosCCP = recepcionesActualQuery
                        .Where(x => x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN2)
                        .OrderBy(x => x.HER_RecepcionId)
                        .Select(y => y.HER_Para.HER_NombreCompleto)

                        .AsQueryable();

                    var correoUsuariosCCP = recepcionesActualQuery
                        .Where(x => x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN2)
                        .OrderBy(x => x.HER_RecepcionId)
                        .Select(y => y.HER_Para.HER_NombreCompleto)
                        .AsQueryable();

                    //[Actual]
                    //Envio 
                    documentoEnviado.Actual_AsuntoEnvio = envioActual.HER_Documento.HER_Asunto;
                    documentoEnviado.Actual_EnvioId = envioActual.HER_EnvioId;
                    documentoEnviado.Actual_TipoEnvioId = envioActual.HER_TipoEnvioId;
                    documentoEnviado.Actual_TipoEnvio = envioActual.HER_TipoEnvio.HER_Nombre;
                    documentoEnviado.Actual_EsReenvio = envioActual.HER_EsReenvio;
                    documentoEnviado.Actual_SupleTurnado = (envioActual.HER_EnvioPadre != null && envioActual.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4 && envioActual.HER_EsReenvio) ? true : false;
                    //Usuario Envia De
                    documentoEnviado.Actual_UsuarioDe_Correo = envioActual.HER_De.HER_Correo;
                    documentoEnviado.Actual_UsuarioDe_NombreCompleto = envioActual.HER_De.HER_NombreCompleto;
                    documentoEnviado.Actual_UsuarioDe_NombreUsuario = envioActual.HER_De.HER_UserName;
                    //Usuario Envia Para
                    documentoEnviado.Actual_UsuariosPara = string.Join(", ", nombreUsuariosPara.ToArray());
                    documentoEnviado.Actual_UsuariosCCP = string.Join(", ", nombreUsuariosCCP.ToArray());
                    //Turnado
                    documentoEnviado.Actual_EsTurnado = false;
                    documentoEnviado.Actual_Indicaciones = (envioActual.HER_EsReenvio) ? envioActual.HER_Indicaciones : string.Empty;
                    documentoEnviado.Actual_ExisteAdjuntos = (envioActual.HER_EsReenvio) ?
                        (envioActual.HER_AnexoId != null || envioActual.HER_EnvioPadre.HER_AnexoId != null) ? true : false
                        :
                        (envioActual.HER_AnexoId != null) ? true : false;
                    //--
                    documentoEnviado.Actual_TramiteId = envioActual.HER_TramiteId;
                    documentoEnviado.Actual_Tramite = (envioActual.HER_TramiteId != null) ? envioActual.HER_Tramite.HER_Nombre : string.Empty;
                    documentoEnviado.Actual_Importancia = envioActual.HER_Importancia.HER_Nombre;
                    documentoEnviado.Actual_Visibilidad = envioActual.HER_Visibilidad.HER_Nombre;

                    //[Origen]
                    documentoEnviado.Origen_EnvioId = envioActual.HER_EnvioId;
                    documentoEnviado.Origen_TipoEnvioId = envioActual.HER_TipoEnvioId;
                    documentoEnviado.Origen_TipoEnvio = envioActual.HER_TipoEnvio.HER_Nombre;
                    documentoEnviado.Origen_GrupoEnvio = envioActual.HER_GrupoEnvio;
                    //Documento
                    documentoEnviado.Origen_DocumentoId = envioActual.HER_DocumentoId;
                    documentoEnviado.Origen_Folio = envioActual.HER_Documento.HER_Folio;
                    documentoEnviado.Origen_Asunto = envioActual.HER_Documento.HER_Asunto;
                    documentoEnviado.Origen_NoInterno = envioActual.HER_Documento.HER_NoInterno;
                    documentoEnviado.Origen_Cuerpo = envioActual.HER_Documento.HER_Cuerpo;
                    documentoEnviado.Origen_TipoDocumento = envioActual.HER_Documento.HER_Tipo.HER_Nombre;
                    documentoEnviado.Origen_TipoDocumentoId = envioActual.HER_Documento.HER_TipoId;
                    //--
                    documentoEnviado.Origen_NombreCreador = envioActual.HER_Documento.HER_DocumentoCreador.HER_NombreCompleto;
                    documentoEnviado.Origen_UsuarioCreador = envioActual.HER_Documento.HER_DocumentoCreador.HER_UserName;
                    documentoEnviado.Origen_NombreTitular = envioActual.HER_Documento.HER_DocumentoTitular.HER_NombreCompleto;
                    documentoEnviado.Origen_UsuarioTitular = envioActual.HER_Documento.HER_DocumentoTitular.HER_UserName;
                    //--
                    documentoEnviado.Origen_Fecha = envioActual.HER_FechaEnvio.ToString("D", _cultureEs);
                    documentoEnviado.Origen_TramiteId = envioActual.HER_TramiteId;
                    documentoEnviado.Origen_Tramite = (envioActual.HER_TramiteId != null) ? envioActual.HER_Tramite.HER_Nombre : string.Empty;
                    documentoEnviado.Origen_Importancia = envioActual.HER_Importancia.HER_Nombre;
                    documentoEnviado.Origen_Visibilidad = envioActual.HER_Visibilidad.HER_Nombre;
                    documentoEnviado.Origen_ExisteAdjuntos = (envioActual.HER_AnexoId != null) ? true : false;
                    if (envioActual.HER_EsReenvio && envioActual.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4)
                    {
                        var recepcionesActualOrigenQuery = _context.HER_Recepcion
                               .Where(x => x.HER_Envio.HER_EnvioId == envioActual.HER_EnvioPadre.HER_EnvioId
                                       && x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4)
                               .Include(x => x.HER_EstadoEnvio)
                               .Include(x => x.HER_Para)
                                   .ThenInclude(x => x.HER_Area)
                               //--
                               .Include(x => x.HER_Compromiso)
                               .AsNoTracking()
                               .AsQueryable();

                        var recepcionActualOrigen = await recepcionesActualOrigenQuery.FirstOrDefaultAsync();

                        var nombreUsuariosOrigenCCP = recepcionesActualOrigenQuery
                        .Where(x => x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN2)
                        .OrderBy(x => x.HER_RecepcionId)
                        .Select(y => y.HER_Para.HER_NombreCompleto)
                        .AsQueryable();

                        var correoUsuariosOrigenCCP = recepcionesActualOrigenQuery
                            .Where(x => x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN2)
                            .OrderBy(x => x.HER_RecepcionId)
                            .Select(y => y.HER_Para.HER_NombreCompleto)
                            .AsQueryable();

                        documentoEnviado.Origen_ListadoCcp = nombreUsuariosOrigenCCP.ToList();
                        documentoEnviado.Origen_ListadoCcpCorreo = correoUsuariosOrigenCCP.ToList();
                    }
                    else
                    {

                        documentoEnviado.Origen_ListadoCcp = nombreUsuariosCCP.ToList();
                        documentoEnviado.Origen_ListadoCcpCorreo = correoUsuariosCCP.ToList();
                    }
                    //Usuario De
                    if (envioActual.HER_EsReenvio && envioActual.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4)
                    {
                        var envioActualOrigenQuery = _context.HER_Envio
                           .Where(x => x.HER_EnvioId == envioActual.HER_EnvioPadre.HER_EnvioId)
                           //--
                           .Include(x => x.HER_Tramite)
                           .Include(x => x.HER_TipoEnvio)
                           .Include(x => x.HER_EnvioPadre)
                           .Include(x => x.HER_EstadoEnvio)
                           .Include(x => x.HER_Visibilidad)
                           .Include(x => x.HER_Importancia)
                           .Include(x => x.HER_Anexo)
                           .Include(x => x.HER_Carpeta)
                           //--
                           .Include(x => x.HER_Documento)
                               .ThenInclude(x => x.HER_Tipo)
                           .Include(x => x.HER_Documento)
                               .ThenInclude(x => x.HER_DocumentoCreador)
                           .Include(x => x.HER_Documento)
                               .ThenInclude(x => x.HER_DocumentoTitular)
                           //--
                           .Include(x => x.HER_De)
                               .ThenInclude(x => x.HER_Area)
                                   .ThenInclude(x => x.HER_Region)
                           .Include(x => x.HER_De)
                               .ThenInclude(x => x.HER_Area)
                                   .ThenInclude(x => x.HER_Area_Padre)
                           //--

                           .AsNoTracking()
                           .AsQueryable();

                        var envioActualOrigen = await envioActualOrigenQuery.FirstOrDefaultAsync();

                        documentoEnviado.Origen_UsuarioDe_Correo = envioActualOrigen.HER_De.HER_Correo;
                        documentoEnviado.Origen_UsuarioDe_NombreUsuario = envioActualOrigen.HER_De.HER_UserName;
                        documentoEnviado.Origen_UsuarioDe_NombreCompleto = envioActualOrigen.HER_De.HER_NombreCompleto;
                        documentoEnviado.Origen_UsuarioDe_AreaPadreNombre = (envioActualOrigen.HER_De.HER_Area.HER_Area_PadreId != null) ? envioActualOrigen.HER_De.HER_Area.HER_Area_Padre.HER_Nombre : string.Empty;
                        documentoEnviado.Origen_UsuarioDe_AreaNombre = envioActualOrigen.HER_De.HER_Area.HER_Nombre;
                        documentoEnviado.Origen_UsuarioDe_AreaId = envioActualOrigen.HER_De.HER_Area.HER_AreaId;
                        documentoEnviado.Origen_UsuarioDe_Direccion = envioActualOrigen.HER_DeDireccion;
                        documentoEnviado.Origen_UsuarioDe_Telefono = envioActualOrigen.HER_DeTelefono;
                        documentoEnviado.Origen_UsuarioDe_Region = envioActualOrigen.HER_De.HER_Area.HER_Region.HER_Nombre;
                        documentoEnviado.Origen_UsuarioDe_PuestoNombre = envioActualOrigen.HER_De.HER_Puesto;
                    }
                    else
                    {
                        documentoEnviado.Origen_UsuarioDe_Correo = envioActual.HER_De.HER_Correo;
                        documentoEnviado.Origen_UsuarioDe_NombreUsuario = envioActual.HER_De.HER_UserName;
                        documentoEnviado.Origen_UsuarioDe_NombreCompleto = envioActual.HER_De.HER_NombreCompleto;
                        documentoEnviado.Origen_UsuarioDe_AreaPadreNombre = (envioActual.HER_De.HER_Area.HER_Area_PadreId != null) ? envioActual.HER_De.HER_Area.HER_Area_Padre.HER_Nombre : string.Empty;
                        documentoEnviado.Origen_UsuarioDe_AreaNombre = envioActual.HER_De.HER_Area.HER_Nombre;
                        documentoEnviado.Origen_UsuarioDe_AreaId = envioActual.HER_De.HER_Area.HER_AreaId;
                        documentoEnviado.Origen_UsuarioDe_Direccion = envioActual.HER_DeDireccion;
                        documentoEnviado.Origen_UsuarioDe_Telefono = envioActual.HER_DeTelefono;
                        documentoEnviado.Origen_UsuarioDe_Region = envioActual.HER_De.HER_Area.HER_Region.HER_Nombre;
                        documentoEnviado.Origen_UsuarioDe_PuestoNombre = envioActual.HER_De.HER_Puesto;
                    }
                    //--
                }
            }

            return documentoEnviado;
        }
        public async Task<DocumentoEnviadoLecturaViewModel> ObtenerDocumentoTurnadoSoloLecturaAsync(int envioId, string usuario)
        {
            var documentoEnviado = new DocumentoEnviadoLecturaViewModel();
            bool lectorEsRemitente = false;
            bool lectorEsDestinatario = false;
            //--
            bool requiereDestinatario = false;

            bool origenRequiereDestinatario = false;

            //---[Actual]---
            var envioActualQuery = _context.HER_Envio
                .Where(x => x.HER_EnvioId == envioId)
                //--
                .Include(x => x.HER_Tramite)
                .Include(x => x.HER_TipoEnvio)
                .Include(x => x.HER_EnvioPadre)
                .Include(x => x.HER_EstadoEnvio)
                .Include(x => x.HER_Visibilidad)
                .Include(x => x.HER_Importancia)
                .Include(x => x.HER_Anexo)
                .Include(x => x.HER_Carpeta)
                //--
                .Include(x => x.HER_Documento)
                    .ThenInclude(x => x.HER_Tipo)
                .Include(x => x.HER_Documento)
                    .ThenInclude(x => x.HER_DocumentoCreador)
                .Include(x => x.HER_Documento)
                    .ThenInclude(x => x.HER_DocumentoTitular)
                //--
                .Include(x => x.HER_De)
                    .ThenInclude(x => x.HER_Area)
                        .ThenInclude(x => x.HER_Region)
                .Include(x => x.HER_De)
                    .ThenInclude(x => x.HER_Area)
                        .ThenInclude(x => x.HER_Area_Padre)
                //--
                .AsNoTracking()
                .AsQueryable();

            var recepcionesActualQuery = _context.HER_Recepcion
                .Where(x => x.HER_Envio.HER_EnvioId == envioId)
                .Include(x => x.HER_EstadoEnvio)
                .Include(x => x.HER_Para)
                    .ThenInclude(x => x.HER_Area)
                //--
                .Include(x => x.HER_Compromiso)
                .AsNoTracking()
                .AsQueryable();

            var envioActual = await envioActualQuery.FirstOrDefaultAsync();

            if (envioActual != null)
            {
                //De
                lectorEsRemitente = (envioActual.HER_De.HER_UserName == usuario);

                if (lectorEsRemitente)//solo cuando es remitente pero cuando es turnado? y cuando es mandado con copia?
                {
                    //[Actual]
                    //Remitente
                    //Visualización
                    documentoEnviado.Actual_Visualizacion_Tipo = ConstVisualizacionEnvio.Envio;

                    documentoEnviado.Actual_FechaPropuesta = (envioActual.HER_RequiereRespuesta) ? envioActual.HER_FechaPropuesta.ToString("dd/MM/yyyy", _cultureEs) : string.Empty;
                    documentoEnviado.Actual_FechaCompromiso = string.Empty;
                    documentoEnviado.Actual_FijoFechaCompromiso = false;
                    documentoEnviado.Actual_EstaLeido = true;
                    documentoEnviado.Actual_TieneRespuesta = false;
                    documentoEnviado.Actual_EstadoId = envioActual.HER_EstadoEnvioId;
                    documentoEnviado.Actual_Estado = envioActual.HER_EstadoEnvio.HER_Nombre;
                    documentoEnviado.Actual_CarpetaId = envioActual.HER_CarpetaId;
                    documentoEnviado.Actual_Fecha = envioActual.HER_FechaEnvio.ToString("dd/MM/yyyy HH:mm", _cultureEs);
                    //Tipo de usuario que lee (Para o CCP)
                    documentoEnviado.Actual_UsuarioLee_Tipo = ConstTipoEmisor.TipoEmisorN3;
                    documentoEnviado.Actual_RequiereRespuesta = envioActual.HER_RequiereRespuesta;
                    //--
                    documentoEnviado.Actual_RecepcionId = 0;
                }
                else
                {
                    //Para
                    lectorEsDestinatario = await recepcionesActualQuery
                        .Where(x => x.HER_Para.HER_UserName == usuario)
                        .AnyAsync();

                    if (lectorEsDestinatario)
                    {
                        var recepcionActual = await recepcionesActualQuery
                            .Where(x => x.HER_Para.HER_UserName == usuario)
                            .FirstOrDefaultAsync();

                        requiereDestinatario = (recepcionActual.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? envioActual.HER_RequiereRespuesta : false;

                        //[Actual]
                        //Destinatario
                        //Visualización
                        documentoEnviado.Actual_Visualizacion_Tipo = ConstVisualizacionEnvio.Recepcion;
                        //Recepcion (Para)
                        documentoEnviado.Actual_FechaPropuesta = (requiereDestinatario) ? recepcionActual.HER_Compromiso
                            .Where(x => x.HER_Tipo == ConstCompromiso.TipoN1)
                            .Select(x => x.HER_Fecha)
                            .First().ToString("dd/MM/yyyy", _cultureEs)
                         :
                            string.Empty;
                        documentoEnviado.Actual_FechaCompromiso = (requiereDestinatario) ? recepcionActual.HER_Compromiso
                            .Where(x => x.HER_Estado == ConstCompromiso.EstadoN1)
                            .Select(x => x.HER_Fecha)
                            .First().ToString("dd/MM/yyyy", _cultureEs)
                          :
                            string.Empty;
                        documentoEnviado.Actual_FijoFechaCompromiso = recepcionActual.HER_Compromiso
                            .Where(x => x.HER_Estado == ConstCompromiso.EstadoN1 && x.HER_Tipo == ConstCompromiso.TipoN2)
                            .Any();
                        documentoEnviado.Actual_EstaLeido = recepcionActual.HER_EstaLeido;
                        documentoEnviado.Actual_TieneRespuesta = recepcionActual.HER_TieneRespuesta;
                        documentoEnviado.Actual_EstadoId = recepcionActual.HER_EstadoEnvioId;
                        documentoEnviado.Actual_Estado = recepcionActual.HER_EstadoEnvio.HER_Nombre;
                        documentoEnviado.Actual_CarpetaId = recepcionActual.HER_CarpetaId;
                        documentoEnviado.Actual_Fecha = recepcionActual.HER_FechaRecepcion.ToString("dd/MM/yyyy HH:mm", _cultureEs);
                        //Tipo de usuario que lee (Para o CCP)
                        documentoEnviado.Actual_UsuarioLee_Tipo = recepcionActual.HER_TipoPara;
                        documentoEnviado.Actual_RequiereRespuesta = requiereDestinatario;
                        //---
                        documentoEnviado.Actual_RecepcionId = recepcionActual.HER_RecepcionId;
                    }
                }

                if (lectorEsRemitente || lectorEsDestinatario)
                {
                    var nombreUsuariosPara = recepcionesActualQuery
                        .Where(x => x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1)
                        .OrderBy(x => x.HER_RecepcionId)
                        .Select(y => y.HER_Para.HER_NombreCompleto)
                        .AsQueryable();

                    var nombreUsuariosCCP = recepcionesActualQuery
                        .Where(x => x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN2)
                        .OrderBy(x => x.HER_RecepcionId)
                        .Select(y => y.HER_Para.HER_NombreCompleto)
                        .AsQueryable();

                    var correoUsuariosCCP = recepcionesActualQuery
                       .Where(x => x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN2)
                       .OrderBy(x => x.HER_RecepcionId)
                       .Select(y => y.HER_Para.HER_Correo)
                       .AsQueryable();

                    //[Actual]
                    //Envio 
                    documentoEnviado.Actual_AsuntoEnvio = string.Format("{0} {1}", "", envioActual.HER_Documento.HER_Asunto);
                    documentoEnviado.Actual_EnvioId = envioActual.HER_EnvioId;
                    documentoEnviado.Actual_TipoEnvioId = envioActual.HER_TipoEnvioId;
                    documentoEnviado.Actual_EsReenvio = envioActual.HER_EsReenvio;
                    documentoEnviado.Actual_TipoEnvio = envioActual.HER_TipoEnvio.HER_Nombre;
                    //Usuario Envia De
                    documentoEnviado.Actual_UsuarioDe_Correo = envioActual.HER_De.HER_Correo;
                    documentoEnviado.Actual_UsuarioDe_NombreCompleto = envioActual.HER_De.HER_NombreCompleto;
                    documentoEnviado.Actual_UsuarioDe_NombreUsuario = envioActual.HER_De.HER_UserName;
                    //Usuario Envia Para
                    documentoEnviado.Actual_UsuariosPara = string.Join(", ", nombreUsuariosPara.ToArray());
                    documentoEnviado.Actual_UsuariosCCP = string.Join(", ", nombreUsuariosCCP.ToArray());
                    documentoEnviado.Actual_CorreosCCP = string.Join(", ", correoUsuariosCCP.ToArray());

                    //Turnado
                    documentoEnviado.Actual_EsTurnado = true;
                    documentoEnviado.Actual_Indicaciones = envioActual.HER_Indicaciones;
                    documentoEnviado.Actual_ExisteAdjuntos = (envioActual.HER_AnexoId != null) ? true : false;
                    //--
                    documentoEnviado.Actual_TramiteId = envioActual.HER_TramiteId;
                    documentoEnviado.Actual_Tramite = (envioActual.HER_TramiteId != null) ? envioActual.HER_Tramite.HER_Nombre : string.Empty;
                    documentoEnviado.Actual_Importancia = envioActual.HER_Importancia.HER_Nombre;
                    documentoEnviado.Actual_Visibilidad = envioActual.HER_Visibilidad.HER_Nombre;
                    //************************************************************************************************
                    //[Origen]
                    //Si es un turnado se busca recuperar la informacion origen
                    var envioOrigenQuery = _context.HER_Envio
                        .Where(x => x.HER_DocumentoId == envioActual.HER_DocumentoId && x.HER_GrupoEnvio == envioActual.HER_GrupoEnvio)
                        //--
                        .Include(x => x.HER_Tramite)
                        .Include(x => x.HER_TipoEnvio)
                        .Include(x => x.HER_EnvioPadre)
                        .Include(x => x.HER_EstadoEnvio)
                        .Include(x => x.HER_Visibilidad)
                        .Include(x => x.HER_Importancia)
                        .Include(x => x.HER_Anexo)
                        .Include(x => x.HER_Carpeta)
                        //--
                        .Include(x => x.HER_Documento)
                            .ThenInclude(x => x.HER_Tipo)
                        .Include(x => x.HER_Documento)
                            .ThenInclude(x => x.HER_DocumentoCreador)
                        .Include(x => x.HER_Documento)
                            .ThenInclude(x => x.HER_DocumentoTitular)
                        //--
                        .Include(x => x.HER_De)
                            .ThenInclude(x => x.HER_Area)
                                .ThenInclude(x => x.HER_Region)
                        .Include(x => x.HER_De)
                            .ThenInclude(x => x.HER_Area)
                                .ThenInclude(x => x.HER_Area_Padre)
                        //--
                        .OrderBy(x => x.HER_Orden)
                        .AsNoTracking()
                        .AsQueryable();

                    var envioOrigen = await envioOrigenQuery.FirstOrDefaultAsync();

                    if (envioOrigen != null)
                    {
                        documentoEnviado.Origen_EnvioId = envioOrigen.HER_EnvioId;
                        documentoEnviado.Origen_TipoEnvioId = envioOrigen.HER_TipoEnvioId;
                        documentoEnviado.Origen_TipoEnvio = envioOrigen.HER_TipoEnvio.HER_Nombre;
                        documentoEnviado.Origen_GrupoEnvio = envioOrigen.HER_GrupoEnvio;

                        //Documento
                        documentoEnviado.Origen_Folio = envioOrigen.HER_Documento.HER_Folio;
                        documentoEnviado.Origen_DocumentoId = envioOrigen.HER_DocumentoId;
                        documentoEnviado.Origen_Asunto = envioOrigen.HER_Documento.HER_Asunto;
                        documentoEnviado.Origen_NoInterno = envioOrigen.HER_Documento.HER_NoInterno;
                        documentoEnviado.Origen_Fecha = envioOrigen.HER_FechaEnvio.ToString("D", _cultureEs);
                        documentoEnviado.Origen_Cuerpo = envioOrigen.HER_Documento.HER_Cuerpo;
                        documentoEnviado.Origen_TipoDocumento = envioOrigen.HER_Documento.HER_Tipo.HER_Nombre;
                        documentoEnviado.Origen_TipoDocumentoId = envioOrigen.HER_Documento.HER_TipoId;
                        documentoEnviado.Origen_TramiteId = envioOrigen.HER_TramiteId;
                        documentoEnviado.Origen_Tramite = (envioOrigen.HER_TramiteId != null) ? envioOrigen.HER_Tramite.HER_Nombre : string.Empty;
                        documentoEnviado.Origen_Importancia = envioOrigen.HER_Importancia.HER_Nombre;
                        documentoEnviado.Origen_Visibilidad = envioOrigen.HER_Visibilidad.HER_Nombre;
                        documentoEnviado.Origen_ExisteAdjuntos = (envioOrigen.HER_EsReenvio) ?
                            (envioOrigen.HER_AnexoId != null || envioOrigen.HER_EnvioPadre.HER_AnexoId != null) ? true : false
                            :
                            (envioOrigen.HER_AnexoId != null) ? true : false;

                        //Usuario De
                        if (envioOrigen.HER_EsReenvio && envioOrigen.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4)
                        {
                            var envioOrigenPadreQuery = _context.HER_Envio
                               .Where(x => x.HER_DocumentoId == envioOrigen.HER_DocumentoId
                                    && x.HER_EnvioId == envioOrigen.HER_EnvioPadre.HER_EnvioId)
                               //--
                               .Include(x => x.HER_Tramite)
                               .Include(x => x.HER_TipoEnvio)
                               .Include(x => x.HER_EnvioPadre)
                               .Include(x => x.HER_EstadoEnvio)
                               .Include(x => x.HER_Visibilidad)
                               .Include(x => x.HER_Importancia)
                               .Include(x => x.HER_Anexo)
                               .Include(x => x.HER_Carpeta)
                               //--
                               .Include(x => x.HER_Documento)
                                   .ThenInclude(x => x.HER_Tipo)
                               .Include(x => x.HER_Documento)
                                   .ThenInclude(x => x.HER_DocumentoCreador)
                               .Include(x => x.HER_Documento)
                                   .ThenInclude(x => x.HER_DocumentoTitular)
                               //--
                               .Include(x => x.HER_De)
                                   .ThenInclude(x => x.HER_Area)
                                       .ThenInclude(x => x.HER_Region)
                               .Include(x => x.HER_De)
                                   .ThenInclude(x => x.HER_Area)
                                       .ThenInclude(x => x.HER_Area_Padre)
                               //--
                               .OrderBy(x => x.HER_Orden)
                               .AsNoTracking()
                               .AsQueryable();

                            var envioOrigenPadre = await envioOrigenPadreQuery.FirstOrDefaultAsync();

                            documentoEnviado.Origen_UsuarioDe_Correo = envioOrigenPadre.HER_De.HER_Correo;
                            documentoEnviado.Origen_UsuarioDe_NombreCompleto = envioOrigenPadre.HER_De.HER_NombreCompleto;
                            documentoEnviado.Origen_UsuarioDe_AreaPadreNombre = (envioOrigenPadre.HER_De.HER_Area.HER_Area_PadreId != null) ? envioOrigenPadre.HER_De.HER_Area.HER_Area_Padre.HER_Nombre : string.Empty;
                            documentoEnviado.Origen_UsuarioDe_AreaNombre = envioOrigenPadre.HER_De.HER_Area.HER_Nombre;
                            documentoEnviado.Origen_UsuarioDe_AreaId = envioOrigenPadre.HER_De.HER_Area.HER_AreaId;
                            documentoEnviado.Origen_UsuarioDe_Direccion = envioOrigenPadre.HER_DeDireccion;
                            documentoEnviado.Origen_UsuarioDe_Telefono = envioOrigenPadre.HER_DeTelefono;
                            documentoEnviado.Origen_UsuarioDe_Region = envioOrigenPadre.HER_De.HER_Area.HER_Region.HER_Nombre;
                            documentoEnviado.Origen_UsuarioDe_PuestoNombre = envioOrigenPadre.HER_De.HER_Puesto;

                        }
                        else
                        {
                            documentoEnviado.Origen_UsuarioDe_Correo = envioOrigen.HER_De.HER_Correo;
                            documentoEnviado.Origen_UsuarioDe_NombreCompleto = envioOrigen.HER_De.HER_NombreCompleto;
                            documentoEnviado.Origen_UsuarioDe_AreaPadreNombre = (envioOrigen.HER_De.HER_Area.HER_Area_PadreId != null) ? envioOrigen.HER_De.HER_Area.HER_Area_Padre.HER_Nombre : string.Empty;
                            documentoEnviado.Origen_UsuarioDe_AreaNombre = envioOrigen.HER_De.HER_Area.HER_Nombre;
                            documentoEnviado.Origen_UsuarioDe_AreaId = envioOrigen.HER_De.HER_Area.HER_AreaId;
                            documentoEnviado.Origen_UsuarioDe_Direccion = envioOrigen.HER_DeDireccion;
                            documentoEnviado.Origen_UsuarioDe_Telefono = envioOrigen.HER_DeTelefono;
                            documentoEnviado.Origen_UsuarioDe_Region = envioOrigen.HER_De.HER_Area.HER_Region.HER_Nombre;
                            documentoEnviado.Origen_UsuarioDe_PuestoNombre = envioOrigen.HER_De.HER_Puesto;
                        }

                        documentoEnviado.Origen_RequiereRespuesta = envioOrigen.HER_RequiereRespuesta;

                        //--
                        documentoEnviado.Origen_NombreCreador = envioOrigen.HER_Documento.HER_DocumentoCreador.HER_NombreCompleto;
                        documentoEnviado.Origen_UsuarioCreador = envioOrigen.HER_Documento.HER_DocumentoCreador.HER_UserName;
                        documentoEnviado.Origen_NombreTitular = envioOrigen.HER_Documento.HER_DocumentoTitular.HER_NombreCompleto;
                        documentoEnviado.Origen_UsuarioTitular = envioOrigen.HER_Documento.HER_DocumentoTitular.HER_UserName;

                        //Recepción
                        var recepcionesOrigenQuery = _context.HER_Recepcion
                            .Where(x => x.HER_Envio.HER_EnvioId == envioOrigen.HER_EnvioId)
                            .Include(x => x.HER_EstadoEnvio)
                            .Include(x => x.HER_Para)
                                .ThenInclude(x => x.HER_Area)
                            .Include(x => x.HER_Compromiso)
                            .AsNoTracking()
                            .AsQueryable();

                        var recepcionOrigen = await recepcionesOrigenQuery
                            .Where(x => x.HER_ParaId == envioActual.HER_UsuarioOrigenId)
                            .FirstOrDefaultAsync();

                        if (recepcionOrigen != null)
                        {
                            //Turnado del enviado especial 
                            if (envioOrigen.HER_EsReenvio && envioOrigen.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4)
                            {
                                var recepcionesOrigenPadreQuery = _context.HER_Recepcion
                                   .Where(x => x.HER_Envio.HER_EnvioId == envioOrigen.HER_EnvioPadre.HER_EnvioId
                                                    && x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4)
                                   .Include(x => x.HER_EstadoEnvio)
                                   .Include(x => x.HER_Para)
                                       .ThenInclude(x => x.HER_Area)
                                   .Include(x => x.HER_Compromiso)
                                   .AsNoTracking()
                                   .AsQueryable();

                                var nombreUsuariosCCPOrigenPadre = recepcionesOrigenPadreQuery
                                    .Where(x => x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN2)
                                    .OrderBy(x => x.HER_RecepcionId)
                                    .Select(y => y.HER_Para.HER_NombreCompleto)
                                    .AsQueryable();

                                var correoUsuariosCCPOrigenPadre = recepcionesOrigenPadreQuery
                                    .Where(x => x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN2)
                                    .OrderBy(x => x.HER_RecepcionId)
                                    .Select(y => y.HER_Para.HER_Correo)
                                    .AsQueryable();

                                documentoEnviado.Origen_ListadoCcp = nombreUsuariosCCPOrigenPadre.ToList();
                                documentoEnviado.Origen_ListadoCcpCorreo = correoUsuariosCCPOrigenPadre.ToList();
                            }
                            else
                            {
                                var nombreUsuariosCCPOrigen = recepcionesOrigenQuery
                                    .Where(x => x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN2)
                                    .OrderBy(x => x.HER_RecepcionId)
                                    .Select(y => y.HER_Para.HER_NombreCompleto)
                                    .AsQueryable();

                                var correoUsuariosCCPOrigen = recepcionesOrigenQuery
                                    .Where(x => x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN2)
                                    .OrderBy(x => x.HER_RecepcionId)
                                    .Select(y => y.HER_Para.HER_Correo)
                                    .AsQueryable();

                                documentoEnviado.Origen_ListadoCcp = nombreUsuariosCCPOrigen.ToList();
                                documentoEnviado.Origen_ListadoCcpCorreo = correoUsuariosCCPOrigen.ToList();
                            }


                            //origenRequiereDestinatario = (recepcionOrigen.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? envioOrigen.HER_RequiereRespuesta : false;
                            origenRequiereDestinatario = envioOrigen.HER_RequiereRespuesta;


                            //Usuario Para
                            if (envioOrigen.HER_EsReenvio && envioOrigen.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4)
                            {
                                var recepcionesOrigenPadreQuery = _context.HER_Recepcion
                                   .Where(x => x.HER_Envio.HER_EnvioId == envioOrigen.HER_EnvioPadre.HER_EnvioId
                                                    && x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4)
                                   .Include(x => x.HER_EstadoEnvio)
                                   .Include(x => x.HER_Para)
                                       .ThenInclude(x => x.HER_Area)
                                   .Include(x => x.HER_Compromiso)
                                   .AsNoTracking()
                                   .AsQueryable();

                                var recepcionOrigenPadre = await recepcionesOrigenPadreQuery
                                    .FirstOrDefaultAsync();

                                documentoEnviado.Origen_UsuarioPara_NombreCompleto = recepcionOrigenPadre.HER_Para.HER_NombreCompleto.ToUpper();
                                documentoEnviado.Origen_UsuarioPara_AreaNombre = recepcionOrigenPadre.HER_Para.HER_Area.HER_Nombre.ToUpper();
                                documentoEnviado.Origen_UsuarioPara_PuestoNombre = recepcionOrigenPadre.HER_Para.HER_Puesto.ToUpper();
                                documentoEnviado.Origen_UsuarioPara_Tipo = recepcionOrigenPadre.HER_TipoPara;

                            }
                            else
                            {
                                documentoEnviado.Origen_UsuarioPara_NombreCompleto = recepcionOrigen.HER_Para.HER_NombreCompleto.ToUpper();
                                documentoEnviado.Origen_UsuarioPara_AreaNombre = recepcionOrigen.HER_Para.HER_Area.HER_Nombre.ToUpper();
                                documentoEnviado.Origen_UsuarioPara_PuestoNombre = recepcionOrigen.HER_Para.HER_Puesto.ToUpper();
                                documentoEnviado.Origen_UsuarioPara_Tipo = recepcionOrigen.HER_TipoPara;
                            }
                            //--
                            documentoEnviado.Origen_FechaCompromiso = (origenRequiereDestinatario && recepcionOrigen.HER_Compromiso.Count() > 0) ? recepcionOrigen.HER_Compromiso
                            .Where(x => x.HER_Estado == ConstCompromiso.EstadoN1)
                            .Select(x => x.HER_Fecha)
                            .First().ToString("dd/MM/yyyy", _cultureEs)
                          :
                            string.Empty;

                            documentoEnviado.Origen_FijoFechaCompromiso = recepcionOrigen.HER_Compromiso
                            .Where(x => x.HER_Estado == ConstCompromiso.EstadoN1 && x.HER_Tipo == ConstCompromiso.TipoN2)
                            .Any();
                        }
                    }
                }
            }

            return documentoEnviado;
        }
        public async Task<DocumentoEnviadoLecturaViewModel> ObtenerDocumentoRespuestaEnviadoSoloLecturaAsync(int envioId, string usuario)
        {
            var documentoEnviado = new DocumentoEnviadoLecturaViewModel();
            bool lectorEsRemitente = false;
            bool lectorEsDestinatario = false;

            //---[Actual]---
            var envioActualQuery = _context.HER_Envio
                .Where(x => x.HER_EnvioId == envioId)
                //--
                .Include(x => x.HER_Tramite)
                .Include(x => x.HER_TipoEnvio)
                .Include(x => x.HER_EnvioPadre)
                    .ThenInclude(x => x.HER_TipoEnvio)
                .Include(x => x.HER_EstadoEnvio)
                .Include(x => x.HER_Visibilidad)
                .Include(x => x.HER_Importancia)
                .Include(x => x.HER_Anexo)
                .Include(x => x.HER_Carpeta)
                //--
                .Include(x => x.HER_Documento)
                    .ThenInclude(x => x.HER_Tipo)
                .Include(x => x.HER_Documento)
                    .ThenInclude(x => x.HER_DocumentoCreador)
                .Include(x => x.HER_Documento)
                    .ThenInclude(x => x.HER_DocumentoTitular)
                //--
                .Include(x => x.HER_De)
                    .ThenInclude(x => x.HER_Area)
                        .ThenInclude(x => x.HER_Region)
                .Include(x => x.HER_De)
                    .ThenInclude(x => x.HER_Area)
                        .ThenInclude(x => x.HER_Area_Padre)
                //--
                .AsNoTracking()
                .AsQueryable();

            var recepcionesActualQuery = _context.HER_Recepcion
                .Where(x => x.HER_Envio.HER_EnvioId == envioId)
                .Include(x => x.HER_EstadoEnvio)
                .Include(x => x.HER_Para)
                    .ThenInclude(x => x.HER_Area)
                //--
                .Include(x => x.HER_Compromiso)
                .AsNoTracking()
                .AsQueryable();

            var envioActual = await envioActualQuery.FirstOrDefaultAsync();

            if (envioActual != null)
            {
                var envioPadreQuery = _context.HER_Envio
                    .Where(x => x.HER_EnvioId == envioActual.HER_EnvioPadreId)
                    //--
                    .Include(x => x.HER_Tramite)
                    .Include(x => x.HER_TipoEnvio)
                    .Include(x => x.HER_EnvioPadre)
                        .ThenInclude(x => x.HER_TipoEnvio)
                    .Include(x => x.HER_EstadoEnvio)
                    .Include(x => x.HER_Visibilidad)
                    .Include(x => x.HER_Importancia)
                    .Include(x => x.HER_Anexo)
                    .Include(x => x.HER_Carpeta)
                    //--
                    .Include(x => x.HER_Documento)
                        .ThenInclude(x => x.HER_Tipo)
                    .Include(x => x.HER_Documento)
                        .ThenInclude(x => x.HER_DocumentoCreador)
                    .Include(x => x.HER_Documento)
                        .ThenInclude(x => x.HER_DocumentoTitular)
                    //--
                    .Include(x => x.HER_De)
                        .ThenInclude(x => x.HER_Area)
                            .ThenInclude(x => x.HER_Region)
                    .Include(x => x.HER_De)
                        .ThenInclude(x => x.HER_Area)
                            .ThenInclude(x => x.HER_Area_Padre)
                    //--
                    .AsNoTracking()
                    .AsQueryable();

                var recepcionesPadreQuery = _context.HER_Recepcion
                    .Where(x => x.HER_Envio.HER_EnvioId == envioActual.HER_EnvioPadreId)
                    .Include(x => x.HER_EstadoEnvio)
                    .Include(x => x.HER_Para)
                        .ThenInclude(x => x.HER_Area)
                    //--
                    .Include(x => x.HER_Compromiso)
                    .AsNoTracking()
                    .AsQueryable();

                //De
                lectorEsRemitente = (envioActual.HER_De.HER_UserName == usuario);

                if (lectorEsRemitente)
                {
                    //[Actual]
                    //Visualización
                    documentoEnviado.Actual_Visualizacion_Tipo = ConstVisualizacionEnvio.Envio;
                    documentoEnviado.Actual_EstaLeido = true;
                    //Tipo de usuario que lee (Para o CCP)
                    documentoEnviado.Actual_UsuarioLee_Tipo = ConstTipoEmisor.TipoEmisorN3;

                    //Remitente
                    var recepcion = await recepcionesActualQuery
                          .Where(x => x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1)
                          .FirstOrDefaultAsync();

                    if (envioActual.HER_EsReenvio)
                    {
                        var recepcionPadre = await recepcionesPadreQuery
                          .Where(x => x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1)
                          .FirstOrDefaultAsync();

                        //Usuario Destino(para Actual)
                        documentoEnviado.Origen_UsuarioPara_NombreCompleto = recepcionPadre.HER_Para.HER_NombreCompleto.ToUpper();
                        documentoEnviado.Origen_UsuarioPara_AreaNombre = recepcionPadre.HER_Para.HER_Area.HER_Nombre.ToUpper();
                        documentoEnviado.Origen_UsuarioPara_PuestoNombre = recepcionPadre.HER_Para.HER_Puesto.ToUpper();
                    }
                    else
                    {
                        //Usuario Destino(para Actual)
                        documentoEnviado.Origen_UsuarioPara_NombreCompleto = recepcion.HER_Para.HER_NombreCompleto.ToUpper();
                        documentoEnviado.Origen_UsuarioPara_AreaNombre = recepcion.HER_Para.HER_Area.HER_Nombre.ToUpper();
                        documentoEnviado.Origen_UsuarioPara_PuestoNombre = recepcion.HER_Para.HER_Puesto.ToUpper();

                    }

                    documentoEnviado.Origen_UsuarioPara_Tipo = 0;
                    documentoEnviado.Origen_FechaCompromiso = string.Empty;
                    documentoEnviado.Origen_FijoFechaCompromiso = false;

                    documentoEnviado.Actual_CarpetaId = envioActual.HER_CarpetaId;
                    documentoEnviado.Actual_Fecha = envioActual.HER_FechaEnvio.ToString("dd/MM/yyyy HH:mm", _cultureEs);
                    documentoEnviado.Actual_FechaCompromiso = string.Empty;
                    documentoEnviado.Actual_FijoFechaCompromiso = false;
                    documentoEnviado.Actual_FechaPropuesta = string.Empty;
                    //Estado para envio o recepción
                    documentoEnviado.Actual_EstadoId = envioActual.HER_EstadoEnvio.HER_EstadoEnvioId;
                    documentoEnviado.Actual_Estado = envioActual.HER_EstadoEnvio.HER_Nombre;
                    //--
                    documentoEnviado.Actual_RecepcionId = 0;
                }
                else
                {
                    //Para
                    lectorEsDestinatario = await recepcionesActualQuery
                        .Where(x => x.HER_Para.HER_UserName == usuario)
                        .AnyAsync();

                    if (lectorEsDestinatario)
                    {
                        var recepcionActual = await recepcionesActualQuery
                            .Where(x => x.HER_Para.HER_UserName == usuario)
                            .FirstOrDefaultAsync();

                        //[Actual]
                        //Destinatario
                        //Visualización
                        documentoEnviado.Actual_Visualizacion_Tipo = ConstVisualizacionEnvio.Recepcion;
                        documentoEnviado.Actual_EstaLeido = recepcionActual.HER_EstaLeido;

                        documentoEnviado.Origen_FechaCompromiso = string.Empty;
                        documentoEnviado.Origen_FijoFechaCompromiso = false;
                        //-----------
                        if (envioActual.HER_EsReenvio)
                        {
                            var recepcionPadre = await recepcionesPadreQuery
                                    .Where(x => x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1)
                                    .FirstOrDefaultAsync();

                            //Usuario Destino(para Actual)
                            documentoEnviado.Origen_UsuarioPara_NombreCompleto = recepcionPadre.HER_Para.HER_NombreCompleto.ToUpper();
                            documentoEnviado.Origen_UsuarioPara_AreaNombre = recepcionPadre.HER_Para.HER_Area.HER_Nombre.ToUpper();
                            documentoEnviado.Origen_UsuarioPara_PuestoNombre = recepcionPadre.HER_Para.HER_Puesto.ToUpper();
                            documentoEnviado.Origen_UsuarioPara_Tipo = recepcionPadre.HER_TipoPara;
                        }
                        else
                        {
                            //Usuario Destino(para Actual)
                            documentoEnviado.Origen_UsuarioPara_NombreCompleto = recepcionActual.HER_Para.HER_NombreCompleto.ToUpper();
                            documentoEnviado.Origen_UsuarioPara_AreaNombre = recepcionActual.HER_Para.HER_Area.HER_Nombre.ToUpper();
                            documentoEnviado.Origen_UsuarioPara_PuestoNombre = recepcionActual.HER_Para.HER_Puesto.ToUpper();
                            documentoEnviado.Origen_UsuarioPara_Tipo = recepcionActual.HER_TipoPara;
                        }

                        //---
                        documentoEnviado.Actual_CarpetaId = recepcionActual.HER_CarpetaId;
                        documentoEnviado.Actual_Fecha = recepcionActual.HER_FechaRecepcion.ToString("dd/MM/yyyy HH:mm", _cultureEs);
                        documentoEnviado.Actual_FechaCompromiso = string.Empty;
                        documentoEnviado.Actual_FijoFechaCompromiso = false;
                        documentoEnviado.Actual_FechaPropuesta = string.Empty;
                        //Estado para envio o recepción
                        documentoEnviado.Actual_EstadoId = recepcionActual.HER_EstadoEnvio.HER_EstadoEnvioId;
                        documentoEnviado.Actual_Estado = recepcionActual.HER_EstadoEnvio.HER_Nombre;
                        //Tipo de usuario que lee (Para o CCP)
                        documentoEnviado.Actual_UsuarioLee_Tipo = recepcionActual.HER_TipoPara;
                        //--
                        documentoEnviado.Actual_RecepcionId = recepcionActual.HER_RecepcionId;

                    }
                }

                if (lectorEsRemitente || lectorEsDestinatario)
                {
                    var nombreUsuariosPara = recepcionesActualQuery
                        .Where(x => x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1)
                        .OrderBy(x => x.HER_RecepcionId)
                        .Select(y => y.HER_Para.HER_NombreCompleto)
                        .AsQueryable();

                    var nombreUsuariosCCP = recepcionesActualQuery
                        .Where(x => x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN2)
                        .OrderBy(x => x.HER_RecepcionId)
                        .Select(y => y.HER_Para.HER_NombreCompleto)
                        .AsQueryable();

                    var correoUsuariosCCP = recepcionesActualQuery
                        .Where(x => x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN2)
                        .OrderBy(x => x.HER_RecepcionId)
                        .Select(y => y.HER_Para.HER_Correo)
                        .AsQueryable();

                    //[Actual]
                    //Envio 
                    documentoEnviado.Actual_AsuntoEnvio = envioActual.HER_Documento.HER_Asunto;
                    documentoEnviado.Actual_EnvioId = envioActual.HER_EnvioId;
                    documentoEnviado.Actual_RequiereRespuesta = false;
                    documentoEnviado.Actual_TramiteId = envioActual.HER_TramiteId;
                    documentoEnviado.Actual_Tramite = (envioActual.HER_TramiteId != null) ? envioActual.HER_Tramite.HER_Nombre : string.Empty;
                    documentoEnviado.Actual_Importancia = string.Empty;
                    documentoEnviado.Actual_Visibilidad = envioActual.HER_Visibilidad.HER_Nombre;
                    documentoEnviado.Actual_TipoEnvioId = envioActual.HER_TipoEnvioId;
                    documentoEnviado.Actual_EsReenvio = envioActual.HER_EsReenvio;
                    documentoEnviado.Actual_TipoEnvio = envioActual.HER_TipoEnvio.HER_Nombre;
                    //Usuario Envia De
                    documentoEnviado.Actual_UsuarioDe_Correo = envioActual.HER_De.HER_Correo;
                    documentoEnviado.Actual_UsuarioDe_NombreCompleto = envioActual.HER_De.HER_NombreCompleto;
                    documentoEnviado.Actual_UsuarioDe_NombreUsuario = envioActual.HER_De.HER_UserName;
                    //Usuario Envia Para
                    documentoEnviado.Actual_UsuariosPara = string.Join(", ", nombreUsuariosPara.ToArray());
                    documentoEnviado.Actual_UsuariosCCP = string.Join(", ", nombreUsuariosCCP.ToArray());
                    documentoEnviado.Actual_CorreosCCP = string.Join(", ", correoUsuariosCCP.ToArray());
                    //Turnado
                    documentoEnviado.Actual_EsTurnado = false;
                    documentoEnviado.Actual_Indicaciones = envioActual.HER_Indicaciones;

                    documentoEnviado.Actual_ExisteAdjuntos = (envioActual.HER_AnexoId != null) ? true : false;
                    //Respuesta
                    documentoEnviado.Actual_TieneRespuesta = false; //Como es una respuesta, no tiene respuesta                                               
                    //---------------------------------

                    if (envioActual.HER_EsReenvio)
                    {
                        var envioPadre = await envioPadreQuery.FirstOrDefaultAsync();

                        var nombreUsuariosCCPPadre = recepcionesPadreQuery
                            .Where(x => x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN2)
                            .OrderBy(x => x.HER_RecepcionId)
                            .Select(y => y.HER_Para.HER_NombreCompleto)
                            .AsQueryable();

                        var correoUsuariosCCPPadre = recepcionesPadreQuery
                            .Where(x => x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN2)
                            .OrderBy(x => x.HER_RecepcionId)
                            .Select(y => y.HER_Para.HER_Correo)
                            .AsQueryable();

                        //[Origen]
                        documentoEnviado.Origen_EnvioId = envioPadre.HER_EnvioId;
                        documentoEnviado.Origen_TipoEnvioId = envioPadre.HER_TipoEnvioId;
                        documentoEnviado.Origen_TipoEnvio = envioPadre.HER_TipoEnvio.HER_Nombre;
                        documentoEnviado.Origen_GrupoEnvio = envioPadre.HER_GrupoEnvio;

                        documentoEnviado.Origen_Folio = envioPadre.HER_Documento.HER_Folio;
                        documentoEnviado.Origen_DocumentoId = envioPadre.HER_DocumentoId;
                        documentoEnviado.Origen_Asunto = envioPadre.HER_Documento.HER_Asunto;
                        documentoEnviado.Origen_NoInterno = envioPadre.HER_Documento.HER_NoInterno;
                        documentoEnviado.Origen_Fecha = envioPadre.HER_FechaEnvio.ToString("D", _cultureEs);
                        documentoEnviado.Origen_Cuerpo = envioPadre.HER_Documento.HER_Cuerpo;

                        documentoEnviado.Origen_TramiteId = envioPadre.HER_TramiteId;
                        documentoEnviado.Origen_Tramite = (envioPadre.HER_TramiteId != null) ? envioPadre.HER_Tramite.HER_Nombre : string.Empty;
                        documentoEnviado.Origen_Importancia = string.Empty;
                        documentoEnviado.Origen_TipoDocumento = envioPadre.HER_Documento.HER_Tipo.HER_Nombre;
                        documentoEnviado.Origen_TipoDocumentoId = envioPadre.HER_Documento.HER_TipoId;
                        documentoEnviado.Origen_Visibilidad = envioPadre.HER_Visibilidad.HER_Nombre;
                        documentoEnviado.Origen_RequiereRespuesta = false;
                        documentoEnviado.Origen_ExisteAdjuntos = (envioPadre.HER_AnexoId != null) ? true : false;
                        documentoEnviado.Origen_ListadoCcp = nombreUsuariosCCPPadre.ToList();
                        documentoEnviado.Origen_ListadoCcpCorreo = correoUsuariosCCPPadre.ToList();
                        documentoEnviado.Origen_NombreCreador = envioPadre.HER_Documento.HER_DocumentoCreador.HER_NombreCompleto;
                        documentoEnviado.Origen_UsuarioCreador = envioPadre.HER_Documento.HER_DocumentoCreador.HER_UserName;
                        documentoEnviado.Origen_NombreTitular = envioPadre.HER_Documento.HER_DocumentoTitular.HER_NombreCompleto;
                        documentoEnviado.Origen_UsuarioTitular = envioPadre.HER_Documento.HER_DocumentoTitular.HER_UserName;

                        //Usuario Origen
                        documentoEnviado.Origen_UsuarioDe_Correo = envioPadre.HER_De.HER_Correo;
                        documentoEnviado.Origen_UsuarioDe_NombreCompleto = envioPadre.HER_De.HER_NombreCompleto;
                        documentoEnviado.Origen_UsuarioDe_AreaPadreNombre = (envioPadre.HER_De.HER_Area.HER_Area_PadreId != null) ? envioPadre.HER_De.HER_Area.HER_Area_Padre.HER_Nombre : string.Empty;
                        documentoEnviado.Origen_UsuarioDe_AreaNombre = envioPadre.HER_De.HER_Area.HER_Nombre;
                        documentoEnviado.Origen_UsuarioDe_AreaId = envioPadre.HER_De.HER_Area.HER_AreaId;
                        documentoEnviado.Origen_UsuarioDe_Direccion = envioPadre.HER_DeDireccion;
                        documentoEnviado.Origen_UsuarioDe_Telefono = envioPadre.HER_DeTelefono;
                        documentoEnviado.Origen_UsuarioDe_Region = envioPadre.HER_De.HER_Area.HER_Region.HER_Nombre;
                        documentoEnviado.Origen_UsuarioDe_PuestoNombre = envioPadre.HER_De.HER_Puesto;
                    }
                    else
                    {
                        //[Origen]
                        documentoEnviado.Origen_EnvioId = (int)envioActual.HER_EnvioPadreId;
                        documentoEnviado.Origen_TipoEnvioId = envioActual.HER_EnvioPadre.HER_TipoEnvioId;
                        documentoEnviado.Origen_TipoEnvio = envioActual.HER_EnvioPadre.HER_TipoEnvio.HER_Nombre;
                        documentoEnviado.Origen_GrupoEnvio = envioActual.HER_GrupoEnvio;

                        documentoEnviado.Origen_Folio = envioActual.HER_Documento.HER_Folio;
                        documentoEnviado.Origen_DocumentoId = envioActual.HER_DocumentoId;
                        documentoEnviado.Origen_Asunto = envioActual.HER_Documento.HER_Asunto;
                        documentoEnviado.Origen_NoInterno = envioActual.HER_Documento.HER_NoInterno;
                        documentoEnviado.Origen_Fecha = envioActual.HER_FechaEnvio.ToString("D", _cultureEs);
                        documentoEnviado.Origen_Cuerpo = envioActual.HER_Documento.HER_Cuerpo;

                        documentoEnviado.Origen_TramiteId = envioActual.HER_TramiteId;
                        documentoEnviado.Origen_Tramite = (envioActual.HER_TramiteId != null) ? envioActual.HER_Tramite.HER_Nombre : string.Empty;
                        documentoEnviado.Origen_Importancia = string.Empty;
                        documentoEnviado.Origen_TipoDocumento = envioActual.HER_Documento.HER_Tipo.HER_Nombre;
                        documentoEnviado.Origen_TipoDocumentoId = envioActual.HER_Documento.HER_TipoId;
                        documentoEnviado.Origen_Visibilidad = envioActual.HER_Visibilidad.HER_Nombre;
                        documentoEnviado.Origen_RequiereRespuesta = false;
                        documentoEnviado.Origen_ExisteAdjuntos = (envioActual.HER_AnexoId != null) ? true : false;
                        documentoEnviado.Origen_ListadoCcp = nombreUsuariosCCP.ToList();
                        documentoEnviado.Origen_ListadoCcp = nombreUsuariosCCP.ToList();
                        documentoEnviado.Origen_ListadoCcpCorreo = correoUsuariosCCP.ToList();
                        documentoEnviado.Origen_NombreCreador = envioActual.HER_Documento.HER_DocumentoCreador.HER_NombreCompleto;
                        documentoEnviado.Origen_UsuarioCreador = envioActual.HER_Documento.HER_DocumentoCreador.HER_UserName;
                        documentoEnviado.Origen_NombreTitular = envioActual.HER_Documento.HER_DocumentoTitular.HER_NombreCompleto;
                        documentoEnviado.Origen_UsuarioTitular = envioActual.HER_Documento.HER_DocumentoTitular.HER_UserName;

                        //Usuario Origen
                        documentoEnviado.Origen_UsuarioDe_Correo = envioActual.HER_De.HER_Correo;
                        documentoEnviado.Origen_UsuarioDe_NombreCompleto = envioActual.HER_De.HER_NombreCompleto;
                        documentoEnviado.Origen_UsuarioDe_AreaPadreNombre = (envioActual.HER_De.HER_Area.HER_Area_PadreId != null) ? envioActual.HER_De.HER_Area.HER_Area_Padre.HER_Nombre : string.Empty;
                        documentoEnviado.Origen_UsuarioDe_AreaNombre = envioActual.HER_De.HER_Area.HER_Nombre;
                        documentoEnviado.Origen_UsuarioDe_AreaId = envioActual.HER_De.HER_Area.HER_AreaId;
                        documentoEnviado.Origen_UsuarioDe_Direccion = envioActual.HER_DeDireccion;
                        documentoEnviado.Origen_UsuarioDe_Telefono = envioActual.HER_DeTelefono;
                        documentoEnviado.Origen_UsuarioDe_Region = envioActual.HER_De.HER_Area.HER_Region.HER_Nombre;
                        documentoEnviado.Origen_UsuarioDe_PuestoNombre = envioActual.HER_De.HER_Puesto;
                    }
                }
            }

            return documentoEnviado;
        }
        public async Task<List<ResumenDestinatarioViewModel>> ObtenerResumenDestinatariosAsync(int envioId)
        {
            var listado = new List<ResumenDestinatarioViewModel>();

            var destinatariosQuery = _context.HER_Recepcion
                .Where(x => x.HER_EnvioId == envioId)
                //--
                .Select(x => new ResumenRecepcionViewModel
                {
                    RecepcionId = x.HER_RecepcionId,
                    //--
                    Usuario = x.HER_Para.HER_UserName,
                    NombreCompleto = x.HER_Para.HER_NombreCompleto,
                    TipoPara = x.HER_TipoPara,
                    FechaRecepcion = x.HER_FechaRecepcion.ToString("dd/MM/yyyy HH:mm 'hrs.'", _cultureEs),
                    FechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                        (from co in x.HER_Compromiso where co.HER_Estado == ConstCompromiso.EstadoN1 select co.HER_Fecha.ToString("dd/MM/yyyy", _cultureEs)).FirstOrDefault()
                        :
                        string.Empty,
                    EstadoEnvioId = x.HER_EstadoEnvioId,
                    EstadoEnvio = x.HER_EstadoEnvio.HER_Nombre,
                    EstaLeido = x.HER_EstaLeido,
                    ConFechaCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                        (from co in x.HER_Compromiso select co).Any(co => co.HER_Estado == ConstCompromiso.EstadoN1 && co.HER_Tipo == ConstCompromiso.TipoN2)
                    : false,
                    RequiereRespuesta = (x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? x.HER_Envio.HER_RequiereRespuesta : false,
                    TieneRespuesta = x.HER_TieneRespuesta,
                    FechasCompromiso = (x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2) ?
                        (from co in x.HER_Compromiso
                         orderby co.HER_Registro descending
                         select new FechasCompromisoDestinatariosViewModel
                         {
                             CompromisoId = co.HER_CompromisoId,
                             Registro = co.HER_Registro.ToString("dd/MM/yyyy HH:mm 'hrs.'", _cultureEs),
                             Fecha = co.HER_Fecha.ToString("dd/MM/yyyy", _cultureEs),
                             Tipo = co.HER_Tipo,
                             Estado = co.HER_Estado,
                             Motivo = co.HER_Motivo
                         }).ToList()
                        :
                        new List<FechasCompromisoDestinatariosViewModel>()
                })
                //--
                .OrderBy(x => x.TipoPara)
                .AsNoTracking()
                .AsQueryable();

            var destinatarios = await destinatariosQuery.ToListAsync();

            //----
            var envioRespuestasQuery = _context.HER_Envio
                .Where(x => x.HER_EnvioPadreId == envioId
                         && x.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4)
                .Select(x => new ResumenEnvioViewModel
                {
                    Usuario = x.HER_De.HER_UserName,
                    EnvioId = x.HER_EnvioId,
                    TipoEnvioId = x.HER_TipoEnvioId,
                    FechaRespuesta = x.HER_FechaEnvio.ToString("dd/MM/yyyy HH:mm 'hrs.'", _cultureEs)
                })
                .AsNoTracking()
                .AsQueryable();

            var envioRespuestas = await envioRespuestasQuery.ToListAsync();
            //--
            ResumenEnvioViewModel envioRespuesta = null;
            //---

            foreach (var destinatario in destinatarios)
            {
                if (destinatario.TieneRespuesta)
                {
                    envioRespuesta = envioRespuestas
                        .Where(x => x.Usuario == destinatario.Usuario)
                        .FirstOrDefault();

                    listado.Add(new ResumenDestinatarioViewModel
                    {
                        NombreCompleto = destinatario.NombreCompleto,
                        FechaRecepcion = destinatario.FechaRecepcion,
                        FechaCompromiso = destinatario.FechaCompromiso,
                        EstadoEnvioId = destinatario.EstadoEnvioId,
                        EstadoEnvio = destinatario.EstadoEnvio,
                        EstaLeido = destinatario.EstaLeido,
                        ConFechaCompromiso = destinatario.ConFechaCompromiso,
                        TieneRespuesta = destinatario.TieneRespuesta,
                        RequiereRespuesta = destinatario.RequiereRespuesta,
                        //--
                        EnvioId = envioRespuesta.EnvioId,
                        TipoEnvioId = envioRespuesta.TipoEnvioId,
                        FechaCompromisoActual = destinatario.FechasCompromiso.FirstOrDefault(),
                        FechasCompromisoHistorico = destinatario.FechasCompromiso,
                        FechaRespuesta = envioRespuesta.FechaRespuesta,
                        //--
                        RecepcionId = destinatario.RecepcionId
                    });
                }
                else
                {
                    listado.Add(new ResumenDestinatarioViewModel
                    {
                        NombreCompleto = destinatario.NombreCompleto,
                        FechaRecepcion = destinatario.FechaRecepcion,
                        FechaCompromiso = destinatario.FechaCompromiso,
                        EstadoEnvioId = destinatario.EstadoEnvioId,
                        EstadoEnvio = destinatario.EstadoEnvio,
                        EstaLeido = destinatario.EstaLeido,
                        ConFechaCompromiso = destinatario.ConFechaCompromiso,
                        TieneRespuesta = destinatario.TieneRespuesta,
                        RequiereRespuesta = destinatario.RequiereRespuesta,
                        //--
                        EnvioId = 0,
                        TipoEnvioId = 0,
                        FechaCompromisoActual = destinatario.FechasCompromiso.FirstOrDefault(),
                        FechasCompromisoHistorico = destinatario.FechasCompromiso,
                        FechaRespuesta = string.Empty,
                        //--
                        RecepcionId = destinatario.RecepcionId
                    });
                }
            }

            return listado;
        }
        public async Task<bool> CambiarRecepcionComoLeidoAsync(int envioId, string usuario)
        {
            //Cambiar de no leido a leido
            var recepcionQuery = _context.HER_Recepcion
                .Where(x => x.HER_EnvioId == envioId
                         && x.HER_Para.HER_UserName == usuario)
                .AsQueryable();

            var recepcion = await recepcionQuery.FirstOrDefaultAsync();

            recepcion.HER_EstaLeido = true;

            _context.HER_Recepcion.Update(recepcion).State = EntityState.Modified;
            var result = await _context.SaveChangesAsync();

            return (result > 0) ? true : false;
        }
        public async Task<bool> CambiarRecepcionRespuestaComoLeidoAsync(int envioId, string usuario)
        {
            //Cambiar de no leido a leido
            var recepcionQuery = _context.HER_Recepcion
                .Where(x => x.HER_EnvioId == envioId
                         && x.HER_Para.HER_UserName == usuario)
                .AsQueryable();

            var recepcion = await recepcionQuery.FirstOrDefaultAsync();

            recepcion.HER_EstaLeido = true;

            _context.HER_Recepcion.Update(recepcion).State = EntityState.Modified;
            var result = await _context.SaveChangesAsync();

            return (result > 0) ? true : false;
        }
        //Seccion de lectura para turnar
        public async Task<TurnarDocumentoLecturaViewModel> ObtenerDocumentoTurnarParaLecturaAsync(int envioId, string usuario)
        {
            var documentoTurnar = new TurnarDocumentoLecturaViewModel();
            bool requiereDestinatario = false;
            //---[Actual]---
            IQueryable<HER_Recepcion> recepcionesOrigenQuery;

            var envioActualQuery = _context.HER_Envio
                .Where(x => x.HER_EnvioId == envioId)
                .Include(x => x.HER_TipoEnvio)
                .Include(x => x.HER_EnvioPadre)
                .Include(x => x.HER_EstadoEnvio)
                .Include(x => x.HER_Visibilidad)
                .Include(x => x.HER_Importancia)
                //--
                .Include(x => x.HER_Documento)
                    .ThenInclude(x => x.HER_Tipo)
                .Include(x => x.HER_Documento)
                    .ThenInclude(x => x.HER_DocumentoCreador)
                .Include(x => x.HER_Documento)
                    .ThenInclude(x => x.HER_DocumentoTitular)
                //--
                .Include(x => x.HER_De)
                    .ThenInclude(x => x.HER_Area)
                        .ThenInclude(x => x.HER_Region)
                .Include(x => x.HER_De)
                    .ThenInclude(x => x.HER_Area)
                        .ThenInclude(x => x.HER_Area_Padre)
                //--
                .AsNoTracking()
                .AsQueryable();

            var recepcionesActualQuery = _context.HER_Recepcion
                .Where(x => x.HER_Envio.HER_EnvioId == envioId)
                .Include(x => x.HER_EstadoEnvio)
                .Include(x => x.HER_Para)
                    .ThenInclude(x => x.HER_Area)
                .Include(x => x.HER_Compromiso)
                .AsNoTracking()
                .AsQueryable();

            var envioActual = await envioActualQuery.FirstOrDefaultAsync();

            if (envioActual != null)
            {
                if (envioActual.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1)
                {
                    // Si es un envio y el orden esta uno, entonces significa que es el envio origen
                    var nombreUsuariosCCP = recepcionesActualQuery
                        .Where(x => x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN2)
                        .Select(y => y.HER_Para.HER_NombreCompleto)
                        .AsQueryable();

                    var correoUsuariosCCP = recepcionesActualQuery
                       .Where(x => x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN2)
                       .Select(y => y.HER_Para.HER_Correo)
                       .AsQueryable();

                    var recepcionActual = await recepcionesActualQuery
                        .Where(x => x.HER_Para.HER_UserName == usuario)
                        .FirstOrDefaultAsync();

                    //Documento Origen
                    documentoTurnar.Asunto = envioActual.HER_Documento.HER_Asunto;
                    documentoTurnar.Folio = envioActual.HER_Documento.HER_Folio;
                    documentoTurnar.NoInterno = envioActual.HER_Documento.HER_NoInterno;
                    documentoTurnar.Cuerpo = envioActual.HER_Documento.HER_Cuerpo;
                    documentoTurnar.TipoDocumento = envioActual.HER_Documento.HER_Tipo.HER_Nombre;
                    documentoTurnar.Fecha = envioActual.HER_FechaEnvio.ToString("D", _cultureEs);

                    if (envioActual.HER_EsReenvio && envioActual.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4)
                    {
                        var recepcionesActualOrigenQuery = _context.HER_Recepcion
                            .Where(x => x.HER_Envio.HER_EnvioId == envioActual.HER_EnvioPadre.HER_EnvioId
                                    && x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4)
                            .Include(x => x.HER_EstadoEnvio)
                            .Include(x => x.HER_Para)
                                .ThenInclude(x => x.HER_Area)
                            .Include(x => x.HER_Compromiso)
                            .AsNoTracking()
                            .AsQueryable();

                        var recepcionActualOrigen = await recepcionesActualOrigenQuery.FirstOrDefaultAsync();

                        var nombreUsuariosOrigenCCP = recepcionesActualOrigenQuery
                        .Where(x => x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN2)
                        .Select(y => y.HER_Para.HER_NombreCompleto)
                        .AsQueryable();

                        var correoUsuariosOrigenCCP = recepcionesActualOrigenQuery
                            .Where(x => x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN2)
                            .Select(y => y.HER_Para.HER_NombreCompleto)
                            .AsQueryable();

                        documentoTurnar.ListadoCcp = nombreUsuariosOrigenCCP.ToList();
                        documentoTurnar.ListadoCcpCorreo = correoUsuariosOrigenCCP.ToList();
                    }
                    else
                    {
                        documentoTurnar.ListadoCcp = nombreUsuariosCCP.ToList();
                        documentoTurnar.ListadoCcpCorreo = correoUsuariosCCP.ToList();
                    }
                    //Usuario Origen
                    if (envioActual.HER_EsReenvio && envioActual.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4)
                    {

                        var envioActualOrigenQuery = _context.HER_Envio
                            .Where(x => x.HER_EnvioId == envioActual.HER_EnvioPadre.HER_EnvioId)
                            .Include(x => x.HER_TipoEnvio)
                            .Include(x => x.HER_EnvioPadre)
                            .Include(x => x.HER_EstadoEnvio)
                            .Include(x => x.HER_Visibilidad)
                            .Include(x => x.HER_Importancia)
                            //--
                            .Include(x => x.HER_Documento)
                                .ThenInclude(x => x.HER_Tipo)
                            .Include(x => x.HER_Documento)
                                .ThenInclude(x => x.HER_DocumentoCreador)
                            .Include(x => x.HER_Documento)
                                .ThenInclude(x => x.HER_DocumentoTitular)
                            //--
                            .Include(x => x.HER_De)
                                .ThenInclude(x => x.HER_Area)
                                    .ThenInclude(x => x.HER_Region)
                            .Include(x => x.HER_De)
                                .ThenInclude(x => x.HER_Area)
                                    .ThenInclude(x => x.HER_Area_Padre)
                            //--
                            .AsNoTracking()
                            .AsQueryable();

                        var envioActualOrigen = await envioActualOrigenQuery.FirstOrDefaultAsync();

                        documentoTurnar.UsuarioCorreo = envioActualOrigen.HER_De.HER_Correo;
                        documentoTurnar.UsuarioNombreCompleto = envioActualOrigen.HER_De.HER_NombreCompleto;
                        documentoTurnar.UsuarioDireccion = envioActualOrigen.HER_DeDireccion;
                        documentoTurnar.UsuarioTelefono = envioActualOrigen.HER_DeTelefono;
                        documentoTurnar.AreaPadreNombre = (envioActualOrigen.HER_De.HER_Area.HER_Area_PadreId != null) ? envioActualOrigen.HER_De.HER_Area.HER_Area_Padre.HER_Nombre : string.Empty;
                        documentoTurnar.AreaNombre = envioActualOrigen.HER_De.HER_Area.HER_Nombre;
                        documentoTurnar.AreaId = envioActualOrigen.HER_De.HER_Area.HER_AreaId;
                        documentoTurnar.RegionNombre = envioActualOrigen.HER_De.HER_Area.HER_Region.HER_Nombre;
                        documentoTurnar.PuestoNombre = envioActualOrigen.HER_De.HER_Puesto;
                        //Traer los documentos origanales para turnar
                        documentoTurnar.ExisteAdjuntos = (envioActualOrigen.HER_AnexoId != null) ? true : false;
                        documentoTurnar.EnvioIdOrigenAdjunto = envioActualOrigen.HER_EnvioId;
                    }
                    else
                    {
                        documentoTurnar.UsuarioCorreo = envioActual.HER_De.HER_Correo;
                        documentoTurnar.UsuarioNombreCompleto = envioActual.HER_De.HER_NombreCompleto;
                        documentoTurnar.UsuarioDireccion = envioActual.HER_DeDireccion;
                        documentoTurnar.UsuarioTelefono = envioActual.HER_DeTelefono;
                        documentoTurnar.AreaPadreNombre = (envioActual.HER_De.HER_Area.HER_Area_PadreId != null) ? envioActual.HER_De.HER_Area.HER_Area_Padre.HER_Nombre : string.Empty;
                        documentoTurnar.AreaNombre = envioActual.HER_De.HER_Area.HER_Nombre;
                        documentoTurnar.AreaId = envioActual.HER_De.HER_Area.HER_AreaId;
                        documentoTurnar.RegionNombre = envioActual.HER_De.HER_Area.HER_Region.HER_Nombre;
                        documentoTurnar.PuestoNombre = envioActual.HER_De.HER_Puesto;
                        //Traer los documentos origanales para turnar
                        documentoTurnar.ExisteAdjuntos = (envioActual.HER_AnexoId != null) ? true : false;
                        documentoTurnar.EnvioIdOrigenAdjunto = envioActual.HER_EnvioId;
                    }

                    //Usuario Para Actual
                    if (envioActual.HER_EsReenvio && envioActual.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4)
                    {
                        var recepcionesActualOrigenQuery = _context.HER_Recepcion
                              .Where(x => x.HER_Envio.HER_EnvioId == envioActual.HER_EnvioPadre.HER_EnvioId
                                      && x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4)
                              .Include(x => x.HER_EstadoEnvio)
                              .Include(x => x.HER_Para)
                                  .ThenInclude(x => x.HER_Area)
                              //--
                              .Include(x => x.HER_Compromiso)
                              .AsNoTracking()
                              .AsQueryable();

                        var recepcionActualOrigen = await recepcionesActualOrigenQuery.FirstOrDefaultAsync();

                        documentoTurnar.UsuarioPara_NombreCompleto = recepcionActualOrigen.HER_Para.HER_NombreCompleto.ToUpper();
                        documentoTurnar.UsuarioPara_AreaNombre = recepcionActualOrigen.HER_Para.HER_Area.HER_Nombre.ToUpper();
                        documentoTurnar.UsuarioPara_PuestoNombre = recepcionActualOrigen.HER_Para.HER_Puesto.ToUpper();
                        documentoTurnar.UsuarioPara_Tipo = recepcionActualOrigen.HER_TipoPara;
                    }
                    else
                    {
                        documentoTurnar.UsuarioPara_NombreCompleto = recepcionActual.HER_Para.HER_NombreCompleto.ToUpper();
                        documentoTurnar.UsuarioPara_AreaNombre = recepcionActual.HER_Para.HER_Area.HER_Nombre.ToUpper();
                        documentoTurnar.UsuarioPara_PuestoNombre = recepcionActual.HER_Para.HER_Puesto.ToUpper();
                        documentoTurnar.UsuarioPara_Tipo = recepcionActual.HER_TipoPara;
                    }

                    //Envio
                    documentoTurnar.EnvioId = envioActual.HER_EnvioId;
                    documentoTurnar.TipoEnvioId = envioActual.HER_TipoEnvioId;
                    documentoTurnar.TipoEnvio = envioActual.HER_TipoEnvio.HER_Nombre;
                    documentoTurnar.AsuntoEnvio = envioActual.HER_Documento.HER_Asunto;
                    documentoTurnar.FechaEnvio = envioActual.HER_FechaEnvio.ToString("dd/MM/yyyy HH:mm 'hrs.'", _cultureEs);
                    documentoTurnar.RequiereRespuesta = envioActual.HER_RequiereRespuesta;
                    documentoTurnar.Indicaciones = (envioActual.HER_Indicaciones != null) ? envioActual.HER_Indicaciones : string.Empty;

                    requiereDestinatario = (recepcionActual.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? envioActual.HER_RequiereRespuesta : false;

                    documentoTurnar.FechaCompromiso = (requiereDestinatario) ? recepcionActual.HER_Compromiso
                        .Where(x => x.HER_Estado == ConstCompromiso.EstadoN1)
                        .Select(x => x.HER_Fecha).FirstOrDefault().ToString("dd/MM/yyyy", _cultureEs)
                     : string.Empty;
                }
                else if (envioActual.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                {
                    //Si es un turnado se busca recuperar la informacion origen

                    //---[Origen]---
                    var envioOrigenQuery = _context.HER_Envio
                         .Where(x => x.HER_DocumentoId == envioActual.HER_DocumentoId)
                         .Include(x => x.HER_Importancia)
                         //--
                         .Include(x => x.HER_Documento)
                             .ThenInclude(x => x.HER_Tipo)
                         .Include(x => x.HER_Documento)
                             .ThenInclude(x => x.HER_DocumentoCreador)
                         .Include(x => x.HER_Documento)
                             .ThenInclude(x => x.HER_DocumentoTitular)
                         //--
                         .Include(x => x.HER_De)
                             .ThenInclude(x => x.HER_Area)
                                 .ThenInclude(x => x.HER_Region)
                         .Include(x => x.HER_De)
                             .ThenInclude(x => x.HER_Area)
                                 .ThenInclude(x => x.HER_Area_Padre)
                         //--
                         .OrderBy(x => x.HER_Orden)
                         .AsNoTracking()
                         .AsQueryable();

                    var envioOrigen = await envioOrigenQuery.FirstOrDefaultAsync();

                    if (envioOrigen != null)
                    {
                        recepcionesOrigenQuery = _context.HER_Recepcion
                           .Where(x => x.HER_EnvioId == envioOrigen.HER_EnvioId)
                           .Include(x => x.HER_Para)
                               .ThenInclude(x => x.HER_Area)
                           .Include(x => x.HER_Compromiso)
                           .AsNoTracking()
                           .AsQueryable();

                        var nombreUsuariosCCPOrigen = recepcionesOrigenQuery
                            .Where(x => x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN2)
                            .Select(y => y.HER_Para.HER_NombreCompleto)
                            .AsQueryable();

                        var correoUsuariosCCPOrigen = recepcionesOrigenQuery
                           .Where(x => x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN2)
                           .Select(y => y.HER_Para.HER_Correo)
                           .AsQueryable();

                        var recepcionOrigen = await recepcionesOrigenQuery
                            //.Where(x => x.HER_ParaId == envioActual.HER_UsuarioOrigenId)
                            .FirstOrDefaultAsync();

                        //Documento Origen
                        documentoTurnar.Asunto = envioOrigen.HER_Documento.HER_Asunto;
                        documentoTurnar.Folio = envioOrigen.HER_Documento.HER_Folio;
                        documentoTurnar.NoInterno = envioOrigen.HER_Documento.HER_NoInterno;
                        documentoTurnar.Fecha = envioOrigen.HER_FechaEnvio.ToString("D", _cultureEs);
                        documentoTurnar.Cuerpo = envioOrigen.HER_Documento.HER_Cuerpo;
                        documentoTurnar.TipoDocumento = envioOrigen.HER_Documento.HER_Tipo.HER_Nombre;
                        documentoTurnar.ExisteAdjuntos = (envioActual.HER_AnexoId != null) ? true : false;

                        if (envioOrigen.HER_EsReenvio && envioOrigen.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4)
                        {
                            var recepcionesOrigenPadreQuery = _context.HER_Recepcion
                                  .Where(x => x.HER_Envio.HER_EnvioId == envioOrigen.HER_EnvioPadre.HER_EnvioId
                                                   && x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4)
                                  .Include(x => x.HER_EstadoEnvio)
                                  .Include(x => x.HER_Para)
                                      .ThenInclude(x => x.HER_Area)
                                  .Include(x => x.HER_Compromiso)
                                  .AsNoTracking()
                                  .AsQueryable();

                            var nombreUsuariosCCPOrigenPadre = recepcionesOrigenPadreQuery
                                .Where(x => x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN2)
                                .Select(y => y.HER_Para.HER_NombreCompleto)
                                .AsQueryable();

                            var correoUsuariosCCPOrigenPadre = recepcionesOrigenPadreQuery
                                .Where(x => x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN2)
                                .Select(y => y.HER_Para.HER_Correo)
                                .AsQueryable();

                            documentoTurnar.ListadoCcp = nombreUsuariosCCPOrigenPadre.ToList();
                            documentoTurnar.ListadoCcpCorreo = correoUsuariosCCPOrigenPadre.ToList();

                        }
                        else
                        {
                            documentoTurnar.ListadoCcp = nombreUsuariosCCPOrigen.ToList();
                            documentoTurnar.ListadoCcpCorreo = correoUsuariosCCPOrigen.ToList();
                        }
                        //Usuario Origen
                        //Uusuario origen si aplico el turnado especial
                        if (envioOrigen.HER_EsReenvio && envioOrigen.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4)
                        {
                            var envioOrigenPadreQuery = _context.HER_Envio
                               .Where(x => x.HER_DocumentoId == envioOrigen.HER_DocumentoId
                                    && x.HER_EnvioId == envioOrigen.HER_EnvioPadre.HER_EnvioId)
                               //--
                               .Include(x => x.HER_Tramite)
                               .Include(x => x.HER_TipoEnvio)
                               .Include(x => x.HER_EnvioPadre)
                               .Include(x => x.HER_EstadoEnvio)
                               .Include(x => x.HER_Visibilidad)
                               .Include(x => x.HER_Importancia)
                               .Include(x => x.HER_Anexo)
                               .Include(x => x.HER_Carpeta)
                               //--
                               .Include(x => x.HER_Documento)
                                   .ThenInclude(x => x.HER_Tipo)
                               .Include(x => x.HER_Documento)
                                   .ThenInclude(x => x.HER_DocumentoCreador)
                               .Include(x => x.HER_Documento)
                                   .ThenInclude(x => x.HER_DocumentoTitular)
                               //--
                               .Include(x => x.HER_De)
                                   .ThenInclude(x => x.HER_Area)
                                       .ThenInclude(x => x.HER_Region)
                               .Include(x => x.HER_De)
                                   .ThenInclude(x => x.HER_Area)
                                       .ThenInclude(x => x.HER_Area_Padre)
                               //--
                               .OrderBy(x => x.HER_Orden)
                               .AsNoTracking()
                               .AsQueryable();

                            var envioOrigenPadre = await envioOrigenPadreQuery.FirstOrDefaultAsync();

                            documentoTurnar.UsuarioCorreo = envioOrigenPadre.HER_De.HER_Correo;
                            documentoTurnar.UsuarioNombreCompleto = envioOrigenPadre.HER_De.HER_NombreCompleto;
                            documentoTurnar.UsuarioDireccion = envioOrigenPadre.HER_DeDireccion;
                            documentoTurnar.UsuarioTelefono = envioOrigenPadre.HER_DeTelefono;
                            documentoTurnar.AreaPadreNombre = (envioOrigenPadre.HER_De.HER_Area.HER_Area_PadreId != null) ? envioOrigenPadre.HER_De.HER_Area.HER_Area_Padre.HER_Nombre : string.Empty;
                            documentoTurnar.AreaNombre = envioOrigenPadre.HER_De.HER_Area.HER_Nombre;
                            documentoTurnar.AreaId = envioOrigenPadre.HER_De.HER_Area.HER_AreaId;
                            documentoTurnar.RegionNombre = envioOrigenPadre.HER_De.HER_Area.HER_Region.HER_Nombre;
                            documentoTurnar.PuestoNombre = envioOrigenPadre.HER_De.HER_Puesto;
                            //Traer los documentos origanales para turnar
                            documentoTurnar.ExisteAdjuntos = (envioOrigenPadre.HER_AnexoId != null) ? true : false;
                            documentoTurnar.EnvioIdOrigenAdjunto = envioOrigenPadre.HER_EnvioId;
                        }
                        else
                        {
                            documentoTurnar.UsuarioCorreo = envioOrigen.HER_De.HER_Correo;
                            documentoTurnar.UsuarioNombreCompleto = envioOrigen.HER_De.HER_NombreCompleto;
                            documentoTurnar.UsuarioDireccion = envioOrigen.HER_DeDireccion;
                            documentoTurnar.UsuarioTelefono = envioOrigen.HER_DeTelefono;
                            documentoTurnar.AreaPadreNombre = (envioOrigen.HER_De.HER_Area.HER_Area_PadreId != null) ? envioOrigen.HER_De.HER_Area.HER_Area_Padre.HER_Nombre : string.Empty;
                            documentoTurnar.AreaNombre = envioOrigen.HER_De.HER_Area.HER_Nombre;
                            documentoTurnar.AreaId = envioOrigen.HER_De.HER_Area.HER_AreaId;
                            documentoTurnar.RegionNombre = envioOrigen.HER_De.HER_Area.HER_Region.HER_Nombre;
                            documentoTurnar.PuestoNombre = envioOrigen.HER_De.HER_Puesto;
                            //Traer los documentos origanales para turnar
                            documentoTurnar.ExisteAdjuntos = (envioOrigen.HER_AnexoId != null) ? true : false;
                            documentoTurnar.EnvioIdOrigenAdjunto = envioOrigen.HER_EnvioId;
                        }

                        //Usuario Para Actual
                        //Usuario Para
                        if (envioOrigen.HER_EsReenvio && envioOrigen.HER_EnvioPadre.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4)
                        {
                            var recepcionesOrigenPadreQuery = _context.HER_Recepcion
                               .Where(x => x.HER_Envio.HER_EnvioId == envioOrigen.HER_EnvioPadre.HER_EnvioId
                                                && x.HER_Envio.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4)
                               .Include(x => x.HER_EstadoEnvio)
                               .Include(x => x.HER_Para)
                                   .ThenInclude(x => x.HER_Area)
                               .Include(x => x.HER_Compromiso)
                               .AsNoTracking()
                               .AsQueryable();

                            var recepcionOrigenPadre = await recepcionesOrigenPadreQuery.FirstOrDefaultAsync();
                            documentoTurnar.UsuarioPara_NombreCompleto = recepcionOrigenPadre.HER_Para.HER_NombreCompleto.ToUpper();
                            documentoTurnar.UsuarioPara_AreaNombre = recepcionOrigenPadre.HER_Para.HER_Area.HER_Nombre.ToUpper();
                            documentoTurnar.UsuarioPara_PuestoNombre = recepcionOrigenPadre.HER_Para.HER_Puesto.ToUpper();
                            documentoTurnar.UsuarioPara_Tipo = recepcionOrigenPadre.HER_TipoPara;

                        }
                        else
                        {
                            documentoTurnar.UsuarioPara_NombreCompleto = recepcionOrigen.HER_Para.HER_NombreCompleto.ToUpper();
                            documentoTurnar.UsuarioPara_AreaNombre = recepcionOrigen.HER_Para.HER_Area.HER_Nombre.ToUpper();
                            documentoTurnar.UsuarioPara_PuestoNombre = recepcionOrigen.HER_Para.HER_Puesto.ToUpper();
                            documentoTurnar.UsuarioPara_Tipo = recepcionOrigen.HER_TipoPara;
                        }

                        //Envio
                        documentoTurnar.EnvioId = envioActual.HER_EnvioId;
                        documentoTurnar.TipoEnvioId = envioActual.HER_TipoEnvioId;
                        documentoTurnar.TipoEnvio = envioActual.HER_TipoEnvio.HER_Nombre;
                        documentoTurnar.FechaEnvio = envioActual.HER_FechaEnvio.ToString("dd/MM/yyyy HH:mm 'hrs.'", _cultureEs);
                        documentoTurnar.Indicaciones = (envioActual.HER_Indicaciones != null) ? envioActual.HER_Indicaciones : string.Empty;


                        documentoTurnar.AsuntoEnvio = envioOrigen.HER_Documento.HER_Asunto;
                        documentoTurnar.RequiereRespuesta = envioOrigen.HER_RequiereRespuesta;

                        requiereDestinatario = (recepcionOrigen.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1) ? envioOrigen.HER_RequiereRespuesta : false;

                        documentoTurnar.FechaCompromiso = (requiereDestinatario) ? recepcionOrigen.HER_Compromiso
                            .Where(x => x.HER_Estado == ConstCompromiso.EstadoN1)
                            .Select(x => x.HER_Fecha).FirstOrDefault().ToString("dd/MM/yyyy", _cultureEs)
                        : string.Empty;
                    }
                }
            }

            return documentoTurnar;
        }
        //[Turnar]
        public async Task<int> CrearTurnarAsync(TurnarViewModel turnarViewModel)
        {
            var turnarId = 0;

            //Busqueda Envio
            var envioQuery = _context.HER_Envio
                .Where(x => x.HER_EnvioId == turnarViewModel.EnvioId)
                .Select(x => new { x.HER_DocumentoId, x.HER_EnvioId, x.HER_UsuarioOrigenId, x.HER_TipoEnvioId, x.HER_EsReenvio, x.HER_GrupoEnvio, x.HER_TramiteId })
                .AsQueryable();

            var envio = await envioQuery.FirstOrDefaultAsync();

            var ordenQuery = _context.HER_Envio
                .Where(x => x.HER_Documento.HER_Folio == turnarViewModel.Folio)
                .AsQueryable();

            var orden = await ordenQuery.MaxAsync(x => x.HER_Orden);

            if (envio != null)
            {
                var usuarioDeQuery = _context.HER_InfoUsuario
                    .Where(x => x.HER_InfoUsuarioId == turnarViewModel.Usuario_DeId)
                    .Select(x => new { x.HER_Direccion, x.HER_Telefono })
                    .AsNoTracking()
                    .AsQueryable();

                var usuarioDe = await usuarioDeQuery.FirstOrDefaultAsync();
                //--
                //Turnar
                var turnar = new HER_Envio()
                {
                    HER_DocumentoId = envio.HER_DocumentoId,
                    HER_DeId = turnarViewModel.Usuario_DeId,
                    HER_DeDireccion = usuarioDe.HER_Direccion,
                    HER_DeTelefono = usuarioDe.HER_Telefono,
                    HER_UsuarioEnviaId = turnarViewModel.Usuario_EnviaId,
                    HER_TipoEnvioId = ConstTipoEnvio.TipoEnvioN2,
                    HER_EnvioPadreId = envio.HER_EnvioId,
                    HER_UsuarioOrigenId = envio.HER_UsuarioOrigenId == null ? turnarViewModel.Usuario_DeId : envio.HER_UsuarioOrigenId,
                    HER_Orden = (orden + 1),
                    HER_EsReenvio = false,
                    HER_GrupoEnvio = envio.HER_GrupoEnvio,
                    HER_TotalPara = turnarViewModel.Total_Para,
                    HER_TotalCCP = turnarViewModel.Total_CCP,
                    HER_TotalParaRespuestas = 0,
                    HER_TotalCCPRespuestas = 0,
                    HER_Indicaciones = turnarViewModel.Indicaciones,
                    HER_RequiereRespuesta = turnarViewModel.RequiereRespuesta,
                    HER_FechaEnvio = DateTime.Now,
                    HER_FechaPropuesta = (turnarViewModel.RequiereRespuesta) ? DateTime.Parse(turnarViewModel.FechaPropuesta, _cultureEs) : DateTime.Now,
                    HER_EstadoEnvioId = (turnarViewModel.RequiereRespuesta) ? ConstEstadoEnvio.EstadoEnvioN5 : ConstEstadoEnvio.EstadoEnvioN7,
                    HER_ImportanciaId = turnarViewModel.ImportanciaId,
                    HER_VisibilidadId = turnarViewModel.VisibilidadId,
                    HER_AnexoId = (turnarViewModel.AnexoId > 0) ? turnarViewModel.AnexoId : null,
                    HER_CarpetaId = null,
                    HER_TramiteId = envio.HER_TramiteId
                };
                _context.HER_Envio.Add(turnar);
                var result = await _context.SaveChangesAsync();

                turnarId = (result > 0) ? turnar.HER_EnvioId : 0;
            }

            return turnarId;
        }
        public async Task<bool> CrearRecepcionTurnarAsync(List<RecepcionTurnarViewModel> listadoTurnarViewModel, string fechaPropuesta)
        {
            var listadoRecepcion = new List<HER_Recepcion>();
            var listadoCategorias = new List<HER_RecepcionCategoria>();
            var listadoCompromisos = new List<HER_Compromiso>();
            var fechaRecepcion = DateTime.Now;
            //--
            foreach (var recepcion in listadoTurnarViewModel)
            {
                //Recepción
                listadoRecepcion.Add(new HER_Recepcion()
                {
                    HER_EnvioId = recepcion.EnvioId,
                    HER_ParaId = recepcion.Usuario_ParaId,
                    HER_TipoPara = recepcion.Tipo_Para,
                    HER_TieneRespuesta = false,
                    HER_EstaLeido = false,
                    HER_FechaRecepcion = fechaRecepcion,
                    HER_CarpetaId = null,
                    HER_EstadoEnvioId = (recepcion.RequiereRespuesta) ? (recepcion.Tipo_Para == ConstTipoDestinatario.TipoDestinatarioN1) ? ConstEstadoEnvio.EstadoEnvioN1 : ConstEstadoEnvio.EstadoEnvioN7 : ConstEstadoEnvio.EstadoEnvioN7,
                });
            }
            _context.HER_Recepcion.AddRange(listadoRecepcion);
            //--
            foreach (var recepcion in listadoRecepcion)
            {
                //Categoria
                listadoCategorias.Add(new HER_RecepcionCategoria()
                {
                    HER_CategoriaId = ConstCategoria.CategoriaN1,
                    HER_RecepcionId = recepcion.HER_RecepcionId
                });
            }

            _context.HER_RecepcionCategoria.AddRange(listadoCategorias);

            if (!string.IsNullOrEmpty(fechaPropuesta))
            {
                //-- -------------------------- --------------------
                //Agrega la fecha propuesta como primera fecha compromiso
                foreach (var recepcion in listadoRecepcion)
                {
                    if (recepcion.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1)
                    {
                        listadoCompromisos.Add(new HER_Compromiso()
                        {
                            HER_Estado = ConstCompromiso.EstadoN1,
                            HER_Tipo = ConstCompromiso.TipoN1,
                            HER_Fecha = DateTime.Parse(fechaPropuesta, _cultureEs),
                            HER_Registro = DateTime.Now,
                            HER_RecepcionId = recepcion.HER_RecepcionId
                        });
                    }
                }

                if (listadoCompromisos.Count > 0)
                    _context.HER_Compromiso.AddRange(listadoCompromisos);
            }

            var result = await _context.SaveChangesAsync();

            return (result > 0) ? true : false;
        }
        //[Respuesta]
        public async Task<DocumentoRespuestaLecturaViewModel> ObtenerDocumentoRespuestaParaLecturaAsync(int envioId, string usuario)
        {
            var documento = new DocumentoRespuestaLecturaViewModel();

            //---[Actual]---
            var envioActualQuery = _context.HER_Envio
                .Where(x => x.HER_EnvioId == envioId)
                //--
                .Include(x => x.HER_TipoEnvio)
                .Include(x => x.HER_EnvioPadre)
                .Include(x => x.HER_EstadoEnvio)
                .Include(x => x.HER_Visibilidad)
                .Include(x => x.HER_Importancia)
                .Include(x => x.HER_Anexo)
                .Include(x => x.HER_Carpeta)
                //--
                .Include(x => x.HER_Documento)
                    .ThenInclude(x => x.HER_Tipo)
                .Include(x => x.HER_Documento)
                    .ThenInclude(x => x.HER_DocumentoCreador)
                .Include(x => x.HER_Documento)
                    .ThenInclude(x => x.HER_DocumentoTitular)
                //--
                .Include(x => x.HER_De)
                    .ThenInclude(x => x.HER_Area)
                        .ThenInclude(x => x.HER_Region)
                .Include(x => x.HER_De)
                    .ThenInclude(x => x.HER_Area)
                        .ThenInclude(x => x.HER_Area_Padre)
                //--
                .AsNoTracking()
                .AsQueryable();

            var recepcionesActualQuery = _context.HER_Recepcion
                .Where(x => x.HER_Envio.HER_EnvioId == envioId)
                //--
                .Include(x => x.HER_EstadoEnvio)
                .Include(x => x.HER_Para)
                    .ThenInclude(x => x.HER_Area)
                        .ThenInclude(x => x.HER_Region)
                .Include(x => x.HER_Para)
                    .ThenInclude(x => x.HER_Area)
                        .ThenInclude(x => x.HER_Area_Padre)
                .AsNoTracking()
                .AsQueryable();

            var envioActual = await envioActualQuery.FirstOrDefaultAsync();

            if (envioActual != null)
            {
                if (envioActual.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1)
                {
                    // Si es un envio y el orden esta uno, entonces significa que es el envio origen
                    //[Origen]
                    //Documento
                    documento.Origen_Asunto = envioActual.HER_Documento.HER_Asunto;
                    documento.Origen_Folio = envioActual.HER_Documento.HER_Folio;
                    documento.Origen_NoInterno = envioActual.HER_Documento.HER_NoInterno;
                    documento.Origen_Fecha = envioActual.HER_FechaEnvio.ToString("D", _cultureEs);
                    documento.Origen_Cuerpo = envioActual.HER_Documento.HER_Cuerpo;
                    documento.Origen_TipoDocumento = envioActual.HER_Documento.HER_Tipo.HER_Nombre;

                    //Usuario (De inicial)
                    documento.Origen_UsuarioDe_Correo = envioActual.HER_De.HER_Correo;
                    documento.Origen_UsuarioDe_NombreCompleto = envioActual.HER_De.HER_NombreCompleto;
                    documento.Origen_UsuarioDe_Direccion = envioActual.HER_DeDireccion;
                    documento.Origen_UsuarioDe_Telefono = envioActual.HER_DeTelefono;
                    documento.Origen_UsuarioDe_AreaPadreNombre = (envioActual.HER_De.HER_Area.HER_Area_PadreId != null) ? envioActual.HER_De.HER_Area.HER_Area_Padre.HER_Nombre : string.Empty;
                    documento.Origen_UsuarioDe_AreaNombre = envioActual.HER_De.HER_Area.HER_Nombre;
                    documento.Origen_UsuarioDe_AreaId = envioActual.HER_De.HER_Area.HER_AreaId;
                    documento.Origen_UsuarioDe_Region = envioActual.HER_De.HER_Area.HER_Region.HER_Nombre;
                    documento.Origen_UsuarioDe_PuestoNombre = envioActual.HER_De.HER_Puesto;
                    documento.ExisteAdjuntos = (envioActual.HER_AnexoId != null) ? true : false;
                    documento.EnvioIdOrigenAdjunto = envioActual.HER_EnvioId;

                    //Usuario (Para inicial)
                    var recepcionActual = await recepcionesActualQuery
                            .Where(x => x.HER_Para.HER_UserName == usuario)
                            .FirstOrDefaultAsync();

                    if (recepcionActual != null)
                    {
                        var nombreUsuariosCCP = recepcionesActualQuery
                            .Where(x => x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN2)
                            .Select(y => y.HER_Para.HER_NombreCompleto)
                            .AsQueryable();

                        var correoUsuariosCCP = recepcionesActualQuery
                           .Where(x => x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN2)
                           .Select(y => y.HER_Para.HER_UserName)
                           .AsQueryable();

                        documento.Origen_ListadoCcp = nombreUsuariosCCP.ToList();
                        documento.Origen_ListadoCcpCorreo = correoUsuariosCCP.ToList();
                        //--
                        documento.Origen_UsuarioPara_NombreCompleto = recepcionActual.HER_Para.HER_NombreCompleto.ToUpper();
                        documento.Origen_UsuarioPara_AreaNombre = recepcionActual.HER_Para.HER_Area.HER_Nombre.ToUpper();
                        documento.Origen_UsuarioPara_PuestoNombre = recepcionActual.HER_Para.HER_Puesto.ToUpper();
                        documento.Origen_UsuarioPara_Tipo = recepcionActual.HER_TipoPara;

                        //En este caso el que recibe es el mismo que contesta, se comparte la información

                        //[Actual]
                        //Usuario que responde (De)
                        documento.Actual_UsuarioDe_Correo = recepcionActual.HER_Para.HER_Correo;
                        documento.Actual_UsuarioDe_NombreCompleto = recepcionActual.HER_Para.HER_NombreCompleto;
                        documento.Actual_UsuarioDe_Direccion = recepcionActual.HER_Para.HER_Direccion;
                        documento.Actual_UsuarioDe_Telefono = recepcionActual.HER_Para.HER_Telefono;
                        documento.Actual_UsuarioDe_AreaPadreNombre = (recepcionActual.HER_Para.HER_Area.HER_Area_PadreId != null) ? recepcionActual.HER_Para.HER_Area.HER_Area_Padre.HER_Nombre : string.Empty;
                        documento.Actual_UsuarioDe_AreaNombre = recepcionActual.HER_Para.HER_Area.HER_Nombre;
                        documento.Actual_UsuarioDe_Region = recepcionActual.HER_Para.HER_Area.HER_Region.HER_Nombre;
                        documento.Actual_UsuarioDe_AreaId = recepcionActual.HER_Para.HER_Area.HER_AreaId;
                        documento.Actual_UsuarioDe_PuestoNombre = recepcionActual.HER_Para.HER_Puesto;

                        //Tipo de usuario que lee (Para o CCP)
                        documento.Actual_UsuarioLee_Tipo = recepcionActual.HER_TipoPara;

                        //[Estado de la respuesta]
                        documento.TieneRespuesta = recepcionActual.HER_TieneRespuesta;
                    }
                    //---

                    //Usuario a responder (Para)
                    documento.Actual_UsuarioPara_NombreUsuario = envioActual.HER_De.HER_UserName;
                    documento.Actual_UsuarioPara_Correo = envioActual.HER_De.HER_Correo;
                    documento.Actual_UsuarioPara_NombreCompleto = envioActual.HER_De.HER_NombreCompleto;
                    documento.Actual_UsuarioPara_AreaNombre = envioActual.HER_De.HER_Area.HER_Nombre;
                    documento.Actual_UsuarioPara_UsuarioId = envioActual.HER_De.HER_InfoUsuarioId;
                    documento.Actual_UsuarioPara_PuestoNombre = envioActual.HER_De.HER_Puesto;

                    //[Envio origen]
                    documento.Origen_EnvioId = envioActual.HER_EnvioId;
                    documento.Origen_FechaEnvio = envioActual.HER_FechaEnvio.ToString("dd/MM/yyyy HH:mm 'hrs.'", _cultureEs);
                    documento.Origen_TipoEnvioId = envioActual.HER_TipoEnvioId;

                    //[Envio actual]
                    documento.Actual_EnvioId = envioActual.HER_EnvioId;
                    documento.Actual_FechaEnvio = envioActual.HER_FechaEnvio.ToString("dd/MM/yyyy HH:mm 'hrs.'", _cultureEs);
                    documento.Actual_TipoEnvioId = envioActual.HER_TipoEnvioId;
                    //Respuesta 
                    documento.Actual_AsuntoRespuesta = string.Format("{0} {1}", "RE:", envioActual.HER_Documento.HER_Asunto);
                    //Turnado
                    documento.Actual_EsTurnado = false;
                    documento.Actual_Indicaciones = string.Empty;
                }
                else if (envioActual.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                {
                    //[Actual]
                    //Usuario (Para inicial)
                    var recepcionActual = await recepcionesActualQuery
                            .Where(x => x.HER_Para.HER_UserName == usuario)
                            .FirstOrDefaultAsync();

                    if (recepcionActual != null)
                    {
                        //Usuario que responde (De)
                        documento.Actual_UsuarioDe_Correo = recepcionActual.HER_Para.HER_Correo;
                        documento.Actual_UsuarioDe_NombreCompleto = recepcionActual.HER_Para.HER_NombreCompleto;
                        documento.Actual_UsuarioDe_Direccion = recepcionActual.HER_Para.HER_Direccion;
                        documento.Actual_UsuarioDe_Telefono = recepcionActual.HER_Para.HER_Telefono;
                        documento.Actual_UsuarioDe_AreaPadreNombre = (recepcionActual.HER_Para.HER_Area.HER_Area_PadreId != null) ? recepcionActual.HER_Para.HER_Area.HER_Area_Padre.HER_Nombre : string.Empty;
                        documento.Actual_UsuarioDe_AreaNombre = recepcionActual.HER_Para.HER_Area.HER_Nombre;
                        documento.Actual_UsuarioDe_Region = recepcionActual.HER_Para.HER_Area.HER_Region.HER_Nombre;
                        documento.Actual_UsuarioDe_AreaId = recepcionActual.HER_Para.HER_Area.HER_AreaId;
                        documento.Actual_UsuarioDe_PuestoNombre = recepcionActual.HER_Para.HER_Puesto;
                        //---

                        //Tipo de usuario que lee (Para o CCP)
                        documento.Actual_UsuarioLee_Tipo = recepcionActual.HER_TipoPara;

                        //[Estado de la respuesta]
                        documento.TieneRespuesta = recepcionActual.HER_TieneRespuesta;
                    }

                    //Usuario a responder (Para)
                    documento.Actual_UsuarioPara_NombreUsuario = envioActual.HER_De.HER_UserName;
                    documento.Actual_UsuarioPara_Correo = envioActual.HER_De.HER_Correo;
                    documento.Actual_UsuarioPara_NombreCompleto = envioActual.HER_De.HER_NombreCompleto;
                    documento.Actual_UsuarioPara_AreaNombre = envioActual.HER_De.HER_Area.HER_Nombre;
                    documento.Actual_UsuarioPara_UsuarioId = envioActual.HER_De.HER_InfoUsuarioId;
                    documento.Actual_UsuarioPara_PuestoNombre = envioActual.HER_De.HER_Puesto;

                    //Si es un turnado se busca recuperar la informacion origen
                    //---[Origen]---
                    var envioOrigenQuery = _context.HER_Envio
                        .Where(x => x.HER_DocumentoId == envioActual.HER_DocumentoId && x.HER_GrupoEnvio == envioActual.HER_GrupoEnvio)
                        //--
                        .Include(x => x.HER_TipoEnvio)
                        .Include(x => x.HER_EnvioPadre)
                        .Include(x => x.HER_EstadoEnvio)
                        .Include(x => x.HER_Visibilidad)
                        .Include(x => x.HER_Importancia)
                        .Include(x => x.HER_Anexo)
                        .Include(x => x.HER_Carpeta)
                        //--
                        .Include(x => x.HER_Documento)
                            .ThenInclude(x => x.HER_Tipo)
                        .Include(x => x.HER_Documento)
                            .ThenInclude(x => x.HER_DocumentoCreador)
                        .Include(x => x.HER_Documento)
                            .ThenInclude(x => x.HER_DocumentoTitular)
                        //--
                        .Include(x => x.HER_De)
                            .ThenInclude(x => x.HER_Area)
                                .ThenInclude(x => x.HER_Region)
                        .Include(x => x.HER_De)
                            .ThenInclude(x => x.HER_Area)
                                .ThenInclude(x => x.HER_Area_Padre)
                        //--
                        .OrderBy(x => x.HER_Orden)
                        .AsNoTracking()
                        .AsQueryable();

                    var envioOrigen = await envioOrigenQuery.FirstOrDefaultAsync();

                    if (envioOrigen != null)
                    {
                        //[Origen]
                        //Documento
                        documento.Origen_Asunto = envioOrigen.HER_Documento.HER_Asunto;
                        documento.Origen_Folio = envioOrigen.HER_Documento.HER_Folio;
                        documento.Origen_NoInterno = envioOrigen.HER_Documento.HER_NoInterno;
                        documento.Origen_Fecha = envioOrigen.HER_FechaEnvio.ToString("D", _cultureEs);
                        documento.Origen_Cuerpo = envioOrigen.HER_Documento.HER_Cuerpo;
                        documento.Origen_TipoDocumento = envioOrigen.HER_Documento.HER_Tipo.HER_Nombre;

                        //Usuario (De inicial)
                        documento.Origen_UsuarioDe_Correo = envioOrigen.HER_De.HER_Correo;
                        documento.Origen_UsuarioDe_NombreCompleto = envioOrigen.HER_De.HER_NombreCompleto;
                        documento.Origen_UsuarioDe_Direccion = envioOrigen.HER_DeDireccion;
                        documento.Origen_UsuarioDe_Telefono = envioOrigen.HER_DeTelefono;
                        documento.Origen_UsuarioDe_AreaPadreNombre = (envioOrigen.HER_De.HER_Area.HER_Area_PadreId != null) ? envioOrigen.HER_De.HER_Area.HER_Area_Padre.HER_Nombre : string.Empty;
                        documento.Origen_UsuarioDe_AreaNombre = envioOrigen.HER_De.HER_Area.HER_Nombre;
                        documento.Origen_UsuarioDe_AreaId = envioOrigen.HER_De.HER_Area.HER_AreaId;
                        documento.Origen_UsuarioDe_Region = envioOrigen.HER_De.HER_Area.HER_Region.HER_Nombre;
                        documento.Origen_UsuarioDe_PuestoNombre = envioOrigen.HER_De.HER_Puesto;
                        documento.ExisteAdjuntos = (envioOrigen.HER_AnexoId != null) ? true : false;
                        documento.EnvioIdOrigenAdjunto = envioOrigen.HER_EnvioId;

                        //Usuario (Para inicial)
                        var recepcionesOrigenQuery = _context.HER_Recepcion
                            .Where(x => x.HER_Envio.HER_EnvioId == envioOrigen.HER_EnvioId)
                            .Include(x => x.HER_EstadoEnvio)
                            .Include(x => x.HER_Para)
                                .ThenInclude(x => x.HER_Area)
                                    .ThenInclude(x => x.HER_Region)
                            .AsNoTracking()
                            .AsQueryable();

                        var recepcionOrigen = await recepcionesOrigenQuery
                            .Where(x => x.HER_ParaId == envioActual.HER_UsuarioOrigenId)
                            .FirstOrDefaultAsync();

                        if (recepcionOrigen != null)
                        {
                            var nombreUsuariosCCPOrigen = recepcionesOrigenQuery
                                .Where(x => x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN2)
                                .Select(y => y.HER_Para.HER_NombreCompleto)
                                .AsQueryable();

                            var correoUsuariosCCPOrigen = recepcionesOrigenQuery
                                .Where(x => x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN2)
                                .Select(y => y.HER_Para.HER_UserName)
                                .AsQueryable();

                            documento.Origen_ListadoCcp = nombreUsuariosCCPOrigen.ToList();
                            documento.Origen_ListadoCcpCorreo = correoUsuariosCCPOrigen.ToList();

                            documento.Origen_UsuarioPara_NombreCompleto = (recepcionOrigen.HER_Para.HER_NombreCompleto.ToUpper() != null) ? recepcionOrigen.HER_Para.HER_NombreCompleto.ToUpper() : string.Empty;
                            documento.Origen_UsuarioPara_AreaNombre = (recepcionOrigen.HER_Para.HER_Area.HER_Nombre.ToUpper() != null) ? recepcionOrigen.HER_Para.HER_Area.HER_Nombre.ToUpper() : string.Empty;
                            documento.Origen_UsuarioPara_PuestoNombre = (recepcionOrigen.HER_Para.HER_Puesto.ToUpper() != null) ? recepcionOrigen.HER_Para.HER_Puesto.ToUpper() : string.Empty;
                            documento.Origen_UsuarioPara_Tipo = recepcionOrigen.HER_TipoPara;
                        }

                        //[Envio origen]
                        documento.Origen_EnvioId = envioOrigen.HER_EnvioId;
                        documento.Origen_FechaEnvio = envioOrigen.HER_FechaEnvio.ToString("dd/MM/yyyy HH:mm 'hrs.'", _cultureEs);
                        documento.Origen_TipoEnvioId = envioOrigen.HER_TipoEnvioId;

                        //Respuesta 
                        documento.Actual_AsuntoRespuesta = string.Format("{0} {1}", "RE:", envioOrigen.HER_Documento.HER_Asunto);
                    }

                    //[Envio actual]
                    documento.Actual_EnvioId = envioActual.HER_EnvioId;
                    documento.Actual_FechaEnvio = envioActual.HER_FechaEnvio.ToString("dd/MM/yyyy HH:mm 'hrs.'", _cultureEs);
                    documento.Actual_TipoEnvioId = envioActual.HER_TipoEnvioId;
                    //Turnado
                    documento.Actual_EsTurnado = true;
                    documento.Actual_Indicaciones = envioActual.HER_Indicaciones;
                    //---
                }
                else if (envioActual.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN3)
                {
                    //[Origen]
                    //Documento Origen
                    documento.Origen_Asunto = envioActual.HER_Documento.HER_Asunto;
                    documento.Origen_Folio = envioActual.HER_Documento.HER_Folio;
                    documento.Origen_NoInterno = envioActual.HER_Documento.HER_NoInterno;
                    documento.Origen_Fecha = envioActual.HER_FechaEnvio.ToString("D", _cultureEs);
                    documento.Origen_Cuerpo = envioActual.HER_Documento.HER_Cuerpo;
                    documento.Origen_TipoDocumento = envioActual.HER_Documento.HER_Tipo.HER_Nombre;

                    //Usuario Origen (De inicial)
                    documento.Origen_UsuarioDe_Correo = envioActual.HER_De.HER_Correo;
                    documento.Origen_UsuarioDe_NombreCompleto = envioActual.HER_De.HER_NombreCompleto;
                    documento.Origen_UsuarioDe_Direccion = envioActual.HER_DeDireccion;
                    documento.Origen_UsuarioDe_Telefono = envioActual.HER_DeTelefono;
                    documento.Origen_UsuarioDe_AreaPadreNombre = (envioActual.HER_De.HER_Area.HER_Area_PadreId != null) ? envioActual.HER_De.HER_Area.HER_Area_Padre.HER_Nombre : string.Empty;
                    documento.Origen_UsuarioDe_AreaNombre = envioActual.HER_De.HER_Area.HER_Nombre;
                    documento.Origen_UsuarioDe_AreaId = envioActual.HER_De.HER_Area.HER_AreaId;
                    documento.Origen_UsuarioDe_Region = envioActual.HER_De.HER_Area.HER_Region.HER_Nombre;
                    documento.Origen_UsuarioDe_PuestoNombre = envioActual.HER_De.HER_Puesto;
                    documento.ExisteAdjuntos = (envioActual.HER_AnexoId != null) ? true : false;
                    documento.EnvioIdOrigenAdjunto = envioActual.HER_EnvioId;
                    //[Actual]
                    //Usuario (Para inicial)
                    var recepcionActual = await recepcionesActualQuery
                            .Where(x => x.HER_Para.HER_UserName == usuario)
                            .FirstOrDefaultAsync();

                    if (recepcionActual != null)
                    {
                        var nombreUsuariosCCP = recepcionesActualQuery
                            .Where(x => x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN2)
                            .Select(y => y.HER_Para.HER_NombreCompleto)
                            .AsQueryable();

                        var correoUsuariosCCP = recepcionesActualQuery
                           .Where(x => x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN2)
                           .Select(y => y.HER_Para.HER_UserName)
                           .AsQueryable();

                        documento.Origen_ListadoCcp = nombreUsuariosCCP.ToList();
                        documento.Origen_ListadoCcpCorreo = correoUsuariosCCP.ToList();

                        //Usuario Para Actual
                        documento.Origen_UsuarioPara_NombreCompleto = recepcionActual.HER_Para.HER_NombreCompleto.ToUpper();
                        documento.Origen_UsuarioPara_AreaNombre = recepcionActual.HER_Para.HER_Area.HER_Nombre.ToUpper();
                        documento.Origen_UsuarioPara_PuestoNombre = recepcionActual.HER_Para.HER_Puesto.ToUpper();
                        documento.Origen_UsuarioPara_Tipo = recepcionActual.HER_TipoPara;
                        //--

                        //[Actual]
                        //Usuario responde (De)
                        documento.Actual_UsuarioDe_Correo = recepcionActual.HER_Para.HER_Correo;
                        documento.Actual_UsuarioDe_NombreCompleto = recepcionActual.HER_Para.HER_NombreCompleto;
                        documento.Actual_UsuarioDe_Direccion = recepcionActual.HER_Para.HER_Direccion;
                        documento.Actual_UsuarioDe_Telefono = recepcionActual.HER_Para.HER_Telefono;
                        documento.Actual_UsuarioDe_AreaPadreNombre = (recepcionActual.HER_Para.HER_Area.HER_Area_PadreId != null) ? recepcionActual.HER_Para.HER_Area.HER_Area_Padre.HER_Nombre : string.Empty;
                        documento.Actual_UsuarioDe_AreaNombre = recepcionActual.HER_Para.HER_Area.HER_Nombre;
                        documento.Actual_UsuarioDe_AreaId = recepcionActual.HER_Para.HER_Area.HER_AreaId;
                        documento.Actual_UsuarioDe_PuestoNombre = recepcionActual.HER_Para.HER_Puesto;
                        //---

                        //Tipo de usuario que lee (Para o CCP)
                        documento.Actual_UsuarioLee_Tipo = recepcionActual.HER_TipoPara;

                        //[Estado de la respuesta]
                        documento.TieneRespuesta = recepcionActual.HER_TieneRespuesta;
                    }

                    //Usuario a responder (Para)
                    documento.Actual_UsuarioPara_NombreUsuario = envioActual.HER_De.HER_UserName;
                    documento.Actual_UsuarioPara_Correo = envioActual.HER_De.HER_Correo;
                    documento.Actual_UsuarioPara_NombreCompleto = envioActual.HER_De.HER_NombreCompleto;
                    documento.Actual_UsuarioPara_AreaNombre = envioActual.HER_De.HER_Area.HER_Nombre;
                    documento.Actual_UsuarioPara_UsuarioId = envioActual.HER_De.HER_InfoUsuarioId;
                    documento.Actual_UsuarioPara_PuestoNombre = envioActual.HER_De.HER_Puesto;
                    //---

                    //[Envio origen]
                    documento.Origen_EnvioId = envioActual.HER_EnvioPadre.HER_EnvioId;
                    documento.Origen_FechaEnvio = envioActual.HER_EnvioPadre.HER_FechaEnvio.ToString("dd/MM/yyyy HH:mm 'hrs.'", _cultureEs);
                    documento.Origen_TipoEnvioId = envioActual.HER_EnvioPadre.HER_TipoEnvioId;

                    //[Envio actual]
                    documento.Actual_EnvioId = envioActual.HER_EnvioId;
                    documento.Actual_FechaEnvio = envioActual.HER_FechaEnvio.ToString("dd/MM/yyyy HH:mm 'hrs.'", _cultureEs);
                    documento.Actual_TipoEnvioId = envioActual.HER_TipoEnvioId;

                    //Respuesta 
                    documento.Actual_AsuntoRespuesta = string.Format("{0} {1}", "RE:", envioActual.HER_Documento.HER_Asunto);

                    //Turnado
                    documento.Actual_EsTurnado = false;
                    documento.Actual_Indicaciones = envioActual.HER_Indicaciones;
                }
            }

            return documento;
        }
        public async Task<int> GuardarDocumentoRespuestaAsync(NuevoDocumentoRespuestaViewModel nuevoDocumentoRespuesta)
        {
            int documentoRespuestaId = 0;

            //NUEVO Documento Respuesta
            var documentoRespuesta = new HER_Documento
            {
                HER_Folio = nuevoDocumentoRespuesta.Folio,
                HER_Asunto = nuevoDocumentoRespuesta.Asunto,
                HER_NoInterno = nuevoDocumentoRespuesta.NoInterno,
                HER_Cuerpo = nuevoDocumentoRespuesta.Cuerpo,
                HER_FechaRegistro = nuevoDocumentoRespuesta.FechaCreacion,
                HER_TipoId = nuevoDocumentoRespuesta.TipoId,
                HER_DocumentoTitularId = nuevoDocumentoRespuesta.TitularId,
                HER_DocumentoCreadorId = nuevoDocumentoRespuesta.CreadorId,
                //--
                HER_Firma = string.Empty
            };
            _context.HER_Documento.Add(documentoRespuesta);
            await _context.SaveChangesAsync();

            documentoRespuestaId = documentoRespuesta.HER_DocumentoId;

            return documentoRespuestaId;
        }
        public async Task<int> CrearEnvioRespuestaAsync(EnvioRespuestaViewModel envioRespuestaViewModel)
        {
            int envioRespuestaId = 0;

            var ordenQuery = _context.HER_Envio
                .Where(x => x.HER_Documento.HER_Folio == envioRespuestaViewModel.Folio)
                .AsQueryable();

            var orden = await ordenQuery.MaxAsync(x => x.HER_Orden);

            //Envio Actual
            var envioActualQuery = _context.HER_Envio
                .Where(x => x.HER_EnvioId == envioRespuestaViewModel.EnvioActualId)
                .Select(x => new { x.HER_TipoEnvioId, x.HER_UsuarioOrigenId, x.HER_EsReenvio, x.HER_GrupoEnvio, x.HER_TramiteId })
                .AsQueryable();

            var envioActual = await envioActualQuery.FirstOrDefaultAsync();

            //Respuesta Envio (DE)
            var envio = new HER_Envio()
            {
                //--
                HER_DeDireccion = envioRespuestaViewModel.UsuarioDeDireccion,
                HER_DeTelefono = envioRespuestaViewModel.UsuarioDeTelefono,
                //--
                HER_UsuarioOrigenId = (envioActual.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN3) ? envioActual.HER_UsuarioOrigenId : envioRespuestaViewModel.UsuarioDeId,
                HER_Orden = (orden + 1),
                HER_TotalPara = envioRespuestaViewModel.TotalPara,
                HER_TotalCCP = envioRespuestaViewModel.TotalCCP,
                //--
                HER_TotalParaRespuestas = 0,
                HER_TotalCCPRespuestas = 0,
                //--
                HER_Indicaciones = null,
                HER_RequiereRespuesta = false,
                HER_FechaEnvio = DateTime.Now,
                HER_FechaPropuesta = DateTime.Now,
                //--
                HER_EsReenvio = false,
                HER_GrupoEnvio = envioActual.HER_GrupoEnvio,
                //--
                HER_DocumentoId = envioRespuestaViewModel.DocumentoRespuestaId,
                HER_DeId = envioRespuestaViewModel.UsuarioDeId,
                HER_UsuarioEnviaId = envioRespuestaViewModel.UsuarioEnviaId,
                HER_TipoEnvioId = (envioRespuestaViewModel.TipoRespuestaId == ConstTipoRespuesta.TipoRespuestaN2) ? ConstTipoEnvio.TipoEnvioN3 : ConstTipoEnvio.TipoEnvioN4,
                HER_EnvioPadreId = envioRespuestaViewModel.EnvioId,
                HER_EstadoEnvioId = ConstEstadoEnvio.EstadoEnvioN8, //Respuesta
                HER_VisibilidadId = envioRespuestaViewModel.VisibilidadId,
                HER_ImportanciaId = ConstImportancia.ImportanciaN2, //Normal
                HER_AnexoId = envioRespuestaViewModel.AnexoId,
                HER_CarpetaId = null,
                HER_TramiteId = envioActual.HER_TramiteId
            };
            _context.HER_Envio.Add(envio);
            var result = await _context.SaveChangesAsync();

            envioRespuestaId = (result > 0) ? envio.HER_EnvioId : 0;

            return envioRespuestaId;
        }
        public async Task<bool> CrearRecepcionRespuestaAsync(List<RecepcionRespuestaViewModel> listadoRecepcionViewModel)
        {
            //Respuesta Recepción (PARA)
            var listadoRecepcion = new List<HER_Recepcion>();
            var listadoCategorias = new List<HER_RecepcionCategoria>();
            var fechaRecepcion = DateTime.Now;
            //--
            foreach (var recepcion in listadoRecepcionViewModel)
            {
                listadoRecepcion.Add(new HER_Recepcion()
                {
                    HER_EnvioId = recepcion.RespuestaEnvioId,
                    HER_ParaId = recepcion.ParaId,
                    HER_TipoPara = recepcion.TipoPara,
                    HER_TieneRespuesta = false,
                    HER_EstaLeido = false,
                    HER_FechaRecepcion = fechaRecepcion,
                    //HER_FechaCompromiso = fechaRecepcion,
                    HER_CarpetaId = null,
                    HER_EstadoEnvioId = ConstEstadoEnvio.EstadoEnvioN8
                });
            }
            _context.HER_Recepcion.AddRange(listadoRecepcion);
            //--
            //Agrega la categoria por defecto a todas las recepciones
            foreach (var recepcion in listadoRecepcion)
            {
                //Categoria
                listadoCategorias.Add(new HER_RecepcionCategoria()
                {
                    HER_CategoriaId = ConstCategoria.CategoriaN1,
                    HER_RecepcionId = recepcion.HER_RecepcionId
                });
            }

            _context.HER_RecepcionCategoria.AddRange(listadoCategorias);
            var result = await _context.SaveChangesAsync();

            return (result > 0) ? true : false;
        }
        public async Task<bool> ActualizarEstadoEnvioAsync(int envioId, int usuarioId)
        {
            var totalRespuestas = 0;
            var estado = 0;
            var resultado = false;

            //Envio 
            var envioQuery = _context.HER_Envio
                .Where(x => x.HER_EnvioId == envioId)
                .AsQueryable();

            var envio = await envioQuery.FirstOrDefaultAsync();

            //Recepción
            var recepcionQuery = _context.HER_Recepcion
                .Where(x => x.HER_EnvioId == envioId
                         && x.HER_ParaId == usuarioId)
                .AsQueryable();

            var recepcion = await recepcionQuery.FirstOrDefaultAsync();

            if (envio.HER_EstadoEnvioId != ConstEstadoEnvio.EstadoEnvioN7)
            {
                if (recepcion.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1)
                {
                    totalRespuestas = (envio.HER_TotalParaRespuestas + 1);
                    //---
                    if (envio.HER_TotalPara == totalRespuestas)
                    {
                        estado = ConstEstadoEnvio.EstadoEnvioN6;
                    }
                    else if (envio.HER_TotalPara > totalRespuestas)
                    {
                        estado = ConstEstadoEnvio.EstadoEnvioN5;
                    }

                    //Actualización
                    envio.HER_TotalParaRespuestas = totalRespuestas;
                    //Actualización del estado
                    envio.HER_EstadoEnvioId = estado;
                }
                else if (recepcion.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN2)
                {
                    totalRespuestas = (envio.HER_TotalCCPRespuestas + 1);
                    //Actualización
                    envio.HER_TotalCCPRespuestas = totalRespuestas;
                }

                _context.HER_Envio.Update(envio).State = EntityState.Modified;
                var result = await _context.SaveChangesAsync();

                resultado = (result > 0) ? true : false;
            }

            return resultado;
        }
        public async Task<bool> ActualizarEstadoRecepcionAsync(int envioId, int usuarioId)
        {
            var fechaActual = DateTime.Now;
            var estado = 0;

            var recepcionQuery = _context.HER_Recepcion
                .Where(x => x.HER_EnvioId == envioId
                         && x.HER_ParaId == usuarioId)
                .Include(x => x.HER_Compromiso)
                .AsQueryable();

            var recepcion = await recepcionQuery.FirstOrDefaultAsync();

            //Actualización 
            recepcion.HER_TieneRespuesta = true;

            if (recepcion.HER_EstadoEnvioId != ConstEstadoEnvio.EstadoEnvioN7)
            {
                if (fechaActual >= recepcion.HER_FechaRecepcion && fechaActual <= recepcion.HER_Compromiso.Where(x => x.HER_Estado == ConstCompromiso.EstadoN1).Select(x => x.HER_Fecha).First())
                {
                    estado = ConstEstadoEnvio.EstadoEnvioN2;
                }
                else if (fechaActual > recepcion.HER_Compromiso.Where(x => x.HER_Estado == ConstCompromiso.EstadoN1).Select(x => x.HER_Fecha).First())
                {
                    estado = ConstEstadoEnvio.EstadoEnvioN3;
                }

                //Actualización del estado
                recepcion.HER_EstadoEnvioId = estado;
            }

            _context.HER_Recepcion.Update(recepcion).State = EntityState.Modified;
            var result = await _context.SaveChangesAsync();

            return (result > 0) ? true : false;
        }
        //[Seguimiento]
        public async Task<EncabezadoSeguimientoViewModel> ObtenerEncabezadoSeguimientoAsync(int envioId, int tipo, string usuario)
        {
            //Busqueda
            var encabezado = new EncabezadoSeguimientoViewModel();
            bool lectorEsRemitente = false;
            bool lectorEsDestinatario = false;

            //[Envio]
            var envioQuery = _context.HER_Envio
                .Where(x => x.HER_EnvioId == envioId)
                .Include(x => x.HER_De)
                .Include(x => x.HER_Documento)
                .AsNoTracking()
                .AsQueryable();

            //[Recepciones]
            var recepcionesQuery = _context.HER_Recepcion
                .Where(x => x.HER_EnvioId == envioId)
                .Include(x => x.HER_Para)
                .Include(x => x.HER_Compromiso)
                .AsNoTracking()
                .AsQueryable();

            var nombreUsuariosPara = recepcionesQuery
                   .Where(x => x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1)
                   .Select(y => y.HER_Para.HER_NombreCompleto)
                   .AsQueryable();

            var nombreUsuariosCCP = recepcionesQuery
                .Where(x => x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN2)
                .Select(y => y.HER_Para.HER_NombreCompleto)
                .AsQueryable();

            var envio = await envioQuery.FirstOrDefaultAsync();

            if (envio != null)
            {
                //--
                encabezado.Usuario = usuario;
                encabezado.Folio = envio.HER_Documento.HER_Folio;
                encabezado.Asunto = envio.HER_Documento.HER_Asunto;
                encabezado.NoInterno = envio.HER_Documento.HER_NoInterno;
                encabezado.Cuerpo = envio.HER_Documento.HER_Cuerpo;
                //--
                encabezado.FechaEnvio = envio.HER_FechaEnvio.ToString("dd/MM/yyyy HH:mm 'hrs.'", _cultureEs);
                encabezado.FechaPropuesta = (envio.HER_RequiereRespuesta) ? envio.HER_FechaPropuesta.ToString("dd/MM/yyyy", _cultureEs) : string.Empty;
                encabezado.DocumentoId = envio.HER_DocumentoId;

                encabezado.De = envio.HER_De.HER_NombreCompleto;
                encabezado.Para = String.Join(", ", nombreUsuariosPara.ToArray());
                encabezado.CCP = String.Join(", ", nombreUsuariosCCP.ToArray());

                encabezado.TieneAdjuntos = (envio.HER_AnexoId != null) ? true : false;
                encabezado.TipoEnvioId = envio.HER_TipoEnvioId;
                encabezado.Indicaciones = ((tipo == ConstTipoEnvio.TipoEnvioN4 && envio.HER_EsReenvio && !string.IsNullOrEmpty(envio.HER_Indicaciones)) || (tipo == ConstTipoEnvio.TipoEnvioN1 && envio.HER_EsReenvio && !string.IsNullOrEmpty(envio.HER_Indicaciones)) || tipo == ConstTipoEnvio.TipoEnvioN2) ? envio.HER_Indicaciones : string.Empty;
                encabezado.EnvioId = envio.HER_EnvioId;

                //De
                lectorEsRemitente = (envio.HER_De.HER_UserName == usuario);
                //--
                if (lectorEsRemitente)
                {
                    encabezado.Visualizacion_Tipo = ConstVisualizacionEnvio.Envio;
                    encabezado.RecepcionId = 0;
                    encabezado.FechaCompromiso = string.Empty;
                }
                else
                {
                    //Para
                    lectorEsDestinatario = await recepcionesQuery
                        .Where(x => x.HER_Para.HER_UserName == usuario)
                        .AnyAsync();
                    //--
                    if (lectorEsDestinatario)
                    {
                        var recepcionActual = await recepcionesQuery
                            .Where(x => x.HER_Para.HER_UserName == usuario)
                            .FirstOrDefaultAsync();

                        HER_Compromiso compromisoActual = recepcionActual.HER_Compromiso
                            .Where(x => x.HER_Estado == ConstCompromiso.EstadoN1 && x.HER_Tipo == ConstCompromiso.TipoN2)
                            .FirstOrDefault();

                        encabezado.Visualizacion_Tipo = ConstVisualizacionEnvio.Recepcion;
                        encabezado.RecepcionId = recepcionActual.HER_RecepcionId;
                        encabezado.FechaCompromiso = (compromisoActual != null) ? compromisoActual.HER_Fecha.ToString("dd/MM/yyyy", _cultureEs) : string.Empty;
                    }
                }
            }

            return encabezado;
        }
        public IQueryable<HER_Envio> ObtenerSeguimientoEnvio(string folio)
        {
            var enviosQuery = _context.HER_Envio
                .Where(x => x.HER_Documento.HER_Folio == folio && x.HER_EsOculto == false)
                //--
                .Include(x => x.HER_De)
                .Include(x => x.HER_UsuarioOrigen)
                .Include(x => x.HER_EnvioPadre)
                    .ThenInclude(x => x.HER_De)
                .Include(x => x.HER_Recepciones)
                    .ThenInclude(x => x.HER_Para)
                //--
                .AsNoTracking()
                .AsQueryable();

            return enviosQuery;
        }
        //[Bandejas]
        public async Task<EstadoBandejasViewComponentModel> ObtenerEstadoBandejasPrincipalesAsync(string userName)
        {
            var totales = new EstadoBandejasViewComponentModel();

            //Recibidos
            var documentosRecibidosQuery = _context.HER_Recepcion
                .Where(a => a.HER_Para.HER_UserName == userName
                         && a.HER_Para.HER_Activo == true
                         && a.HER_Envio.HER_EsOculto == false
                         && a.HER_EstaLeido == false)
                .AsQueryable();
            //--
            totales.Recibidos = await documentosRecibidosQuery.CountAsync();

            //Borradores
            var documentosEnBorradorQuery = _context.HER_DocumentoBase
                        .Where(x => x.HER_EstadoId == ConstEstadoDocumento.EstadoDocumentoN1
                                && x.HER_DocumentoBaseTitular.HER_UserName == userName
                                && x.HER_DocumentoBaseTitular.HER_Activo == true)
                        .Select(x => x.HER_Folio)
                        .AsNoTracking()
                        .AsQueryable();
            //--
            totales.Borradores = await documentosEnBorradorQuery.CountAsync();

            //Revisión
            //DESTINATARIO (Los que recibe)
            var documentosRecibidosRevisionQuery = _context.HER_DocumentoBase
                .Where(x => x.HER_EstadoId == ConstEstadoDocumento.EstadoDocumentoN2
                         && x.HER_Revision.HER_RevisionDestinatario.HER_UserName == userName
                         && x.HER_Revision.HER_RevisionDestinatario.HER_Activo == true
                         && x.HER_Revision.HER_EstadoDestinatario != ConstEstadoRevision.EstadoDestinatarioN2)
                .Select(x => x.HER_Folio)
                .AsNoTracking()
                .AsQueryable();
            //--
            totales.Revision = await documentosRecibidosRevisionQuery.CountAsync();

            //Historico
            totales.Historico = 0;

            return totales;
        }
        //[Carpetas]
        public IQueryable<DocumentoEnCarpetaPersonalViewModel> ListadoDocumentosRecibidosEnCarpetasPersonales(string username, int carpetaId, string busqueda, int? categoria, string fechaini, string fechafin)
        {
            IQueryable<DocumentoEnCarpetaPersonalViewModel> recibidosQuery;
            //--
            DateTime fechaInicioTemp;
            DateTime fechaFinTemp;

            if (string.IsNullOrEmpty(busqueda) && categoria == null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                //Busqueda 
                recibidosQuery =
                        _context.HER_Recepcion
                        .Where(x => x.HER_Para.HER_UserName == username
                                && x.HER_Para.HER_Activo == true
                                && x.HER_Envio.HER_EsOculto == false
                                && x.HER_CarpetaId == carpetaId
                                && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp))
                        .AsNoTracking()
                        .Select(x => new DocumentoEnCarpetaPersonalViewModel
                        {
                            Bandeja_Origen = ConstBandejas.ConstTipoT1,
                            EnvioId = x.HER_EnvioId,
                            Fecha = x.HER_FechaRecepcion,
                            Leido = x.HER_EstaLeido,
                            Estado = x.HER_EstadoEnvio.HER_Nombre,
                            TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                            Folio = x.HER_Envio.HER_Documento.HER_Folio,
                            NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                            Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                            Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                            Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                            Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                            Destinatario = string.Empty,
                            Destinatarios_Extra = 0,
                            //--
                            TipoPara = x.HER_TipoPara
                        })
                        .OrderByDescending(x => x.Fecha)
                        .AsQueryable();
            }
            else if (!string.IsNullOrEmpty(busqueda) && categoria == null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery =
                        _context.HER_Recepcion
                        .Where(x => x.HER_Para.HER_UserName == username
                                 && x.HER_Para.HER_Activo == true
                                 && x.HER_Envio.HER_EsOculto == false
                                 && x.HER_CarpetaId == carpetaId
                                 && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                                 || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                                 || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%"))
                         )
                        .AsNoTracking()
                        .Select(x => new DocumentoEnCarpetaPersonalViewModel
                        {
                            Bandeja_Origen = ConstBandejas.ConstTipoT1,
                            EnvioId = x.HER_EnvioId,
                            Fecha = x.HER_FechaRecepcion,
                            Leido = x.HER_EstaLeido,
                            Estado = x.HER_EstadoEnvio.HER_Nombre,
                            TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                            Folio = x.HER_Envio.HER_Documento.HER_Folio,
                            Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                            NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                            Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                            Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                            Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                            Destinatario = string.Empty,
                            Destinatarios_Extra = 0,
                            //--
                            TipoPara = x.HER_TipoPara
                        })
                        .OrderByDescending(x => x.Fecha)
                        .AsQueryable();
            }
            else if (string.IsNullOrEmpty(busqueda) && categoria != null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                //Busqueda 
                recibidosQuery =
                        _context.HER_Recepcion
                        .Where(x => x.HER_Para.HER_UserName == username
                                 && x.HER_Para.HER_Activo == true
                                 && x.HER_Envio.HER_EsOculto == false
                                 && x.HER_CarpetaId == carpetaId
                                 && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria))
                        .AsNoTracking()
                        .Select(x => new DocumentoEnCarpetaPersonalViewModel
                        {
                            Bandeja_Origen = ConstBandejas.ConstTipoT1,
                            EnvioId = x.HER_EnvioId,
                            Fecha = x.HER_FechaRecepcion,
                            Leido = x.HER_EstaLeido,
                            Estado = x.HER_EstadoEnvio.HER_Nombre,
                            TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                            Folio = x.HER_Envio.HER_Documento.HER_Folio,
                            Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                            NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                            Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                            Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                            Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                            Destinatario = string.Empty,
                            Destinatarios_Extra = 0,
                            //--
                            TipoPara = x.HER_TipoPara
                        })
                        .OrderByDescending(x => x.Fecha)
                        .AsQueryable();
            }
            else if (!string.IsNullOrEmpty(busqueda) && categoria != null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery =
                        _context.HER_Recepcion
                        .Where(x => x.HER_Para.HER_UserName == username
                                 && x.HER_Para.HER_Activo == true
                                 && x.HER_Envio.HER_EsOculto == false
                                 && x.HER_CarpetaId == carpetaId
                                 && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                                 || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                                 || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%"))
                                 && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                         )
                        .AsNoTracking()
                        .Select(x => new DocumentoEnCarpetaPersonalViewModel
                        {
                            Bandeja_Origen = ConstBandejas.ConstTipoT1,
                            EnvioId = x.HER_EnvioId,
                            Fecha = x.HER_FechaRecepcion,
                            Leido = x.HER_EstaLeido,
                            Estado = x.HER_EstadoEnvio.HER_Nombre,
                            TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                            Folio = x.HER_Envio.HER_Documento.HER_Folio,
                            Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                            NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                            Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                            Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                            Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                            Destinatario = string.Empty,
                            Destinatarios_Extra = 0,
                            //--
                            TipoPara = x.HER_TipoPara
                        })
                        .OrderByDescending(x => x.Fecha)
                        .AsQueryable();
            }
            else if (!string.IsNullOrEmpty(busqueda) && categoria == null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery =
                        _context.HER_Recepcion
                        .Where(x => x.HER_Para.HER_UserName == username
                                 && x.HER_Para.HER_Activo == true
                                 && x.HER_Envio.HER_EsOculto == false
                                 && x.HER_CarpetaId == carpetaId
                                 && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                                 || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                                 || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%"))
                                 && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                         )
                        .AsNoTracking()
                        .Select(x => new DocumentoEnCarpetaPersonalViewModel
                        {
                            Bandeja_Origen = ConstBandejas.ConstTipoT1,
                            EnvioId = x.HER_EnvioId,
                            Fecha = x.HER_FechaRecepcion,
                            Leido = x.HER_EstaLeido,
                            Estado = x.HER_EstadoEnvio.HER_Nombre,
                            TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                            Folio = x.HER_Envio.HER_Documento.HER_Folio,
                            Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                            NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                            Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                            Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                            Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                            Destinatario = string.Empty,
                            Destinatarios_Extra = 0,
                            //--
                            TipoPara = x.HER_TipoPara
                        })
                        .OrderByDescending(x => x.Fecha)
                        .AsQueryable();
            }
            else if (string.IsNullOrEmpty(busqueda) && categoria != null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                //Busqueda 
                recibidosQuery =
                        _context.HER_Recepcion
                        .Where(x => x.HER_Para.HER_UserName == username
                                 && x.HER_Para.HER_Activo == true
                                 && x.HER_Envio.HER_EsOculto == false
                                 && x.HER_CarpetaId == carpetaId
                                 && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                                 && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp))
                        .AsNoTracking()
                        .Select(x => new DocumentoEnCarpetaPersonalViewModel
                        {
                            Bandeja_Origen = ConstBandejas.ConstTipoT1,
                            EnvioId = x.HER_EnvioId,
                            Fecha = x.HER_FechaRecepcion,
                            Leido = x.HER_EstaLeido,
                            Estado = x.HER_EstadoEnvio.HER_Nombre,
                            TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                            Folio = x.HER_Envio.HER_Documento.HER_Folio,
                            Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                            NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                            Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                            Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                            Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                            Destinatario = string.Empty,
                            Destinatarios_Extra = 0,
                            //--
                            TipoPara = x.HER_TipoPara
                        })
                        .OrderByDescending(x => x.Fecha)
                        .AsQueryable();
            }
            else if (!string.IsNullOrEmpty(busqueda) && categoria != null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);
                busqueda = busqueda.Replace('+', ' ');

                //Busqueda 
                recibidosQuery =
                        _context.HER_Recepcion
                        .Where(x => x.HER_Para.HER_UserName == username
                                 && x.HER_Para.HER_Activo == true
                                 && x.HER_Envio.HER_EsOculto == false
                                 && x.HER_CarpetaId == carpetaId
                                 && (EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Folio, "%" + busqueda + "%")
                                 || EF.Functions.Like(x.HER_Envio.HER_De.HER_NombreCompleto, "%" + busqueda + "%")
                                 || EF.Functions.Like(x.HER_Envio.HER_Documento.HER_Asunto, "%" + busqueda + "%"))
                                 && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                                 && (x.HER_FechaRecepcion >= fechaInicioTemp && x.HER_FechaRecepcion <= fechaFinTemp)
                         )
                        .AsNoTracking()
                        .Select(x => new DocumentoEnCarpetaPersonalViewModel
                        {
                            Bandeja_Origen = ConstBandejas.ConstTipoT1,
                            EnvioId = x.HER_EnvioId,
                            Fecha = x.HER_FechaRecepcion,
                            Leido = x.HER_EstaLeido,
                            Estado = x.HER_EstadoEnvio.HER_Nombre,
                            TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                            Folio = x.HER_Envio.HER_Documento.HER_Folio,
                            Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                            NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                            Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                            Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                            Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                            Destinatario = string.Empty,
                            Destinatarios_Extra = 0,
                            //--
                            TipoPara = x.HER_TipoPara
                        })
                        .OrderByDescending(x => x.Fecha)
                        .AsQueryable();
            }
            else
            {
                //Busqueda 
                recibidosQuery =
                        _context.HER_Recepcion
                        .Where(x => x.HER_Para.HER_UserName == username
                                 && x.HER_Para.HER_Activo == true
                                 && x.HER_Envio.HER_EsOculto == false
                                 && x.HER_CarpetaId == carpetaId)
                        .AsNoTracking()
                        .Select(x => new DocumentoEnCarpetaPersonalViewModel
                        {
                            Bandeja_Origen = ConstBandejas.ConstTipoT1,
                            EnvioId = x.HER_EnvioId,
                            Fecha = x.HER_FechaRecepcion,
                            Leido = x.HER_EstaLeido,
                            Estado = x.HER_EstadoEnvio.HER_Nombre,
                            TipoEnvio = x.HER_Envio.HER_TipoEnvioId,
                            Folio = x.HER_Envio.HER_Documento.HER_Folio,
                            Asunto = x.HER_Envio.HER_Documento.HER_Asunto,
                            NoInterno = x.HER_Envio.HER_Documento.HER_NoInterno,
                            Adjuntos = (x.HER_Envio.HER_AnexoId != null) ? true : false,
                            Remitente = x.HER_Envio.HER_De.HER_NombreCompleto,
                            Importancia = (x.HER_Envio.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                            Destinatario = string.Empty,
                            Destinatarios_Extra = 0,
                            //--
                            TipoPara = x.HER_TipoPara
                        })
                        .OrderByDescending(x => x.Fecha)
                        .AsQueryable();
            }

            return recibidosQuery.OrderByDescending(x => x.Fecha);
        }
        public IQueryable<DocumentoEnCarpetaPersonalViewModel> ListadoDocumentosEnviadosEnCarpetasPersonales(string username, int carpetaId, string busqueda, int? categoria, string fechaini, string fechafin)
        {
            IQueryable<DocumentoEnCarpetaPersonalViewModel> enviadosQuery;
            //--
            DateTime fechaInicioTemp;
            DateTime fechaFinTemp;

            if (string.IsNullOrEmpty(busqueda) && categoria == null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                //Enviados
                enviadosQuery =
                        _context.HER_Envio
                        .Where(a => a.HER_De.HER_UserName == username
                                 && a.HER_De.HER_Activo == true
                                 && a.HER_EsOculto == false
                                 && a.HER_CarpetaId == carpetaId
                                 && (a.HER_FechaEnvio >= fechaInicioTemp && a.HER_FechaEnvio <= fechaFinTemp))
                        .AsNoTracking()
                        .Select(x => new DocumentoEnCarpetaPersonalViewModel
                        {
                            Bandeja_Origen = ConstBandejas.ConstTipoT2,
                            EnvioId = x.HER_EnvioId,
                            Fecha = x.HER_FechaEnvio,
                            TipoEnvio = x.HER_TipoEnvioId,
                            Estado = x.HER_EstadoEnvio.HER_Nombre,
                            Folio = x.HER_Documento.HER_Folio,
                            Asunto = x.HER_Documento.HER_Asunto,
                            NoInterno = x.HER_Documento.HER_NoInterno,
                            Adjuntos = (x.HER_AnexoId != null) ? true : false,
                            Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                            Destinatario = x.HER_Recepciones.First().HER_Para.HER_NombreCompleto,
                            Destinatarios_Extra = (x.HER_Recepciones.Count() - 1),
                            Leido = true,
                            Remitente = string.Empty,
                            //---
                            TipoPara = 0
                        })
                        .OrderByDescending(x => x.Fecha)
                        .AsQueryable();
            }
            else if (!string.IsNullOrEmpty(busqueda) && categoria == null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                busqueda = busqueda.Replace('+', ' ');

                //Enviados
                enviadosQuery =
                        _context.HER_Envio
                        .Where(a => a.HER_De.HER_UserName == username
                                 && a.HER_De.HER_Activo == true
                                 && a.HER_EsOculto == false
                                 && a.HER_CarpetaId == carpetaId
                                 && (EF.Functions.Like(a.HER_Documento.HER_Folio, "%" + busqueda + "%")
                                 || EF.Functions.Like(a.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                                 || EF.Functions.Like(a.HER_Recepciones.First().HER_Para.HER_NombreCompleto, "%" + busqueda + "%"))
                         )
                        .AsNoTracking()
                        .Select(x => new DocumentoEnCarpetaPersonalViewModel
                        {
                            Bandeja_Origen = ConstBandejas.ConstTipoT2,
                            EnvioId = x.HER_EnvioId,
                            Fecha = x.HER_FechaEnvio,
                            TipoEnvio = x.HER_TipoEnvioId,
                            Estado = x.HER_EstadoEnvio.HER_Nombre,
                            Folio = x.HER_Documento.HER_Folio,
                            Asunto = x.HER_Documento.HER_Asunto,
                            NoInterno = x.HER_Documento.HER_NoInterno,
                            Adjuntos = (x.HER_AnexoId != null) ? true : false,
                            Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                            Destinatario = x.HER_Recepciones.First().HER_Para.HER_NombreCompleto,
                            Destinatarios_Extra = (x.HER_Recepciones.Count() - 1),
                            Leido = true,
                            Remitente = string.Empty,
                            //---
                            TipoPara = 0
                        })
                        .OrderByDescending(x => x.Fecha)
                        .AsQueryable();
            }
            else if (string.IsNullOrEmpty(busqueda) && categoria != null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                //Enviados
                enviadosQuery = ((
                            _context.HER_Envio
                            .Where(a => a.HER_De.HER_UserName == username
                                     && a.HER_De.HER_Activo == true
                                     && a.HER_EsOculto == false
                                     && a.HER_CarpetaId == carpetaId
                                     && a.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1
                                     && a.HER_Documento.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria))
                            .AsNoTracking()
                            .Select(x => new DocumentoEnCarpetaPersonalViewModel
                            {
                                Bandeja_Origen = ConstBandejas.ConstTipoT2,
                                EnvioId = x.HER_EnvioId,
                                Fecha = x.HER_FechaEnvio,
                                TipoEnvio = x.HER_TipoEnvioId,
                                Estado = x.HER_EstadoEnvio.HER_Nombre,
                                Folio = x.HER_Documento.HER_Folio,
                                Asunto = x.HER_Documento.HER_Asunto,
                                NoInterno = x.HER_Documento.HER_NoInterno,
                                Adjuntos = (x.HER_AnexoId != null) ? true : false,
                                Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                                Destinatario = x.HER_Recepciones.First().HER_Para.HER_NombreCompleto,
                                Destinatarios_Extra = (x.HER_Recepciones.Count() - 1),
                                Leido = true,
                                Remitente = string.Empty,
                                //---
                                TipoPara = 0
                            })
                            .OrderByDescending(x => x.Fecha)
                            .AsQueryable()
                    ).Union(
                            _context.HER_Envio
                            .Where(a => a.HER_De.HER_UserName == username
                                     && a.HER_De.HER_Activo == true
                                     && a.HER_EsOculto == false
                                     && a.HER_CarpetaId == carpetaId
                                     && a.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2
                                     && a.HER_EnvioPadre.HER_Recepciones.Any(x => x.HER_Para.HER_UserName == username && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)))
                            .AsNoTracking()
                            .Select(x => new DocumentoEnCarpetaPersonalViewModel
                            {
                                Bandeja_Origen = ConstBandejas.ConstTipoT2,
                                EnvioId = x.HER_EnvioId,
                                Fecha = x.HER_FechaEnvio,
                                TipoEnvio = x.HER_TipoEnvioId,
                                Estado = x.HER_EstadoEnvio.HER_Nombre,
                                Folio = x.HER_Documento.HER_Folio,
                                Asunto = x.HER_Documento.HER_Asunto,
                                NoInterno = x.HER_Documento.HER_NoInterno,
                                Adjuntos = (x.HER_AnexoId != null) ? true : false,
                                Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                                Destinatario = x.HER_Recepciones.First().HER_Para.HER_NombreCompleto,
                                Destinatarios_Extra = (x.HER_Recepciones.Count() - 1),
                                Leido = true,
                                Remitente = string.Empty
                            })
                            .OrderByDescending(x => x.Fecha)
                            .AsQueryable()
                    )
                  );
            }
            else if (!string.IsNullOrEmpty(busqueda) && categoria != null && (string.IsNullOrEmpty(fechaini) && string.IsNullOrEmpty(fechafin)))
            {
                busqueda = busqueda.Replace('+', ' ');

                //Enviados
                enviadosQuery = ((
                        _context.HER_Envio
                        .Where(a => a.HER_De.HER_UserName == username
                                 && a.HER_De.HER_Activo == true
                                 && a.HER_EsOculto == false
                                 && a.HER_CarpetaId == carpetaId
                                 && (EF.Functions.Like(a.HER_Documento.HER_Folio, "%" + busqueda + "%")
                                 || EF.Functions.Like(a.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                                 || EF.Functions.Like(a.HER_Recepciones.First().HER_Para.HER_NombreCompleto, "%" + busqueda + "%"))
                                 && a.HER_Documento.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                                 && a.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1)
                        .AsNoTracking()
                        .Select(x => new DocumentoEnCarpetaPersonalViewModel
                        {
                            Bandeja_Origen = ConstBandejas.ConstTipoT2,
                            EnvioId = x.HER_EnvioId,
                            Fecha = x.HER_FechaEnvio,
                            TipoEnvio = x.HER_TipoEnvioId,
                            Estado = x.HER_EstadoEnvio.HER_Nombre,
                            Folio = x.HER_Documento.HER_Folio,
                            Asunto = x.HER_Documento.HER_Asunto,
                            NoInterno = x.HER_Documento.HER_NoInterno,
                            Adjuntos = (x.HER_AnexoId != null) ? true : false,
                            Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                            Destinatario = x.HER_Recepciones.First().HER_Para.HER_NombreCompleto,
                            Destinatarios_Extra = (x.HER_Recepciones.Count() - 1),
                            Leido = true,
                            Remitente = string.Empty,
                            //---
                            TipoPara = 0
                        })
                        .OrderByDescending(x => x.Fecha)
                        .AsQueryable()
                    ).Union(
                        _context.HER_Envio
                        .Where(a => a.HER_De.HER_UserName == username
                                 && a.HER_De.HER_Activo == true
                                 && a.HER_EsOculto == false
                                 && a.HER_CarpetaId == carpetaId
                                 && (EF.Functions.Like(a.HER_Documento.HER_Folio, "%" + busqueda + "%")
                                    || EF.Functions.Like(a.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                                    || EF.Functions.Like(a.HER_Recepciones.First().HER_Para.HER_NombreCompleto, "%" + busqueda + "%"))
                                 && a.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2
                                 && a.HER_EnvioPadre.HER_Recepciones.Any(x => x.HER_Para.HER_UserName == username && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)))
                        .AsNoTracking()
                        .Select(x => new DocumentoEnCarpetaPersonalViewModel
                        {
                            Bandeja_Origen = ConstBandejas.ConstTipoT2,
                            EnvioId = x.HER_EnvioId,
                            Fecha = x.HER_FechaEnvio,
                            TipoEnvio = x.HER_TipoEnvioId,
                            Estado = x.HER_EstadoEnvio.HER_Nombre,
                            Folio = x.HER_Documento.HER_Folio,
                            Asunto = x.HER_Documento.HER_Asunto,
                            NoInterno = x.HER_Documento.HER_NoInterno,
                            Adjuntos = (x.HER_AnexoId != null) ? true : false,
                            Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                            Destinatario = x.HER_Recepciones.First().HER_Para.HER_NombreCompleto,
                            Destinatarios_Extra = (x.HER_Recepciones.Count() - 1),
                            Leido = true,
                            Remitente = string.Empty
                        })
                        .OrderByDescending(x => x.Fecha)
                        .AsQueryable()
                    )
                 );
            }
            else if (!string.IsNullOrEmpty(busqueda) && categoria == null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);
                busqueda = busqueda.Replace('+', ' ');

                enviadosQuery =
                        _context.HER_Envio
                        .Where(a => a.HER_De.HER_UserName == username
                                 && a.HER_De.HER_Activo == true
                                 && a.HER_EsOculto == false
                                 && a.HER_CarpetaId == carpetaId
                                 && (EF.Functions.Like(a.HER_Documento.HER_Folio, "%" + busqueda + "%")
                                    || EF.Functions.Like(a.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                                    || EF.Functions.Like(a.HER_Recepciones.First().HER_Para.HER_NombreCompleto, "%" + busqueda + "%"))
                                 && (a.HER_FechaEnvio >= fechaInicioTemp && a.HER_FechaEnvio <= fechaFinTemp))
                        .AsNoTracking()
                        .Select(x => new DocumentoEnCarpetaPersonalViewModel
                        {
                            Bandeja_Origen = ConstBandejas.ConstTipoT2,
                            EnvioId = x.HER_EnvioId,
                            Fecha = x.HER_FechaEnvio,
                            TipoEnvio = x.HER_TipoEnvioId,
                            Estado = x.HER_EstadoEnvio.HER_Nombre,
                            Folio = x.HER_Documento.HER_Folio,
                            Asunto = x.HER_Documento.HER_Asunto,
                            NoInterno = x.HER_Documento.HER_NoInterno,
                            Adjuntos = (x.HER_AnexoId != null) ? true : false,
                            Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                            Destinatario = x.HER_Recepciones.First().HER_Para.HER_NombreCompleto,
                            Destinatarios_Extra = (x.HER_Recepciones.Count() - 1),
                            Leido = true,
                            Remitente = string.Empty,
                            //---
                            TipoPara = 0
                        })
                        .OrderByDescending(x => x.Fecha)
                        .AsQueryable();
            }
            else if (string.IsNullOrEmpty(busqueda) && categoria != null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);

                enviadosQuery = ((_context.HER_Envio
                        .Where(a => a.HER_De.HER_UserName == username
                                    && a.HER_De.HER_Activo == true
                                    && a.HER_EsOculto == false
                                    && a.HER_CarpetaId == carpetaId
                                    && a.HER_Documento.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                                    && (a.HER_FechaEnvio >= fechaInicioTemp && a.HER_FechaEnvio <= fechaFinTemp)
                                    && a.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1)
                        .AsNoTracking()
                        .Select(x => new DocumentoEnCarpetaPersonalViewModel
                        {
                            Bandeja_Origen = ConstBandejas.ConstTipoT2,
                            EnvioId = x.HER_EnvioId,
                            Fecha = x.HER_FechaEnvio,
                            TipoEnvio = x.HER_TipoEnvioId,
                            Estado = x.HER_EstadoEnvio.HER_Nombre,
                            Folio = x.HER_Documento.HER_Folio,
                            Asunto = x.HER_Documento.HER_Asunto,
                            NoInterno = x.HER_Documento.HER_NoInterno,
                            Adjuntos = (x.HER_AnexoId != null) ? true : false,
                            Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                            Destinatario = x.HER_Recepciones.First().HER_Para.HER_NombreCompleto,
                            Destinatarios_Extra = (x.HER_Recepciones.Count() - 1),
                            Leido = true,
                            Remitente = string.Empty,
                            //---
                            TipoPara = 0
                        })
                        .OrderByDescending(x => x.Fecha)
                        .AsQueryable()
                   ).Union(
                        _context.HER_Envio
                        .Where(a => a.HER_De.HER_UserName == username
                                 && a.HER_De.HER_Activo == true
                                 && a.HER_EsOculto == false
                                 && a.HER_CarpetaId == carpetaId
                                 && a.HER_EnvioPadre.HER_Recepciones.Any(x => x.HER_Para.HER_UserName == username && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria))
                                 && (a.HER_FechaEnvio >= fechaInicioTemp && a.HER_FechaEnvio <= fechaFinTemp)
                                 && a.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                        .AsNoTracking()
                        .Select(x => new DocumentoEnCarpetaPersonalViewModel
                        {
                            Bandeja_Origen = ConstBandejas.ConstTipoT2,
                            EnvioId = x.HER_EnvioId,
                            Fecha = x.HER_FechaEnvio,
                            TipoEnvio = x.HER_TipoEnvioId,
                            Estado = x.HER_EstadoEnvio.HER_Nombre,
                            Folio = x.HER_Documento.HER_Folio,
                            Asunto = x.HER_Documento.HER_Asunto,
                            NoInterno = x.HER_Documento.HER_NoInterno,
                            Adjuntos = (x.HER_AnexoId != null) ? true : false,
                            Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                            Destinatario = x.HER_Recepciones.First().HER_Para.HER_NombreCompleto,
                            Destinatarios_Extra = (x.HER_Recepciones.Count() - 1),
                            Leido = true,
                            Remitente = string.Empty
                        })
                        .OrderByDescending(x => x.Fecha)
                        .AsQueryable()
                    ));
            }
            else if (!string.IsNullOrEmpty(busqueda) && categoria != null && (!string.IsNullOrEmpty(fechaini) && !string.IsNullOrEmpty(fechafin)))
            {
                fechaInicioTemp = Convert.ToDateTime(fechaini, _cultureEs).AddHours(0).AddMinutes(0).AddSeconds(0);
                fechaFinTemp = Convert.ToDateTime(fechafin, _cultureEs).AddHours(23).AddMinutes(59).AddSeconds(59);
                busqueda = busqueda.Replace('+', ' ');

                enviadosQuery = ((_context.HER_Envio
                        .Where(a => a.HER_De.HER_UserName == username
                                 && a.HER_De.HER_Activo == true
                                 && a.HER_EsOculto == false
                                 && a.HER_CarpetaId == carpetaId
                                 && (EF.Functions.Like(a.HER_Documento.HER_Folio, "%" + busqueda + "%")
                                    || EF.Functions.Like(a.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                                    || EF.Functions.Like(a.HER_Recepciones.First().HER_Para.HER_NombreCompleto, "%" + busqueda + "%"))
                                 && a.HER_Documento.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria)
                                 && (a.HER_FechaEnvio >= fechaInicioTemp && a.HER_FechaEnvio <= fechaFinTemp)
                                 && a.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1)
                        .AsNoTracking()
                        .Select(x => new DocumentoEnCarpetaPersonalViewModel
                        {
                            Bandeja_Origen = ConstBandejas.ConstTipoT2,
                            EnvioId = x.HER_EnvioId,
                            Fecha = x.HER_FechaEnvio,
                            TipoEnvio = x.HER_TipoEnvioId,
                            Estado = x.HER_EstadoEnvio.HER_Nombre,
                            Folio = x.HER_Documento.HER_Folio,
                            Asunto = x.HER_Documento.HER_Asunto,
                            NoInterno = x.HER_Documento.HER_NoInterno,
                            Adjuntos = (x.HER_AnexoId != null) ? true : false,
                            Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                            Destinatario = x.HER_Recepciones.First().HER_Para.HER_NombreCompleto,
                            Destinatarios_Extra = (x.HER_Recepciones.Count() - 1),
                            Leido = true,
                            Remitente = string.Empty,
                            //---
                            TipoPara = 0
                        })
                        .OrderByDescending(x => x.Fecha)
                        .AsQueryable()
                    ).Union(
                        _context.HER_Envio
                            .Where(a => a.HER_De.HER_UserName == username
                                     && a.HER_De.HER_Activo == true
                                 && a.HER_EsOculto == false
                                     && a.HER_CarpetaId == carpetaId
                                     && (EF.Functions.Like(a.HER_Documento.HER_Folio, "%" + busqueda + "%")
                                        || EF.Functions.Like(a.HER_Documento.HER_Asunto, "%" + busqueda + "%")
                                        || EF.Functions.Like(a.HER_Recepciones.First().HER_Para.HER_NombreCompleto, "%" + busqueda + "%"))
                                     && a.HER_EnvioPadre.HER_Recepciones.Any(x => x.HER_Para.HER_UserName == username && x.HER_Categorias.Any(y => y.HER_CategoriaId == (int)categoria))
                                     && (a.HER_FechaEnvio >= fechaInicioTemp && a.HER_FechaEnvio <= fechaFinTemp)
                                     && a.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                            .AsNoTracking()
                            .Select(x => new DocumentoEnCarpetaPersonalViewModel
                            {
                                Bandeja_Origen = ConstBandejas.ConstTipoT2,
                                EnvioId = x.HER_EnvioId,
                                Fecha = x.HER_FechaEnvio,
                                TipoEnvio = x.HER_TipoEnvioId,
                                Estado = x.HER_EstadoEnvio.HER_Nombre,
                                Folio = x.HER_Documento.HER_Folio,
                                Asunto = x.HER_Documento.HER_Asunto,
                                NoInterno = x.HER_Documento.HER_NoInterno,
                                Adjuntos = (x.HER_AnexoId != null) ? true : false,
                                Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                                Destinatario = x.HER_Recepciones.First().HER_Para.HER_NombreCompleto,
                                Destinatarios_Extra = (x.HER_Recepciones.Count() - 1),
                                Leido = true,
                                Remitente = string.Empty
                            })
                            .OrderByDescending(x => x.Fecha)
                            .AsQueryable()
                    )
                );
            }
            else
            {
                //Enviados
                enviadosQuery = (
                        _context.HER_Envio
                        .Where(a => a.HER_De.HER_UserName == username
                                 && a.HER_De.HER_Activo == true
                                 && a.HER_EsOculto == false
                                 && a.HER_CarpetaId == carpetaId)
                        .AsNoTracking()
                        .Select(x => new DocumentoEnCarpetaPersonalViewModel
                        {
                            Bandeja_Origen = ConstBandejas.ConstTipoT2,
                            EnvioId = x.HER_EnvioId,
                            Fecha = x.HER_FechaEnvio,
                            TipoEnvio = x.HER_TipoEnvioId,
                            Estado = x.HER_EstadoEnvio.HER_Nombre,
                            Folio = x.HER_Documento.HER_Folio,
                            Asunto = x.HER_Documento.HER_Asunto,
                            NoInterno = x.HER_Documento.HER_NoInterno,
                            Adjuntos = (x.HER_AnexoId != null) ? true : false,
                            Importancia = (x.HER_ImportanciaId == ConstImportancia.ImportanciaN1) ? true : false,
                            Destinatario = x.HER_Recepciones.First().HER_Para.HER_NombreCompleto,
                            Destinatarios_Extra = (x.HER_Recepciones.Count() - 1),
                            Leido = true,
                            Remitente = string.Empty,
                            //---
                            TipoPara = 0
                        })
                        .OrderByDescending(x => x.Fecha)
                        .AsQueryable()
                    );
            }

            return enviadosQuery.OrderByDescending(x => x.Fecha);
        }
        //Notificación por correo
        public async Task<ResumenEnvioDocumentoCorreoViewModel> ObtenerParaCorreoDocumentoEnviadoAsync(int envioId)
        {
            var documentoEnviado = new ResumenEnvioDocumentoCorreoViewModel();

            //---[Actual]---
            //--------------------------------------
            var envioActualQuery = _context.HER_Envio
                .Where(x => x.HER_EnvioId == envioId)
                .Include(x => x.HER_Importancia)
                //--
                .Include(x => x.HER_Anexo)
                    .ThenInclude(x => x.HER_AnexoArchivos)
                        .ThenInclude(x => x.HER_AnexoRuta)
                //--
                .Include(x => x.HER_De)
                    .ThenInclude(x => x.HER_Area)
                        .ThenInclude(x => x.HER_Region)
                .Include(x => x.HER_De)
                    .ThenInclude(x => x.HER_Area)
                        .ThenInclude(x => x.HER_Area_Padre)
                //--
                .Include(x => x.HER_Documento)
                    .ThenInclude(x => x.HER_Tipo)
                .Include(x => x.HER_Documento)
                    .ThenInclude(x => x.HER_DocumentoCreador)
                .Include(x => x.HER_Documento)
                    .ThenInclude(x => x.HER_DocumentoTitular)
                //--
                .AsNoTracking()
                .AsQueryable();

            var recepcionesActualQuery = _context.HER_Recepcion
                .Where(x => x.HER_Envio.HER_EnvioId == envioId)
                //--
                .Include(x => x.HER_EstadoEnvio)
                .Include(x => x.HER_Para)
                    .ThenInclude(x => x.HER_Area)
                .Include(x => x.HER_Para)
                    .ThenInclude(x => x.HER_Usuario)
                        .ThenInclude(x => x.HER_Configuracion)
                .AsNoTracking()
                .AsQueryable();

            var envioActual = await envioActualQuery.FirstOrDefaultAsync();

            if (envioActual != null)
            {
                //Documento Origen
                documentoEnviado.Folio = envioActual.HER_Documento.HER_Folio;
                documentoEnviado.Asunto = envioActual.HER_Documento.HER_Asunto;
                documentoEnviado.NoInterno = envioActual.HER_Documento.HER_NoInterno;
                documentoEnviado.Fecha = envioActual.HER_FechaEnvio.ToString("D", _cultureEs);
                documentoEnviado.Cuerpo = envioActual.HER_Documento.HER_Cuerpo;
                documentoEnviado.Importancia = envioActual.HER_Importancia.HER_Nombre;
                documentoEnviado.TipoDocumento = envioActual.HER_Documento.HER_Tipo.HER_Nombre;
                documentoEnviado.TipoEnvioId = envioActual.HER_TipoEnvioId;
                documentoEnviado.Indicaciones = (!string.IsNullOrEmpty(envioActual.HER_Indicaciones)) ? envioActual.HER_Indicaciones : string.Empty;
                documentoEnviado.EsReenvio = envioActual.HER_EsReenvio;
                //--
                //Usuario Origen
                documentoEnviado.Origen_UsuarioDe = new ResumenInfoRemitenteOrigenViewModel()
                {
                    NombreCompleto = envioActual.HER_De.HER_NombreCompleto,
                    Correo = envioActual.HER_De.HER_Correo,
                    Direccion = envioActual.HER_DeDireccion,
                    Telefono = envioActual.HER_DeTelefono,
                    AreaPadre = (envioActual.HER_De.HER_Area.HER_Area_PadreId != null) ? envioActual.HER_De.HER_Area.HER_Area_Padre.HER_Nombre : string.Empty,
                    Area = envioActual.HER_De.HER_Area.HER_Nombre,
                    Region = envioActual.HER_De.HER_Area.HER_Region.HER_Nombre,
                    Puesto = envioActual.HER_De.HER_Puesto,
                };

                //Usuario Para Origen
                documentoEnviado.Origen_UsuarioPara = recepcionesActualQuery
                    .Where(x => x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1)
                    .Select(y => new ResumenInfoDestinatariosOrigenViewModel()
                    {
                        NombreCompleto = y.HER_Para.HER_NombreCompleto,
                        Usuario = y.HER_Para.HER_UserName,
                        Correo = y.HER_Para.HER_Correo,
                        Area = y.HER_Para.HER_Area.HER_Nombre,
                        Puesto = y.HER_Para.HER_Puesto,
                        EstaActivaNotificacion = y.HER_Para.HER_Usuario.HER_Configuracion.HER_Notificaciones
                    })
                    .ToList();

                //Usuario CCP Origen
                documentoEnviado.Origen_UsuarioCcp = recepcionesActualQuery
                    .Where(x => x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN2)
                    .Select(y => new ResumenInfoDestinatariosOrigenViewModel()
                    {
                        NombreCompleto = y.HER_Para.HER_NombreCompleto,
                        Usuario = y.HER_Para.HER_UserName,
                        Correo = y.HER_Para.HER_Correo,
                        Area = y.HER_Para.HER_Area.HER_Nombre,
                        Puesto = y.HER_Para.HER_Puesto,
                        EstaActivaNotificacion = y.HER_Para.HER_Usuario.HER_Configuracion.HER_Notificaciones
                    })
                    .ToList();

                documentoEnviado.Origen_NombreCreador = envioActual.HER_Documento.HER_DocumentoCreador.HER_NombreCompleto;
                documentoEnviado.Origen_UsuarioCreador = envioActual.HER_Documento.HER_DocumentoCreador.HER_UserName;
                documentoEnviado.Origen_NombreTitular = envioActual.HER_Documento.HER_DocumentoTitular.HER_NombreCompleto;
                documentoEnviado.Origen_UsuarioTitular = envioActual.HER_Documento.HER_DocumentoTitular.HER_UserName;
                //--
                if (envioActual.HER_AnexoId != null)
                {
                    documentoEnviado.Origen_Anexos = envioActual.HER_Anexo.HER_AnexoArchivos
                        .Select(a => Path.Combine(string.Format("{0}", a.HER_AnexoRutaId == null ? _environment.WebRootPath : a.HER_AnexoRuta.HER_RutaBase), string.Format("{0}/{1}", a.HER_RutaComplemento, a.HER_Nombre)))
                        .ToList();
                }
                else
                {
                    documentoEnviado.Origen_Anexos = new List<string>();
                }
            }

            return documentoEnviado;
        }
        public async Task<ResumenTurnarDocumentoCorreoViewModel> ObtenerParaCorreoDocumentoTurnadoAsync(int envioId)
        {
            var documentoEnviado = new ResumenTurnarDocumentoCorreoViewModel();

            //---[Actual]---
            //--------------------------------------
            var envioActualQuery = _context.HER_Envio
                .Where(x => x.HER_EnvioId == envioId)
                //--
                .Include(x => x.HER_Importancia)
                .Include(x => x.HER_EnvioPadre)
                //--
                .Include(x => x.HER_Anexo)
                    .ThenInclude(x => x.HER_AnexoArchivos)
                        .ThenInclude(x => x.HER_AnexoRuta)
                //--
                .Include(x => x.HER_De)
                    .ThenInclude(x => x.HER_Area)
                //--
                .AsNoTracking()
                .AsQueryable();

            var recepcionesActualQuery = _context.HER_Recepcion
                .Where(x => x.HER_Envio.HER_EnvioId == envioId)
                .Include(x => x.HER_EstadoEnvio)
                .Include(x => x.HER_Para)
                    .ThenInclude(x => x.HER_Area)
                        .ThenInclude(x => x.HER_Area_Padre)
                .Include(x => x.HER_Para)
                    .ThenInclude(x => x.HER_Puesto)
                 .Include(x => x.HER_Para)
                     .ThenInclude(x => x.HER_Usuario)
                        .ThenInclude(x => x.HER_Configuracion)
                .AsNoTracking()
                .AsQueryable();

            var envioActual = await envioActualQuery.FirstOrDefaultAsync();

            if (envioActual != null)
            {
                documentoEnviado.Actual_Importancia = envioActual.HER_Importancia.HER_Nombre;
                documentoEnviado.Actual_Fecha = envioActual.HER_FechaEnvio.ToString("dd/MM/yyyy HH:mm", _cultureEs);
                documentoEnviado.Actual_Indicaciones = envioActual.HER_Indicaciones;

                documentoEnviado.Actual_UsuarioDe = new ResumenInfoRemitenteViewModel()
                {
                    NombreCompleto = envioActual.HER_De.HER_NombreCompleto,
                    Usuario = envioActual.HER_De.HER_UserName,
                    Correo = envioActual.HER_De.HER_Correo,
                    Area = envioActual.HER_De.HER_Area.HER_Nombre,
                    Puesto = envioActual.HER_De.HER_Puesto
                };

                documentoEnviado.Actual_UsuarioPara = recepcionesActualQuery
                    .Where(x => x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1)
                    .Select(x => new ResumenInfoDestinatariosViewModel()
                    {
                        NombreCompleto = x.HER_Para.HER_NombreCompleto,
                        Usuario = x.HER_Para.HER_UserName,
                        Correo = x.HER_Para.HER_Correo,
                        Area = x.HER_Para.HER_Area.HER_Nombre,
                        Puesto = x.HER_Para.HER_Puesto,
                        EstaActivaNotificacion = x.HER_Para.HER_Usuario.HER_Configuracion.HER_Notificaciones
                    })
                    .ToList();

                documentoEnviado.Actual_UsuarioCcp = recepcionesActualQuery
                    .Where(x => x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN2)
                    .Select(x => new ResumenInfoDestinatariosViewModel()
                    {
                        NombreCompleto = x.HER_Para.HER_NombreCompleto,
                        Usuario = x.HER_Para.HER_UserName,
                        Correo = x.HER_Para.HER_Correo,
                        Area = x.HER_Para.HER_Area.HER_Nombre,
                        Puesto = x.HER_Para.HER_Puesto,
                        EstaActivaNotificacion = x.HER_Para.HER_Usuario.HER_Configuracion.HER_Notificaciones
                    })
                    .ToList();

                if (envioActual.HER_AnexoId != null)
                    documentoEnviado.Actual_Anexos = envioActual.HER_Anexo.HER_AnexoArchivos
                                    .Select(a => string.Format("{0}/{1}", a.HER_RutaComplemento, a.HER_Nombre))
                                    .ToList();
                else
                    documentoEnviado.Actual_Anexos = new List<string>();

            }

            //*********************************************************************************************************************************/
            //---[Origen]---
            //--------------------------------------
            //Si es un turnar se busca recuperar la informacion origen
            var envioOrigenQuery = _context.HER_Envio
                .Where(x => x.HER_DocumentoId == envioActual.HER_DocumentoId)
                //--
                .Include(x => x.HER_EstadoEnvio)
                .Include(x => x.HER_Importancia)
                .Include(x => x.HER_EnvioPadre)
                //--
                .Include(x => x.HER_Anexo)
                    .ThenInclude(x => x.HER_AnexoArchivos)
                        .ThenInclude(x => x.HER_AnexoRuta)
                //--
                .Include(x => x.HER_Documento)
                    .ThenInclude(x => x.HER_Tipo)
                .Include(x => x.HER_Documento)
                    .ThenInclude(x => x.HER_DocumentoCreador)
                .Include(x => x.HER_Documento)
                    .ThenInclude(x => x.HER_DocumentoTitular)
                //--
                .Include(x => x.HER_De)
                    .ThenInclude(x => x.HER_Area)
                        .ThenInclude(x => x.HER_Region)
                .Include(x => x.HER_De)
                    .ThenInclude(x => x.HER_Area)
                        .ThenInclude(x => x.HER_Area_Padre)
                //--
                .OrderBy(x => x.HER_Orden)
                .AsNoTracking()
                .AsQueryable();

            var envioOrigen = await envioOrigenQuery.FirstOrDefaultAsync();

            if (envioOrigen != null)
            {
                documentoEnviado.Actual_AsuntoEnvio = string.Format("{0} {1}", "", envioOrigen.HER_Documento.HER_Asunto);

                //Documento Origen
                documentoEnviado.Folio = envioOrigen.HER_Documento.HER_Folio;
                documentoEnviado.Asunto = envioOrigen.HER_Documento.HER_Asunto;
                documentoEnviado.NoInterno = envioOrigen.HER_Documento.HER_NoInterno;
                documentoEnviado.Fecha = envioOrigen.HER_FechaEnvio.ToString("D", _cultureEs);
                documentoEnviado.Cuerpo = envioOrigen.HER_Documento.HER_Cuerpo;
                documentoEnviado.Importancia = envioOrigen.HER_Importancia.HER_Nombre;
                documentoEnviado.TipoDocumento = envioOrigen.HER_Documento.HER_Tipo.HER_Nombre;

                documentoEnviado.Origen_UsuarioDe = new ResumenInfoRemitenteOrigenViewModel()
                {
                    NombreCompleto = envioOrigen.HER_De.HER_NombreCompleto,
                    Correo = envioOrigen.HER_De.HER_Correo,
                    Direccion = envioOrigen.HER_DeDireccion,
                    Telefono = envioOrigen.HER_DeTelefono,
                    AreaPadre = (envioOrigen.HER_De.HER_Area.HER_Area_PadreId != null) ? envioOrigen.HER_De.HER_Area.HER_Area_Padre.HER_Nombre : string.Empty,
                    Area = envioOrigen.HER_De.HER_Area.HER_Nombre,
                    Region = envioOrigen.HER_De.HER_Area.HER_Region.HER_Nombre,
                    Puesto = envioOrigen.HER_De.HER_Puesto
                };

                //Usuario Origen
                documentoEnviado.Origen_NombreCreador = envioOrigen.HER_Documento.HER_DocumentoCreador.HER_NombreCompleto;
                documentoEnviado.Origen_UsuarioCreador = envioOrigen.HER_Documento.HER_DocumentoCreador.HER_UserName;
                documentoEnviado.Origen_NombreTitular = envioOrigen.HER_Documento.HER_DocumentoTitular.HER_NombreCompleto;
                documentoEnviado.Origen_UsuarioTitular = envioOrigen.HER_Documento.HER_DocumentoTitular.HER_UserName;

                //-- ------------------------- -------------------------------- ---------------------
                if (envioOrigen.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4)
                {
                    var recepcionesOrigenPadreQuery = _context.HER_Recepcion
                   .Where(x => x.HER_Envio.HER_EnvioId == envioOrigen.HER_EnvioId)
                   .Include(x => x.HER_EstadoEnvio)
                   .Include(x => x.HER_Para)
                       .ThenInclude(x => x.HER_Area)
                   .AsNoTracking()
                   .AsQueryable();

                    documentoEnviado.Origen_UsuarioParaBase = recepcionesOrigenPadreQuery
                        .Where(x => x.HER_ParaId == envioOrigen.HER_EnvioPadre.HER_DeId)
                        .Select(x => new ResumenInfoDestinatariosOrigenViewModel()
                        {
                            NombreCompleto = x.HER_Para.HER_NombreCompleto,
                            Usuario = x.HER_Para.HER_UserName,
                            Correo = x.HER_Para.HER_Correo,
                            Area = x.HER_Para.HER_Area.HER_Nombre,
                            Puesto = x.HER_Para.HER_Puesto,
                            EstaActivaNotificacion = x.HER_Para.HER_Usuario.HER_Configuracion.HER_Notificaciones
                        })
                        .FirstOrDefault();

                    //Usuario Destino(para Actual)
                    documentoEnviado.Origen_UsuarioPara = recepcionesOrigenPadreQuery
                        .Where(x => x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1)
                        .Select(x => new ResumenInfoDestinatariosOrigenViewModel()
                        {
                            NombreCompleto = x.HER_Para.HER_NombreCompleto,
                            Usuario = x.HER_Para.HER_UserName,
                            Correo = x.HER_Para.HER_Correo,
                            Area = x.HER_Para.HER_Area.HER_Nombre,
                            Puesto = x.HER_Para.HER_Puesto,
                            EstaActivaNotificacion = x.HER_Para.HER_Usuario.HER_Configuracion.HER_Notificaciones
                        })
                        .ToList();


                    documentoEnviado.Origen_UsuarioCcp = recepcionesOrigenPadreQuery
                        .Where(y => y.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN2)
                        .Select(z => new ResumenInfoDestinatariosOrigenViewModel()
                        {
                            NombreCompleto = z.HER_Para.HER_NombreCompleto,
                            Usuario = z.HER_Para.HER_UserName,
                            Correo = z.HER_Para.HER_Correo,
                            Area = z.HER_Para.HER_Area.HER_Nombre,
                            Puesto = z.HER_Para.HER_Puesto,
                            EstaActivaNotificacion = z.HER_Para.HER_Usuario.HER_Configuracion.HER_Notificaciones
                        })
                        .ToList();
                    if (envioOrigen.HER_AnexoId != null)
                    {
                        documentoEnviado.Origen_Anexos = envioOrigen.HER_Anexo.HER_AnexoArchivos
                            //.Select(a => string.Format("{0}", a.HER_Nombre))
                            .Select(a => Path.Combine(string.Format("{0}", a.HER_AnexoRutaId == null ? _environment.WebRootPath : a.HER_AnexoRuta.HER_RutaBase), string.Format("{0}/{1}", a.HER_RutaComplemento, a.HER_Nombre)))
                            .ToList();
                    }
                    else
                    {
                        documentoEnviado.Origen_Anexos = new List<string>();
                    }
                }
                else
                {
                    var recepcionesOrigenQuery = _context.HER_Recepcion
                   .Where(x => x.HER_Envio.HER_EnvioId == envioOrigen.HER_EnvioId)
                   .Include(x => x.HER_EstadoEnvio)
                   .Include(x => x.HER_Para)
                       .ThenInclude(x => x.HER_Area)
                   .AsNoTracking()
                   .AsQueryable();

                    documentoEnviado.Origen_UsuarioParaBase = recepcionesOrigenQuery
                        .Where(x => x.HER_ParaId == envioActual.HER_UsuarioOrigenId)
                        .Select(x => new ResumenInfoDestinatariosOrigenViewModel()
                        {
                            NombreCompleto = x.HER_Para.HER_NombreCompleto,
                            Usuario = x.HER_Para.HER_UserName,
                            Correo = x.HER_Para.HER_Correo,
                            Area = x.HER_Para.HER_Area.HER_Nombre,
                            Puesto = x.HER_Para.HER_Puesto,
                            EstaActivaNotificacion = x.HER_Para.HER_Usuario.HER_Configuracion.HER_Notificaciones
                        })
                        .FirstOrDefault();


                    //Usuario Destino(para Actual)
                    documentoEnviado.Origen_UsuarioPara = recepcionesOrigenQuery
                        .Where(x => x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1)
                        .Select(x => new ResumenInfoDestinatariosOrigenViewModel()
                        {
                            NombreCompleto = x.HER_Para.HER_NombreCompleto,
                            Usuario = x.HER_Para.HER_UserName,
                            Correo = x.HER_Para.HER_Correo,
                            Area = x.HER_Para.HER_Area.HER_Nombre,
                            Puesto = x.HER_Para.HER_Puesto,
                            EstaActivaNotificacion = x.HER_Para.HER_Usuario.HER_Configuracion.HER_Notificaciones
                        })
                        .ToList();


                    documentoEnviado.Origen_UsuarioCcp = recepcionesOrigenQuery
                        .Where(y => y.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN2)
                        .Select(z => new ResumenInfoDestinatariosOrigenViewModel()
                        {
                            NombreCompleto = z.HER_Para.HER_NombreCompleto,
                            Usuario = z.HER_Para.HER_UserName,
                            Correo = z.HER_Para.HER_Correo,
                            Area = z.HER_Para.HER_Area.HER_Nombre,
                            Puesto = z.HER_Para.HER_Puesto,
                            EstaActivaNotificacion = z.HER_Para.HER_Usuario.HER_Configuracion.HER_Notificaciones
                        })
                        .ToList();

                    if (envioOrigen.HER_AnexoId != null)
                    {
                        documentoEnviado.Origen_Anexos = envioOrigen.HER_Anexo.HER_AnexoArchivos
                            //.Select(a => string.Format("{0}", a.HER_Nombre))
                            .Select(a => Path.Combine(string.Format("{0}", a.HER_AnexoRutaId == null ? _environment.WebRootPath : a.HER_AnexoRuta.HER_RutaBase), string.Format("{0}/{1}", a.HER_RutaComplemento, a.HER_Nombre)))
                            .ToList();
                    }
                    else
                    {
                        documentoEnviado.Origen_Anexos = new List<string>();
                    }
                }
            }

            return documentoEnviado;
        }
        public async Task<ResumenTurnarEspecialDocumentoCorreoViewModel> ObtenerParaCorreoDocumentoTurnadoEspecialAsync(int envioId)
        {
            var documentoEnviado = new ResumenTurnarEspecialDocumentoCorreoViewModel();

            var envioActualQuery = _context.HER_Envio
            .Where(x => x.HER_EnvioId == envioId)
                //--
                .Include(x => x.HER_Importancia)
                .Include(x => x.HER_EnvioPadre)
                //--
                .Include(x => x.HER_Anexo)
                    .ThenInclude(x => x.HER_AnexoArchivos)
                        .ThenInclude(x => x.HER_AnexoRuta)
                //--
                .Include(x => x.HER_De)
                    .ThenInclude(x => x.HER_Area)
                    .ThenInclude(x => x.HER_Area_Padre)
                //--
                .Include(x => x.HER_Documento)
                    .ThenInclude(x => x.HER_Tipo)
                .Include(x => x.HER_Documento)
                    .ThenInclude(x => x.HER_DocumentoCreador)
                .Include(x => x.HER_Documento)
                    .ThenInclude(x => x.HER_DocumentoTitular)
                .AsNoTracking()
                .AsQueryable();

            var recepcionesActualQuery = _context.HER_Recepcion
                .Where(x => x.HER_Envio.HER_EnvioId == envioId)
                .Include(x => x.HER_EstadoEnvio)
                .Include(x => x.HER_Para)
                    .ThenInclude(x => x.HER_Area)
                        .ThenInclude(x => x.HER_Area_Padre)
                .Include(x => x.HER_Para)
                    .ThenInclude(x => x.HER_Puesto)
                 .Include(x => x.HER_Para)
                     .ThenInclude(x => x.HER_Usuario)
                        .ThenInclude(x => x.HER_Configuracion)
                .AsNoTracking()
                .AsQueryable();

            var envioActual = await envioActualQuery.FirstOrDefaultAsync();

            if (envioActual != null)
            {
                documentoEnviado.Actual_Importancia = envioActual.HER_Importancia.HER_Nombre;
                documentoEnviado.Actual_Fecha = envioActual.HER_FechaEnvio.ToString("dd/MM/yyyy HH:mm", _cultureEs);
                documentoEnviado.Actual_Indicaciones = (!string.IsNullOrEmpty(envioActual.HER_Indicaciones)) ? envioActual.HER_Indicaciones : string.Empty;
                documentoEnviado.Actual_UsuarioDe = new ResumenInfoRemitenteViewModel()
                {
                    NombreCompleto = envioActual.HER_De.HER_NombreCompleto,
                    Usuario = envioActual.HER_De.HER_UserName,
                    Correo = envioActual.HER_De.HER_Correo,
                    Area = envioActual.HER_De.HER_Area.HER_Nombre,
                    Puesto = envioActual.HER_De.HER_Puesto
                };

                documentoEnviado.Actual_UsuarioPara = recepcionesActualQuery
                   .Where(x => x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1)
                   .Select(x => new ResumenInfoDestinatariosViewModel()
                   {
                       NombreCompleto = x.HER_Para.HER_NombreCompleto,
                       Usuario = x.HER_Para.HER_UserName,
                       Correo = x.HER_Para.HER_Correo,
                       Area = x.HER_Para.HER_Area.HER_Nombre,
                       Puesto = x.HER_Para.HER_Puesto,
                       EstaActivaNotificacion = x.HER_Para.HER_Usuario.HER_Configuracion.HER_Notificaciones
                   })
                   .ToList();

                documentoEnviado.Actual_UsuarioCcp = recepcionesActualQuery
                    .Where(x => x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN2)
                    .Select(x => new ResumenInfoDestinatariosViewModel()
                    {
                        NombreCompleto = x.HER_Para.HER_NombreCompleto,
                        Usuario = x.HER_Para.HER_UserName,
                        Correo = x.HER_Para.HER_Correo,
                        Area = x.HER_Para.HER_Area.HER_Nombre,
                        Puesto = x.HER_Para.HER_Puesto,
                        EstaActivaNotificacion = x.HER_Para.HER_Usuario.HER_Configuracion.HER_Notificaciones
                    })
                    .ToList();

                if (envioActual.HER_AnexoId != null)
                {
                    documentoEnviado.Actual_Anexos = envioActual.HER_Anexo.HER_AnexoArchivos
                                    .Select(a => string.Format("{0}/{1}", a.HER_RutaComplemento, a.HER_Nombre))
                                    .ToList();
                }
                else
                {
                    documentoEnviado.Actual_Anexos = new List<string>();
                }

                //---[Origen]------//
                var envioOrigenQuery = _context.HER_Envio
                    .Where(x => x.HER_DocumentoId == envioActual.HER_DocumentoId)
                    //--
                    .Include(x => x.HER_EstadoEnvio)
                    .Include(x => x.HER_Importancia)
                    .Include(x => x.HER_EnvioPadre)
                    //--
                    .Include(x => x.HER_Anexo)
                        .ThenInclude(x => x.HER_AnexoArchivos)
                            .ThenInclude(x => x.HER_AnexoRuta)
                    //--
                    .Include(x => x.HER_Documento)
                        .ThenInclude(x => x.HER_Tipo)
                    .Include(x => x.HER_Documento)
                        .ThenInclude(x => x.HER_DocumentoCreador)
                    .Include(x => x.HER_Documento)
                        .ThenInclude(x => x.HER_DocumentoTitular)
                    //--
                    .Include(x => x.HER_De)
                        .ThenInclude(x => x.HER_Area)
                            .ThenInclude(x => x.HER_Region)
                    .Include(x => x.HER_De)
                        .ThenInclude(x => x.HER_Area)
                            .ThenInclude(x => x.HER_Area_Padre)
                    //--
                    .OrderBy(x => x.HER_Orden)
                    .AsNoTracking()
                    .AsQueryable();

                var envioOrigen = await envioOrigenQuery.FirstOrDefaultAsync();

                if (envioOrigen != null)
                {
                    documentoEnviado.Actual_AsuntoEnvio = string.Format("{0} {1}", "", envioOrigen.HER_Documento.HER_Asunto);

                    //Documento Origen
                    documentoEnviado.Folio = envioOrigen.HER_Documento.HER_Folio;
                    documentoEnviado.Asunto = envioOrigen.HER_Documento.HER_Asunto;
                    documentoEnviado.NoInterno = envioOrigen.HER_Documento.HER_NoInterno;
                    documentoEnviado.Fecha = envioOrigen.HER_FechaEnvio.ToString("D", _cultureEs);
                    documentoEnviado.Cuerpo = envioOrigen.HER_Documento.HER_Cuerpo;
                    documentoEnviado.Importancia = envioOrigen.HER_Importancia.HER_Nombre;
                    documentoEnviado.TipoDocumento = envioOrigen.HER_Documento.HER_Tipo.HER_Nombre;

                    documentoEnviado.Origen_UsuarioDe = new ResumenInfoRemitenteOrigenViewModel()
                    {
                        NombreCompleto = envioOrigen.HER_De.HER_NombreCompleto,
                        Correo = envioOrigen.HER_De.HER_Correo,
                        Direccion = envioOrigen.HER_DeDireccion,
                        Telefono = envioOrigen.HER_DeTelefono,
                        AreaPadre = (envioOrigen.HER_De.HER_Area.HER_Area_PadreId != null) ? envioOrigen.HER_De.HER_Area.HER_Area_Padre.HER_Nombre : string.Empty,
                        Area = envioOrigen.HER_De.HER_Area.HER_Nombre,
                        Region = envioOrigen.HER_De.HER_Area.HER_Region.HER_Nombre,
                        Puesto = envioOrigen.HER_De.HER_Puesto
                    };

                    //Usuario Origen
                    documentoEnviado.Origen_NombreCreador = envioOrigen.HER_Documento.HER_DocumentoCreador.HER_NombreCompleto;
                    documentoEnviado.Origen_UsuarioCreador = envioOrigen.HER_Documento.HER_DocumentoCreador.HER_UserName;
                    documentoEnviado.Origen_NombreTitular = envioOrigen.HER_Documento.HER_DocumentoTitular.HER_NombreCompleto;
                    documentoEnviado.Origen_UsuarioTitular = envioOrigen.HER_Documento.HER_DocumentoTitular.HER_UserName;

                    var recepcionesOrigenQuery = _context.HER_Recepcion
                        .Where(x => x.HER_Envio.HER_EnvioId == envioOrigen.HER_EnvioId)
                        .Include(x => x.HER_EstadoEnvio)
                        .Include(x => x.HER_Para)
                            .ThenInclude(x => x.HER_Area)
                        .AsNoTracking()
                        .AsQueryable();

                    documentoEnviado.Origen_UsuarioParaBase = recepcionesOrigenQuery
                        .Where(x => x.HER_ParaId == envioOrigen.HER_EnvioPadre.HER_DeId)
                        .Select(x => new ResumenInfoDestinatariosOrigenViewModel()
                        {
                            NombreCompleto = x.HER_Para.HER_NombreCompleto,
                            Usuario = x.HER_Para.HER_UserName,
                            Correo = x.HER_Para.HER_Correo,
                            Area = x.HER_Para.HER_Area.HER_Nombre,
                            Puesto = x.HER_Para.HER_Puesto,
                            EstaActivaNotificacion = x.HER_Para.HER_Usuario.HER_Configuracion.HER_Notificaciones
                        })
                        .FirstOrDefault();


                    //Usuario Destino(para Actual)
                    documentoEnviado.Origen_UsuarioPara = recepcionesOrigenQuery
                        .Where(x => x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1)
                        .Select(x => new ResumenInfoDestinatariosOrigenViewModel()
                        {
                            NombreCompleto = x.HER_Para.HER_NombreCompleto,
                            Usuario = x.HER_Para.HER_UserName,
                            Correo = x.HER_Para.HER_Correo,
                            Area = x.HER_Para.HER_Area.HER_Nombre,
                            Puesto = x.HER_Para.HER_Puesto,
                            EstaActivaNotificacion = x.HER_Para.HER_Usuario.HER_Configuracion.HER_Notificaciones
                        })
                        .ToList();


                    documentoEnviado.Origen_UsuarioCcp = recepcionesOrigenQuery
                        .Where(y => y.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN2)
                        .Select(z => new ResumenInfoDestinatariosOrigenViewModel()
                        {
                            NombreCompleto = z.HER_Para.HER_NombreCompleto,
                            Usuario = z.HER_Para.HER_UserName,
                            Correo = z.HER_Para.HER_Correo,
                            Area = z.HER_Para.HER_Area.HER_Nombre,
                            Puesto = z.HER_Para.HER_Puesto,
                            EstaActivaNotificacion = z.HER_Para.HER_Usuario.HER_Configuracion.HER_Notificaciones
                        })
                        .ToList();

                    if (envioOrigen.HER_AnexoId != null)
                    {
                        documentoEnviado.Origen_Anexos = envioOrigen.HER_Anexo.HER_AnexoArchivos
                            //.Select(a => string.Format("{0}", a.HER_Nombre))
                            .Select(a => Path.Combine(string.Format("{0}", a.HER_AnexoRutaId == null ? _environment.WebRootPath : a.HER_AnexoRuta.HER_RutaBase), string.Format("{0}/{1}", a.HER_RutaComplemento, a.HER_Nombre)))
                            .ToList();
                    }
                    else
                    {
                        documentoEnviado.Origen_Anexos = new List<string>();
                    }
                }
            }
            return documentoEnviado;
        }
        public async Task<ResumenResponderDocumentoCorreoViewModel> ObtenerParaCorreoDocumentoRespondidoAsync(int envioId)
        {
            var documentoEnviado = new ResumenResponderDocumentoCorreoViewModel();

            //---[Actual]---
            //--------------------------------------
            var envioActualQuery = _context.HER_Envio
                .Where(x => x.HER_EnvioId == envioId)
                .Include(x => x.HER_Importancia)
                .Include(x => x.HER_TipoEnvio)
                //--
                .Include(x => x.HER_Anexo)
                    .ThenInclude(x => x.HER_AnexoArchivos)
                        .ThenInclude(x => x.HER_AnexoRuta)
                //--
                .Include(x => x.HER_De)
                    .ThenInclude(x => x.HER_Area)
                        .ThenInclude(x => x.HER_Region)
                .Include(x => x.HER_De)
                    .ThenInclude(x => x.HER_Area)
                        .ThenInclude(x => x.HER_Area_Padre)
                //--
                .Include(x => x.HER_Documento)
                    .ThenInclude(x => x.HER_Tipo)
                .Include(x => x.HER_Documento)
                    .ThenInclude(x => x.HER_DocumentoCreador)
                .Include(x => x.HER_Documento)
                    .ThenInclude(x => x.HER_DocumentoTitular)
                //--
                .AsNoTracking()
                .AsQueryable();

            var recepcionesActualQuery = _context.HER_Recepcion
                .Where(x => x.HER_Envio.HER_EnvioId == envioId)
                .Include(x => x.HER_EstadoEnvio)
                .Include(x => x.HER_Para)
                    .ThenInclude(x => x.HER_Area)
                .Include(x => x.HER_Para)
                    .ThenInclude(x => x.HER_Usuario)
                        .ThenInclude(x => x.HER_Configuracion)
                .AsNoTracking()
                .AsQueryable();

            var envioActual = await envioActualQuery.FirstOrDefaultAsync();

            if (envioActual != null)
            {
                //Documento Origen
                documentoEnviado.Folio = envioActual.HER_Documento.HER_Folio;
                documentoEnviado.TipoDocumento = envioActual.HER_Documento.HER_Tipo.HER_Nombre;
                documentoEnviado.Asunto = envioActual.HER_Documento.HER_Asunto;
                documentoEnviado.NoInterno = envioActual.HER_Documento.HER_NoInterno;
                documentoEnviado.Fecha = envioActual.HER_FechaEnvio.ToString("D", _cultureEs);
                documentoEnviado.Cuerpo = envioActual.HER_Documento.HER_Cuerpo;
                documentoEnviado.TipoEnvio = envioActual.HER_TipoEnvio.HER_Nombre;

                documentoEnviado.Origen_UsuarioDe = new ResumenInfoRemitenteOrigenViewModel()
                {
                    NombreCompleto = envioActual.HER_De.HER_NombreCompleto,
                    Correo = envioActual.HER_De.HER_Correo,
                    Direccion = envioActual.HER_DeDireccion,
                    Telefono = envioActual.HER_DeTelefono,
                    AreaPadre = (envioActual.HER_De.HER_Area.HER_Area_PadreId != null) ? envioActual.HER_De.HER_Area.HER_Area_Padre.HER_Nombre : string.Empty,
                    Area = envioActual.HER_De.HER_Area.HER_Nombre,
                    Region = envioActual.HER_De.HER_Area.HER_Region.HER_Nombre,
                    Puesto = envioActual.HER_De.HER_Puesto
                };

                documentoEnviado.Origen_UsuarioPara = recepcionesActualQuery
                    .Where(y => y.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1)
                    .Select(x => new ResumenInfoDestinatariosOrigenViewModel()
                    {
                        NombreCompleto = x.HER_Para.HER_NombreCompleto,
                        Usuario = x.HER_Para.HER_UserName,
                        Correo = x.HER_Para.HER_Correo,
                        Area = x.HER_Para.HER_Area.HER_Nombre,
                        Puesto = x.HER_Para.HER_Puesto,
                        EstaActivaNotificacion = x.HER_Para.HER_Usuario.HER_Configuracion.HER_Notificaciones
                    })
                    .ToList();

                documentoEnviado.Origen_UsuarioCcp = recepcionesActualQuery
                    .Where(y => y.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN2)
                    .Select(x => new ResumenInfoDestinatariosOrigenViewModel()
                    {
                        NombreCompleto = x.HER_Para.HER_NombreCompleto,
                        Usuario = x.HER_Para.HER_UserName,
                        Correo = x.HER_Para.HER_Correo,
                        Area = x.HER_Para.HER_Area.HER_Nombre,
                        Puesto = x.HER_Para.HER_Puesto,
                        EstaActivaNotificacion = x.HER_Para.HER_Usuario.HER_Configuracion.HER_Notificaciones
                    })
                    .ToList();

                documentoEnviado.Origen_NombreCreador = envioActual.HER_Documento.HER_DocumentoCreador.HER_NombreCompleto;
                documentoEnviado.Origen_UsuarioCreador = envioActual.HER_Documento.HER_DocumentoCreador.HER_UserName;
                documentoEnviado.Origen_NombreTitular = envioActual.HER_Documento.HER_DocumentoTitular.HER_NombreCompleto;
                documentoEnviado.Origen_UsuarioTitular = envioActual.HER_Documento.HER_DocumentoTitular.HER_UserName;

                if (envioActual.HER_AnexoId != null)
                    documentoEnviado.Origen_Anexos = envioActual.HER_Anexo.HER_AnexoArchivos
                        //.Select(a => string.Format("{0}/{1}", a.HER_RutaComplemento, a.HER_Nombre))
                        .Select(a => Path.Combine(string.Format("{0}", a.HER_AnexoRutaId == null ? _environment.WebRootPath : a.HER_AnexoRuta.HER_RutaBase), string.Format("{0}/{1}", a.HER_RutaComplemento, a.HER_Nombre)))
                        .ToList();
                else
                    documentoEnviado.Origen_Anexos = new List<string>();

            }

            return documentoEnviado;
        }

        public string ConstruirQR(InfoDocumentoQRViewModel model)
        {
            QRCodeGenerator qrGenerator = new QRCodeGenerator();
            QRCodeData qrCodeData = qrGenerator.CreateQrCode(string.Format("DE:{0}\nPARA:{1}\nASUNTO:{2}\nFOLIO:{3}\n{4}", model.De, model.Para, model.Asunto, model.Folio, model.Leyenda), QRCodeGenerator.ECCLevel.Q);
            Base64QRCode qrCode = new Base64QRCode(qrCodeData);

            var qrCodeImageAsBase64 = qrCode.GetGraphic(2, System.Drawing.Color.Black, System.Drawing.Color.Transparent, true, Base64QRCode.ImageType.Png);

            return qrCodeImageAsBase64;
        }

        //Reenviar
        public async Task<ReenviarDocumentoLecturaViewModel> ObtenerDocumentoReenviarParaLecturaAsync(int envioId, string usuario)
        {
            var documentoReenviar = new ReenviarDocumentoLecturaViewModel();

            //---[Actual]---
            var envioActualQuery = _context.HER_Envio
                .Where(x => x.HER_EnvioId == envioId)
                .Include(x => x.HER_TipoEnvio)
                .Include(x => x.HER_EnvioPadre)
                .Include(x => x.HER_EstadoEnvio)
                .Include(x => x.HER_Visibilidad)
                .Include(x => x.HER_Importancia)
                //--
                .Include(x => x.HER_Documento)
                    .ThenInclude(x => x.HER_Tipo)
                .Include(x => x.HER_Documento)
                    .ThenInclude(x => x.HER_DocumentoCreador)
                .Include(x => x.HER_Documento)
                    .ThenInclude(x => x.HER_DocumentoTitular)
                //--
                .Include(x => x.HER_De)
                    .ThenInclude(x => x.HER_Area)
                        .ThenInclude(x => x.HER_Region)
                .Include(x => x.HER_De)
                    .ThenInclude(x => x.HER_Area)
                        .ThenInclude(x => x.HER_Area_Padre)
                //--
                .AsNoTracking()
                .AsQueryable();

            var recepcionesActualQuery = _context.HER_Recepcion
                .Where(x => x.HER_Envio.HER_EnvioId == envioId)
                .Include(x => x.HER_EstadoEnvio)
                .Include(x => x.HER_Para)
                    .ThenInclude(x => x.HER_Area)
                .AsNoTracking()
                .AsQueryable();

            var envioActual = await envioActualQuery.FirstOrDefaultAsync();

            if (envioActual != null)
            {
                if (envioActual.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN1 || envioActual.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4)
                {
                    // Si es un envio y el orden esta uno, entonces significa que es el envio origen
                    var nombreUsuariosCCP = recepcionesActualQuery
                        .Where(x => x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN2)
                        .Select(y => y.HER_Para.HER_NombreCompleto)
                        .AsQueryable();

                    //Documento Origen
                    documentoReenviar.Asunto = envioActual.HER_Documento.HER_Asunto;
                    documentoReenviar.Folio = envioActual.HER_Documento.HER_Folio;
                    documentoReenviar.NoInterno = envioActual.HER_Documento.HER_NoInterno;
                    documentoReenviar.Cuerpo = envioActual.HER_Documento.HER_Cuerpo;
                    documentoReenviar.TipoDocumento = envioActual.HER_Documento.HER_Tipo.HER_Nombre;
                    documentoReenviar.Fecha = envioActual.HER_FechaEnvio.ToString("D", _cultureEs);
                    documentoReenviar.ListadoCcp = nombreUsuariosCCP.ToList();


                    //Usuario Origen
                    documentoReenviar.UsuarioCorreo = envioActual.HER_De.HER_Correo;
                    documentoReenviar.UsuarioNombreCompleto = envioActual.HER_De.HER_NombreCompleto;
                    documentoReenviar.UsuarioDireccion = envioActual.HER_DeDireccion;
                    documentoReenviar.UsuarioTelefono = envioActual.HER_DeTelefono;
                    documentoReenviar.AreaPadreNombre = (envioActual.HER_De.HER_Area.HER_Area_PadreId != null) ? envioActual.HER_De.HER_Area.HER_Area_Padre.HER_Nombre : string.Empty;
                    documentoReenviar.AreaNombre = envioActual.HER_De.HER_Area.HER_Nombre;
                    documentoReenviar.AreaId = envioActual.HER_De.HER_Area.HER_AreaId;
                    documentoReenviar.RegionNombre = envioActual.HER_De.HER_Area.HER_Region.HER_Nombre;
                    documentoReenviar.PuestoNombre = envioActual.HER_De.HER_Puesto;

                    //Envio
                    documentoReenviar.EnvioId = envioActual.HER_EnvioId;
                    documentoReenviar.TipoEnvioId = envioActual.HER_TipoEnvioId;
                    documentoReenviar.TipoEnvio = envioActual.HER_TipoEnvio.HER_Nombre;
                    documentoReenviar.AsuntoEnvio = envioActual.HER_Documento.HER_Asunto;
                    documentoReenviar.FechaEnvio = envioActual.HER_FechaEnvio.ToString("dd/MM/yyyy HH:mm 'hrs.'", _cultureEs);
                    documentoReenviar.ExisteAdjuntos = envioActual.HER_AnexoId != null ? true : false;

                    //Usuario Para (respuestas definitivas)

                    if (envioActual.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN4)
                    {
                        var usuarioParaQuery = recepcionesActualQuery
                            .Where(x => x.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1)
                            .Select(y => new
                            {
                                NombreCompleto = y.HER_Para.HER_NombreCompleto,
                                Puesto = y.HER_Para.HER_Puesto,
                                Area = y.HER_Para.HER_Area.HER_Nombre,
                                TipoPara = y.HER_TipoPara
                            })
                            .AsQueryable();

                        var usuarioPara = await usuarioParaQuery.FirstOrDefaultAsync();

                        documentoReenviar.UsuarioPara_NombreCompleto = usuarioPara.NombreCompleto.ToUpper();
                        documentoReenviar.UsuarioPara_PuestoNombre = usuarioPara.Puesto.ToUpper();
                        documentoReenviar.UsuarioPara_AreaNombre = usuarioPara.Area.ToUpper();
                        documentoReenviar.UsuarioPara_Tipo = usuarioPara.TipoPara;
                    }
                    else
                    {
                        documentoReenviar.UsuarioPara_NombreCompleto = string.Empty;
                        documentoReenviar.UsuarioPara_PuestoNombre = string.Empty;
                        documentoReenviar.UsuarioPara_AreaNombre = string.Empty;
                        documentoReenviar.UsuarioPara_Tipo = 0;
                    }
                }
            }

            return documentoReenviar;
        }
        public async Task<int> CrearReenvioAsync(ReenviarViewModel reenvioViewModel)
        {
            var reenvioId = 0;
            //Busqueda Envio
            var envioQuery = _context.HER_Envio
                .Where(x => x.HER_EnvioId == reenvioViewModel.EnvioId)
                .Select(x => new { x.HER_DocumentoId, x.HER_EnvioId, x.HER_UsuarioOrigenId })
                .AsQueryable();

            var envio = await envioQuery.FirstOrDefaultAsync();

            var ordenQuery = _context.HER_Envio
                .Where(x => x.HER_Documento.HER_Folio == reenvioViewModel.Folio)
                .AsQueryable();

            //--
            var orden = await ordenQuery.MaxAsync(x => x.HER_Orden);
            var grupoEnvio = await ordenQuery.MaxAsync(x => x.HER_GrupoEnvio);

            if (envio != null)
            {
                var usuarioDeQuery = _context.HER_InfoUsuario
                    .Where(x => x.HER_InfoUsuarioId == reenvioViewModel.Usuario_DeId)
                    .Select(x => new { x.HER_Direccion, x.HER_Telefono })
                    .AsNoTracking()
                    .AsQueryable();

                var usuarioDe = await usuarioDeQuery.FirstOrDefaultAsync();
                //--
                //Reenvio
                var reenviar = new HER_Envio()
                {
                    HER_DocumentoId = envio.HER_DocumentoId,
                    HER_DeId = reenvioViewModel.Usuario_DeId,
                    HER_DeDireccion = usuarioDe.HER_Direccion,
                    HER_DeTelefono = usuarioDe.HER_Telefono,
                    HER_UsuarioEnviaId = reenvioViewModel.Usuario_EnviaId,
                    HER_TipoEnvioId = reenvioViewModel.TipoEnvioId,//ConstTipoEnvio.TipoEnvioN1
                    HER_EnvioPadreId = envio.HER_EnvioId,
                    HER_UsuarioOrigenId = null,
                    HER_Orden = (orden + 1),
                    HER_EsReenvio = true,
                    HER_GrupoEnvio = (grupoEnvio + 1),
                    HER_TotalPara = reenvioViewModel.Total_Para,
                    HER_TotalCCP = reenvioViewModel.Total_CCP,
                    HER_TotalParaRespuestas = 0,
                    HER_TotalCCPRespuestas = 0,
                    HER_Indicaciones = reenvioViewModel.Indicaciones,
                    HER_RequiereRespuesta = reenvioViewModel.RequiereRespuesta,
                    HER_FechaEnvio = DateTime.Now,
                    HER_FechaPropuesta = (reenvioViewModel.RequiereRespuesta) ? DateTime.Parse(reenvioViewModel.FechaPropuesta, _cultureEs) : DateTime.Now,
                    HER_EstadoEnvioId = (reenvioViewModel.TipoEnvioId == ConstTipoEnvio.TipoEnvioN4) ? ConstEstadoEnvio.EstadoEnvioN8 : (reenvioViewModel.RequiereRespuesta) ? ConstEstadoEnvio.EstadoEnvioN5 : ConstEstadoEnvio.EstadoEnvioN7,
                    HER_ImportanciaId = reenvioViewModel.ImportanciaId,
                    HER_VisibilidadId = reenvioViewModel.VisibilidadId,
                    HER_AnexoId = (reenvioViewModel.AnexoId > 0) ? reenvioViewModel.AnexoId : null,
                    HER_CarpetaId = null,
                    HER_TramiteId = (int?)ConstTramite.TipoN1
                };
                _context.HER_Envio.Add(reenviar);
                var result = await _context.SaveChangesAsync();

                reenvioId = (result > 0) ? reenviar.HER_EnvioId : 0;
            }

            return reenvioId;
        }
        public async Task<bool> CrearRecepcionReenvioAsync(List<RecepcionReenviarViewModel> listadoReenvioViewModel, string fechaPropuesta, int tipoEnvioId)
        {
            var listadoRecepcion = new List<HER_Recepcion>();
            var listadoCategorias = new List<HER_RecepcionCategoria>();
            var listadoCompromisos = new List<HER_Compromiso>();
            var fechaRecepcion = DateTime.Now;
            //--
            foreach (var recepcion in listadoReenvioViewModel)
            {
                //Recepción
                listadoRecepcion.Add(new HER_Recepcion()
                {
                    HER_EnvioId = recepcion.EnvioId,
                    HER_ParaId = recepcion.Usuario_ParaId,
                    HER_TipoPara = recepcion.Tipo_Para,
                    HER_TieneRespuesta = false,
                    HER_EstaLeido = false,
                    HER_FechaRecepcion = fechaRecepcion,
                    HER_CarpetaId = null,
                    HER_EstadoEnvioId = (tipoEnvioId == ConstTipoEnvio.TipoEnvioN4) ? ConstEstadoEnvio.EstadoEnvioN8 : (recepcion.RequiereRespuesta) ? (recepcion.Tipo_Para == ConstTipoDestinatario.TipoDestinatarioN1) ? ConstEstadoEnvio.EstadoEnvioN1 : ConstEstadoEnvio.EstadoEnvioN7 : ConstEstadoEnvio.EstadoEnvioN7,
                });
            }
            _context.HER_Recepcion.AddRange(listadoRecepcion);
            //--
            foreach (var recepcion in listadoRecepcion)
            {
                //Categoria
                listadoCategorias.Add(new HER_RecepcionCategoria()
                {
                    HER_CategoriaId = ConstCategoria.CategoriaN1,
                    HER_RecepcionId = recepcion.HER_RecepcionId
                });
            }

            _context.HER_RecepcionCategoria.AddRange(listadoCategorias);

            //-- -------------------------- --------------------

            if (!string.IsNullOrEmpty(fechaPropuesta))
            {
                //Agrega la fecha propuesta como primera fecha compromiso
                foreach (var recepcion in listadoRecepcion)
                {
                    if (recepcion.HER_TipoPara == ConstTipoDestinatario.TipoDestinatarioN1)
                    {
                        listadoCompromisos.Add(new HER_Compromiso()
                        {
                            HER_Estado = ConstCompromiso.EstadoN1,
                            HER_Tipo = ConstCompromiso.TipoN1,
                            HER_Fecha = DateTime.Parse(fechaPropuesta, _cultureEs),
                            HER_Registro = DateTime.Now,
                            HER_RecepcionId = recepcion.HER_RecepcionId
                        });
                    }
                }

                if (listadoCompromisos.Count > 0)
                    _context.HER_Compromiso.AddRange(listadoCompromisos);
            }

            var result = await _context.SaveChangesAsync();

            return (result > 0) ? true : false;
        }

        //Cambiar fecha compromiso
        public async Task<bool> ActualizarFechaCompromisoPrincipalEnvioAsync(NuevoCompromisoJsonModel model)
        {
            var result = 0;

            var envioActualQuery = _context.HER_Envio
                .Where(x => x.HER_EnvioId == model.EnvioId)
                .AsQueryable();

            var envioActual = await envioActualQuery.FirstOrDefaultAsync();

            envioActual.HER_TramiteId = int.Parse(model.TramiteId);
            _context.HER_Envio.Update(envioActual).State = EntityState.Modified;
            //--
            result += await _context.SaveChangesAsync();

            var compromisoActualQuery = _context.HER_Compromiso
                 .Where(x => x.HER_RecepcionId == model.RecepcionId && x.HER_Estado == ConstCompromiso.EstadoN1)
                 .AsQueryable();

            var compromisoActual = compromisoActualQuery.FirstOrDefault();

            compromisoActual.HER_Estado = ConstCompromiso.EstadoN2;
            _context.HER_Compromiso.Update(compromisoActual).State = EntityState.Modified;
            //--
            result += await _context.SaveChangesAsync();

            //-- -------------------------- --------------------
            //Agrega la fecha fecha compromiso
            var nuevoCompromiso = new HER_Compromiso()
            {
                HER_Estado = ConstCompromiso.EstadoN1,
                HER_Tipo = ConstCompromiso.TipoN2,
                HER_Fecha = DateTime.Parse(model.FechaCompromiso, _cultureEs),
                HER_Registro = DateTime.Now,
                HER_RecepcionId = model.RecepcionId,
                HER_Motivo = model.Motivo,
            };
            _context.HER_Compromiso.Add(nuevoCompromiso);

            result += await _context.SaveChangesAsync();

            return (result > 0) ? true : false;
        }

        //Cambiar fecha compromiso
        public async Task<bool> AceptarFechaCompromisoPrincipalEnvioAsync(CompromisoAceptadoJsonModel model)
        {
            var result = 0;

            var envioActualQuery = _context.HER_Envio
                .Where(x => x.HER_EnvioId == model.EnvioId)
                .AsQueryable();

            var envioActual = await envioActualQuery.FirstOrDefaultAsync();

            envioActual.HER_TramiteId = int.Parse(model.TramiteId);
            _context.HER_Envio.Update(envioActual).State = EntityState.Modified;
            //--
            result += await _context.SaveChangesAsync();

            var compromisoActualQuery = _context.HER_Compromiso
                 .Where(x => x.HER_RecepcionId == model.RecepcionId && x.HER_Estado == ConstCompromiso.EstadoN1)
                 .AsQueryable();

            var compromisoActual = compromisoActualQuery.FirstOrDefault();

            compromisoActual.HER_Estado = ConstCompromiso.EstadoN2;
            _context.HER_Compromiso.Update(compromisoActual).State = EntityState.Modified;
            //--
            result += await _context.SaveChangesAsync();

            //-- -------------------------- --------------------
            //Agrega la fecha fecha compromiso
            var aceptarCompromiso = new HER_Compromiso()
            {
                HER_Estado = ConstCompromiso.EstadoN1,
                HER_Tipo = ConstCompromiso.TipoN2,
                HER_Fecha = DateTime.Parse(model.FechaCompromiso, _cultureEs),
                HER_Registro = DateTime.Now,
                HER_RecepcionId = model.RecepcionId,
                HER_Motivo = model.Motivo,
            };
            _context.HER_Compromiso.Add(aceptarCompromiso);

            result += await _context.SaveChangesAsync();

            return (result > 0) ? true : false;
        }

        public async Task<bool> ActualizarFechaCompromisoAsync(NuevoCompromisoJsonModel model)
        {
            var result = 0;
            var compromisoActualQuery = _context.HER_Compromiso
                 .Where(x => x.HER_RecepcionId == model.RecepcionId && x.HER_Estado == ConstCompromiso.EstadoN1)
                 .AsQueryable();

            var compromisoActual = compromisoActualQuery.FirstOrDefault();

            compromisoActual.HER_Estado = ConstCompromiso.EstadoN2;
            _context.HER_Compromiso.Update(compromisoActual).State = EntityState.Modified;
            //--
            result += await _context.SaveChangesAsync();

            //-- -------------------------- --------------------
            //Agrega la fecha fecha compromiso
            var nuevoCompromiso = new HER_Compromiso()
            {
                HER_Estado = ConstCompromiso.EstadoN1,
                HER_Tipo = ConstCompromiso.TipoN2,
                HER_Fecha = DateTime.Parse(model.FechaCompromiso, _cultureEs),
                HER_Registro = DateTime.Now,
                HER_RecepcionId = model.RecepcionId,
                HER_Motivo = model.Motivo,
            };
            _context.HER_Compromiso.Add(nuevoCompromiso);

            result += await _context.SaveChangesAsync();

            return (result > 0) ? true : false;
        }

        public async Task<bool> ActualizarFechaPropuestaAsync(CompromisoAceptadoJsonModel model)
        {
            var result = 0;
            var compromisoActualQuery = _context.HER_Compromiso
                 .Where(x => x.HER_RecepcionId == model.RecepcionId && x.HER_Estado == ConstCompromiso.EstadoN1)
                 .AsQueryable();

            var compromisoActual = compromisoActualQuery.FirstOrDefault();

            compromisoActual.HER_Estado = ConstCompromiso.EstadoN2;
            _context.HER_Compromiso.Update(compromisoActual).State = EntityState.Modified;
            //--
            result += await _context.SaveChangesAsync();

            //-- -------------------------- --------------------
            //Agrega la fecha fecha compromiso
            var nuevoCompromiso = new HER_Compromiso()
            {
                HER_Estado = ConstCompromiso.EstadoN1,
                HER_Tipo = ConstCompromiso.TipoN2,
                HER_Fecha = DateTime.Parse(model.FechaCompromiso, _cultureEs),
                HER_Registro = DateTime.Now,
                HER_RecepcionId = model.RecepcionId,
                HER_Motivo = model.Motivo,
            };
            _context.HER_Compromiso.Add(nuevoCompromiso);

            result += await _context.SaveChangesAsync();

            return (result > 0) ? true : false;
        }
        //Historial correo
        public async Task<bool> GuardarHistorialCorreo(GuardarHistorialCorreo historialCorreo)
        {
            var historicoCorreo = new HER_HistorialCorreo()
            {
                HER_Fecha = historialCorreo.Fecha,
                HER_InfoUsuarioId = historialCorreo.Remitente,
                HER_Delegado = historialCorreo.EsDelegado,
                HER_Destinatario = historialCorreo.Destinatario,
                HER_EnvioId = historialCorreo.EnvioId,
                HER_Tipo = historialCorreo.Tipo,
                HER_TipoEnvio = historialCorreo.TipoEnvio

            };

            _context.HER_HistorialCorreo.Add(historicoCorreo);
            var result = await _context.SaveChangesAsync();

            return (result > 0) ? true : false;
        }

        public async Task<List<ListadoHistorialCorreo>> ObtenerListadoHistorialAsync(int envioId, int tipoEnvio, int tipo)
        {
            var historialQuery = _context.HER_HistorialCorreo
                .Where(x => x.HER_EnvioId == envioId
                         && x.HER_TipoEnvio == tipoEnvio
                         && x.HER_Tipo == tipo)
                .AsNoTracking()
                .Select(x => new ListadoHistorialCorreo()
                {
                    Fecha = x.HER_Fecha,
                    Remitente = x.HER_InfoUsuario.HER_Correo,
                    Destinatario = x.HER_Destinatario,
                    EsDelegado = x.HER_Delegado
                })
                .AsQueryable();

            return await historialQuery.ToListAsync();
        }

        public async Task<NumerologiaEnvioViewModel> ObtenerNumerologiaEnvioAsync(int documentoId, int grupoEnvio)
        {
            NumerologiaEnvioViewModel modelo = new NumerologiaEnvioViewModel();

            var envioOrigenQuery = _context.HER_Envio
                .Where(x => x.HER_DocumentoId == documentoId && x.HER_GrupoEnvio == grupoEnvio && x.HER_TipoEnvioId == ConstTipoEnvio.TipoEnvioN2)
                .OrderBy(x => x.HER_Orden)
                .AsNoTracking()
                .AsQueryable();

            modelo.TotalTurnados = await envioOrigenQuery.CountAsync();

            return modelo;
        }

        public async Task<bool> ExisteFechaModificadaAsync(int recepcionId)
        {
            var compromisoQuery = _context.HER_Compromiso
                .Where(x => x.HER_RecepcionId == recepcionId)
                .AsNoTracking()
                .AsQueryable();

            var listadoCompromiso = await compromisoQuery.ToListAsync();
            bool regreso = false;

            if (listadoCompromiso.Count() > 0)
            {
                regreso = listadoCompromiso
                    .Where(x => x.HER_Estado == ConstCompromiso.EstadoN1 && x.HER_Tipo == ConstCompromiso.TipoN2)
                    .Any();
            }
            else
            {
                //En caso de que no haya elementos, significa que no requiere respuesta , por lo tanto el valor true habilita el boton de turnar
                regreso = true;
            }

            return regreso;
        }
    }
}